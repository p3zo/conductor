{"version":3,"file":"tf-backend-cpu.fesm.min.js","sources":["../../../../tfjs-backend-cpu/src/cpu_util.ts","../../../../tfjs-backend-cpu/src/backend_cpu.ts","../../../../tfjs-backend-cpu/src/kernels/Abs.ts","../../../../tfjs-backend-cpu/src/utils/binary_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Complex.ts","../../../../tfjs-backend-cpu/src/utils/zeros_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Identity.ts","../../../../tfjs-backend-cpu/src/kernels/Real.ts","../../../../tfjs-backend-cpu/src/kernels/Cast.ts","../../../../tfjs-backend-cpu/src/utils/binary_utils.ts","../../../../tfjs-backend-cpu/src/kernels/Add.ts","../../../../tfjs-backend-cpu/src/kernels/Bincount_impl.ts","../../../../tfjs-backend-cpu/src/utils/unary_impl.ts","../../../../tfjs-backend-cpu/src/utils/unary_utils.ts","../../../../tfjs-backend-cpu/src/kernels/Ceil.ts","../../../../tfjs-backend-cpu/src/kernels/Concat_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Equal.ts","../../../../tfjs-backend-cpu/src/kernels/Exp.ts","../../../../tfjs-backend-cpu/src/kernels/Expm1.ts","../../../../tfjs-backend-cpu/src/kernels/Floor.ts","../../../../tfjs-backend-cpu/src/kernels/GatherNd_Impl.ts","../../../../tfjs-backend-cpu/src/kernels/GatherV2_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Greater.ts","../../../../tfjs-backend-cpu/src/kernels/GreaterEqual.ts","../../../../tfjs-backend-cpu/src/kernels/Less.ts","../../../../tfjs-backend-cpu/src/kernels/LessEqual.ts","../../../../tfjs-backend-cpu/src/kernels/LinSpace_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Log.ts","../../../../tfjs-backend-cpu/src/kernels/Max_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Maximum.ts","../../../../tfjs-backend-cpu/src/kernels/Minimum.ts","../../../../tfjs-backend-cpu/src/kernels/Multiply.ts","../../../../tfjs-backend-cpu/src/kernels/Neg.ts","../../../../tfjs-backend-cpu/src/kernels/NotEqual.ts","../../../../tfjs-backend-cpu/src/kernels/Transpose_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Transpose.ts","../../../../tfjs-backend-cpu/src/kernels/Prod.ts","../../../../tfjs-backend-cpu/src/kernels/RaggedGather_impl.ts","../../../../tfjs-backend-cpu/src/kernels/RaggedTensorToTensor_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Range_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Rsqrt.ts","../../../../tfjs-backend-cpu/src/kernels/Scatter_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Sigmoid.ts","../../../../tfjs-backend-cpu/src/kernels/Slice.ts","../../../../tfjs-backend-cpu/src/kernels/SparseFillEmptyRows_impl.ts","../../../../tfjs-backend-cpu/src/kernels/SparseReshape_impl.ts","../../../../tfjs-backend-cpu/src/kernels/SparseSegmentReduction_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Sqrt.ts","../../../../tfjs-backend-cpu/src/kernels/SquaredDifference.ts","../../../../tfjs-backend-cpu/src/kernels/StridedSlice_impl.ts","../../../../tfjs-backend-cpu/src/kernels/StringNGrams_impl.ts","../../../../tfjs-backend-cpu/src/kernels/StringSplit_impl.ts","../../../../tfjs-backend-cpu/src/kernels/StringToHashBucketFast_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Sub.ts","../../../../tfjs-backend-cpu/src/kernels/Tile_impl.ts","../../../../tfjs-backend-cpu/src/kernels/TopK_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Unique_impl.ts","../../../../tfjs-backend-cpu/src/version.ts","../../../../tfjs-backend-cpu/src/base.ts","../../../../tfjs-backend-cpu/src/kernels/Elu.ts","../../../../tfjs-backend-cpu/src/kernels/LeakyRelu.ts","../../../../tfjs-backend-cpu/src/kernels/Prelu.ts","../../../../tfjs-backend-cpu/src/kernels/Relu.ts","../../../../tfjs-backend-cpu/src/kernels/Relu6.ts","../../../../tfjs-backend-cpu/src/utils/fused_utils.ts","../../../../tfjs-backend-cpu/src/kernels/Reshape.ts","../../../../tfjs-backend-cpu/src/kernels/BatchMatMul.ts","../../../../tfjs-backend-cpu/src/kernels/_FusedMatMul.ts","../../../../tfjs-backend-cpu/src/kernels/Acos.ts","../../../../tfjs-backend-cpu/src/kernels/Acosh.ts","../../../../tfjs-backend-cpu/src/kernels/AddN.ts","../../../../tfjs-backend-cpu/src/kernels/All.ts","../../../../tfjs-backend-cpu/src/kernels/Any.ts","../../../../tfjs-backend-cpu/src/kernels/ArgMax.ts","../../../../tfjs-backend-cpu/src/kernels/ArgMin.ts","../../../../tfjs-backend-cpu/src/kernels/Asin.ts","../../../../tfjs-backend-cpu/src/kernels/Asinh.ts","../../../../tfjs-backend-cpu/src/kernels/Atan.ts","../../../../tfjs-backend-cpu/src/kernels/Atan2.ts","../../../../tfjs-backend-cpu/src/kernels/Atanh.ts","../../../../tfjs-backend-cpu/src/utils/pool_utils.ts","../../../../tfjs-backend-cpu/src/kernels/AvgPool.ts","../../../../tfjs-backend-cpu/src/kernels/AvgPool3D.ts","../../../../tfjs-backend-cpu/src/kernels/AvgPool3DGrad.ts","../../../../tfjs-backend-cpu/src/kernels/AvgPoolGrad.ts","../../../../tfjs-backend-cpu/src/kernels/BatchNorm.ts","../../../../tfjs-backend-cpu/src/kernels/BatchToSpaceND.ts","../../../../tfjs-backend-cpu/src/kernels/Bincount.ts","../../../../tfjs-backend-cpu/src/kernels/BroadcastArgs.ts","../../../../tfjs-backend-cpu/src/kernels/ClipByValue.ts","../../../../tfjs-backend-cpu/src/kernels/ComplexAbs.ts","../../../../tfjs-backend-cpu/src/kernels/Imag.ts","../../../../tfjs-backend-cpu/src/kernels/Concat.ts","../../../../tfjs-backend-cpu/src/kernels/Conv2D.ts","../../../../tfjs-backend-cpu/src/kernels/Conv2DBackpropFilter.ts","../../../../tfjs-backend-cpu/src/kernels/Conv2DBackpropInput.ts","../../../../tfjs-backend-cpu/src/kernels/Conv3D.ts","../../../../tfjs-backend-cpu/src/kernels/Conv3DBackpropFilterV2.ts","../../../../tfjs-backend-cpu/src/kernels/Conv3DBackpropInputV2.ts","../../../../tfjs-backend-cpu/src/kernels/Cos.ts","../../../../tfjs-backend-cpu/src/kernels/Cosh.ts","../../../../tfjs-backend-cpu/src/kernels/CropAndResize.ts","../../../../tfjs-backend-cpu/src/kernels/Cumprod.ts","../../../../tfjs-backend-cpu/src/kernels/Cumsum.ts","../../../../tfjs-backend-cpu/src/kernels/DenseBincount.ts","../../../../tfjs-backend-cpu/src/kernels/DepthToSpace.ts","../../../../tfjs-backend-cpu/src/kernels/DepthwiseConv2dNative.ts","../../../../tfjs-backend-cpu/src/kernels/DepthwiseConv2dNativeBackpropFilter.ts","../../../../tfjs-backend-cpu/src/kernels/DepthwiseConv2dNativeBackpropInput.ts","../../../../tfjs-backend-cpu/src/kernels/Diag.ts","../../../../tfjs-backend-cpu/src/kernels/Dilation2D.ts","../../../../tfjs-backend-cpu/src/kernels/Dilation2DBackpropFilter.ts","../../../../tfjs-backend-cpu/src/kernels/Dilation2DBackpropInput.ts","../../../../tfjs-backend-cpu/src/kernels/Sum.ts","../../../../tfjs-backend-cpu/src/kernels/Einsum.ts","../../../../tfjs-backend-cpu/src/kernels/EluGrad.ts","../../../../tfjs-backend-cpu/src/kernels/Erf.ts","../../../../tfjs-backend-cpu/src/kernels/ExpandDims.ts","../../../../tfjs-backend-cpu/src/kernels/RealDiv.ts","../../../../tfjs-backend-cpu/src/utils/fft_utils.ts","../../../../tfjs-backend-cpu/src/kernels/FFT.ts","../../../../tfjs-backend-cpu/src/kernels/Fill.ts","../../../../tfjs-backend-cpu/src/kernels/FlipLeftRight.ts","../../../../tfjs-backend-cpu/src/kernels/FloorDiv.ts","../../../../tfjs-backend-cpu/src/kernels/FusedConv2D.ts","../../../../tfjs-backend-cpu/src/kernels/FusedDepthwiseConv2D.ts","../../../../tfjs-backend-cpu/src/kernels/GatherNd.ts","../../../../tfjs-backend-cpu/src/kernels/GatherV2.ts","../../../../tfjs-backend-cpu/src/kernels/IFFT.ts","../../../../tfjs-backend-cpu/src/kernels/IsFinite.ts","../../../../tfjs-backend-cpu/src/kernels/IsInf.ts","../../../../tfjs-backend-cpu/src/kernels/IsNaN.ts","../../../../tfjs-backend-cpu/src/kernels/LinSpace.ts","../../../../tfjs-backend-cpu/src/kernels/Log1p.ts","../../../../tfjs-backend-cpu/src/kernels/LogicalAnd.ts","../../../../tfjs-backend-cpu/src/kernels/LogicalNot.ts","../../../../tfjs-backend-cpu/src/kernels/LogicalOr.ts","../../../../tfjs-backend-cpu/src/kernels/LRN.ts","../../../../tfjs-backend-cpu/src/kernels/LRNGrad.ts","../../../../tfjs-backend-cpu/src/kernels/Max.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPool.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPool3D.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPool3DGrad.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPoolGrad.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPoolWithArgmax.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPoolWithArgmax_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Mean.ts","../../../../tfjs-backend-cpu/src/kernels/Min.ts","../../../../tfjs-backend-cpu/src/kernels/MirrorPad.ts","../../../../tfjs-backend-cpu/src/kernels/Mod.ts","../../../../tfjs-backend-cpu/src/kernels/Softmax.ts","../../../../tfjs-backend-cpu/src/kernels/Multinomial.ts","../../../../tfjs-backend-cpu/src/kernels/NonMaxSuppressionV3.ts","../../../../tfjs-backend-cpu/src/kernels/NonMaxSuppressionV4.ts","../../../../tfjs-backend-cpu/src/kernels/NonMaxSuppressionV5.ts","../../../../tfjs-backend-cpu/src/kernels/OneHot.ts","../../../../tfjs-backend-cpu/src/kernels/ZerosLike.ts","../../../../tfjs-backend-cpu/src/kernels/OnesLike.ts","../../../../tfjs-backend-cpu/src/kernels/Pack.ts","../../../../tfjs-backend-cpu/src/kernels/PadV2.ts","../../../../tfjs-backend-cpu/src/kernels/Pow.ts","../../../../tfjs-backend-cpu/src/kernels/RaggedGather.ts","../../../../tfjs-backend-cpu/src/kernels/RaggedTensorToTensor.ts","../../../../tfjs-backend-cpu/src/kernels/Range.ts","../../../../tfjs-backend-cpu/src/kernels/Reciprocal.ts","../../../../tfjs-backend-cpu/src/kernels/ResizeBilinear.ts","../../../../tfjs-backend-cpu/src/kernels/ResizeBilinearGrad.ts","../../../../tfjs-backend-cpu/src/kernels/ResizeNearestNeighbor.ts","../../../../tfjs-backend-cpu/src/kernels/ResizeNearestNeighborGrad.ts","../../../../tfjs-backend-cpu/src/kernels/Reverse.ts","../../../../tfjs-backend-cpu/src/kernels/RotateWithOffset.ts","../../../../tfjs-backend-cpu/src/kernels/Round.ts","../../../../tfjs-backend-cpu/src/kernels/ScatterNd.ts","../../../../tfjs-backend-cpu/src/kernels/SearchSorted_impl.ts","../../../../tfjs-backend-cpu/src/kernels/SearchSorted.ts","../../../../tfjs-backend-cpu/src/kernels/Select.ts","../../../../tfjs-backend-cpu/src/kernels/Selu.ts","../../../../tfjs-backend-cpu/src/kernels/Sign.ts","../../../../tfjs-backend-cpu/src/kernels/Sin.ts","../../../../tfjs-backend-cpu/src/kernels/Sinh.ts","../../../../tfjs-backend-cpu/src/kernels/Softplus.ts","../../../../tfjs-backend-cpu/src/kernels/SpaceToBatchND.ts","../../../../tfjs-backend-cpu/src/kernels/SparseFillEmptyRows.ts","../../../../tfjs-backend-cpu/src/kernels/SparseReshape.ts","../../../../tfjs-backend-cpu/src/kernels/SparseSegmentMean.ts","../../../../tfjs-backend-cpu/src/kernels/SparseSegmentSum.ts","../../../../tfjs-backend-cpu/src/kernels/SparseToDense.ts","../../../../tfjs-backend-cpu/src/kernels/SplitV.ts","../../../../tfjs-backend-cpu/src/kernels/Square.ts","../../../../tfjs-backend-cpu/src/kernels/Step.ts","../../../../tfjs-backend-cpu/src/kernels/StridedSlice.ts","../../../../tfjs-backend-cpu/src/kernels/StringNGrams.ts","../../../../tfjs-backend-cpu/src/kernels/StringSplit.ts","../../../../tfjs-backend-cpu/src/kernels/StringToHashBucketFast.ts","../../../../tfjs-backend-cpu/src/kernels/Tan.ts","../../../../tfjs-backend-cpu/src/kernels/Tanh.ts","../../../../tfjs-backend-cpu/src/kernels/Transform.ts","../../../../tfjs-backend-cpu/src/kernels/UnsortedSegmentSum.ts","../../../../tfjs-backend-cpu/src/register_all_kernels.ts","../../../../tfjs-backend-cpu/src/kernels/Tile.ts","../../../../tfjs-backend-cpu/src/kernels/TopK.ts","../../../../tfjs-backend-cpu/src/kernels/Unique.ts","../../../../tfjs-backend-cpu/src/kernels/Unpack.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${\n              opName} does not support complex64 tensors in the CPU backend.`);\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendTimingInfo, buffer, DataStorage, DataType, engine, env, kernel_impls, KernelBackend, Rank, ShapeMap, Tensor, Tensor2D, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nconst whereImpl = kernel_impls.whereImpl;\nimport {assertNotComplex} from './cpu_util';\n\ninterface DataId {}\n\nexport interface TensorData<D extends DataType> {\n  values?: backend_util.BackendValues;\n  dtype: D;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensors, with a parent joining the two with the\n  // complexTensorInfos field.\n  complexTensorInfos?: {real: TensorInfo, imag: TensorInfo};\n  // refCount keeps track of how many tensors reference it. Used for memory\n  // management.\n  refCount: number;\n}\n\nexport class MathBackendCPU extends KernelBackend {\n  public blockSize = 48;\n\n  data: DataStorage<TensorData<DataType>>;\n  private firstUse = true;\n  private static nextDataId = 0;\n  private nextDataId(): number {\n    return MathBackendCPU.nextDataId++;\n  }\n\n  constructor() {\n    super();\n    this.data = new DataStorage(this, engine());\n  }\n\n  write(values: backend_util.BackendValues, shape: number[], dtype: DataType):\n      DataId {\n    if (this.firstUse) {\n      this.firstUse = false;\n      if (env().get('IS_NODE')) {\n        backend_util.warn(\n            '\\n============================\\n' +\n            'Hi, looks like you are running TensorFlow.js in ' +\n            'Node.js. To speed things up dramatically, install our node ' +\n            'backend, visit https://github.com/tensorflow/tfjs-node for more details. ' +\n            '\\n============================');\n      }\n    }\n    const dataId = {id: this.nextDataId()};\n\n    this.data.set(dataId, {values, dtype, refCount: 1});\n\n    return dataId;\n  }\n\n  /**\n   * Create a data bucket in cpu backend.\n   * @param shape Shape of the `TensorInfo`.\n   * @param dtype DType of the `TensorInfo`.\n   * @param values The value of the `TensorInfo` stored as a flattened array.\n   */\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: backend_util.BackendValues|string[]): TensorInfo {\n    let outId;\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      const encodedValues =\n          (values as {} as string[]).map(d => util.encodeString(d));\n\n      outId = this.write(encodedValues, shape, dtype);\n    } else {\n      outId = this.write(values as TypedArray, shape, dtype);\n    }\n\n    return {dataId: outId, shape, dtype};\n  }\n\n  /** Return refCount of a `TensorData`. */\n  refCount(dataId: DataId): number {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  /** Increase refCount of a `TensorData`. */\n  incRef(dataId: DataId): void {\n    const tensorData = this.data.get(dataId);\n    tensorData.refCount++;\n  }\n\n  /** Decrease refCount of a `TensorData`. */\n  decRef(dataId: DataId): void {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      tensorData.refCount--;\n    }\n  }\n\n  move(\n      dataId: DataId, values: backend_util.BackendValues, shape: number[],\n      dtype: DataType, refCount: number): void {\n    this.data.set(dataId, {values, dtype, refCount});\n  }\n\n  numDataIds(): number {\n    return this.data.numDataIds();\n  }\n\n  async read(dataId: DataId): Promise<backend_util.BackendValues> {\n    return this.readSync(dataId);\n  }\n  readSync(dataId: DataId): backend_util.BackendValues {\n    const {dtype, complexTensorInfos} = this.data.get(dataId);\n\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      return backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    }\n\n    return this.data.get(dataId).values;\n  }\n\n  bufferSync<R extends Rank, D extends DataType>(t: TensorInfo):\n      TensorBuffer<R, D> {\n    const data = this.readSync(t.dataId);\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        const strings = (data as Uint8Array[]).map(d => util.decodeString(d));\n        return buffer(t.shape as ShapeMap[R], t.dtype, strings) as\n            TensorBuffer<R, D>;\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, data as TypedArray) as\n        TensorBuffer<R, D>;\n  }\n\n  makeOutput<T extends Tensor>(\n      values: backend_util.BackendValues, shape: number[], dtype: DataType): T {\n    return engine().makeTensorFromTensorInfo(\n               this.makeTensorInfo(shape, dtype, values), this) as T;\n  }\n\n  /**\n   * Dispose the memory if the dataId has 0 refCount. Return true if the memory\n   * is released or memory is not managed in this backend, false if memory is\n   * not cleared.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  disposeData(dataId: DataId, force = false): boolean {\n    if (this.data.has(dataId)) {\n      this.data.get(dataId).refCount--;\n      if (!force && this.data.get(dataId).refCount > 0) {\n        return false;\n      }\n\n      const {complexTensorInfos} = this.data.get(dataId);\n\n      if (complexTensorInfos != null) {\n        this.disposeData(complexTensorInfos.real.dataId, true);\n        this.disposeData(complexTensorInfos.imag.dataId, true);\n      }\n\n      this.data.delete(dataId);\n    }\n    return true;\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  async time(f: () => void): Promise<BackendTimingInfo> {\n    const start = util.now();\n    f();\n    const kernelMs = util.now() - start;\n    return {kernelMs};\n  }\n\n  memory() {\n    return {\n      // Unreliable due to automatic gc. The numbers above are cumulative.\n      unreliable: true,\n      reasons:\n          ['The reported memory is an upper bound. Due to automatic garbage ' +\n           'collection, the true allocated memory may be less.']\n    };\n  }\n\n  where(condition: Tensor): Tensor2D {\n    assertNotComplex([condition], 'where');\n\n    const condVals = this.readSync(condition.dataId) as TypedArray;\n    return whereImpl(condition.shape, condVals);\n  }\n\n  dispose() {}\n\n  floatPrecision(): 16|32 {\n    return 32;\n  }\n\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return super.epsilon();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function simpleAbsImpl(vals: TypedArray): Float32Array {\n  const resultValues = new Float32Array(vals.length);\n  for (let i = 0; i < vals.length; ++i) {\n    resultValues[i] = Math.abs(vals[i]);\n  }\n  return resultValues;\n}\n\nexport const abs = (args: {inputs: AbsInputs, backend: MathBackendCPU}) => {\n  const {x} = args.inputs;\n  const cpuBackend = args.backend;\n\n  assertNotComplex(x, 'abs');\n\n  let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n  const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n  resultValues = simpleAbsImpl(values);\n\n  return cpuBackend.makeOutput(resultValues, x.shape, x.dtype);\n};\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'cpu',\n  kernelFunc: abs as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, DataValues, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleBinaryKernelImpl, SimpleBinaryOperation} from './binary_types';\n\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op: SimpleBinaryOperation):\n    SimpleBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aVals: DataValues,\n          bVals: DataValues, dtype: DataType): [TypedArray, number[]] => {\n    const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    const resultRank = newShape.length;\n    const resultStrides = util.computeStrides(newShape);\n    const resultSize = util.sizeFromShape(newShape);\n\n    const result =\n        util.getTypedArrayFromDType(dtype as NumericDataType, resultSize);\n\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n\n    const aStrides = util.computeStrides(aShape);\n    const bStrides = util.computeStrides(bShape);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < result.length; ++i) {\n        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      for (let i = 0; i < result.length; ++i) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        result[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n\n    return [result, newShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function complex(args: {inputs: ComplexInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const realVals = backend.data.get(real.dataId).values as TypedArray;\n  const imagVals = backend.data.get(imag.dataId).values as TypedArray;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n\n  const complex = backend.data.get(complexInfo.dataId);\n\n  // The complex tensor owns the underlying real and imag tensorInfos, only the\n  // complex tensor tracks refCount, when complexData is disposed the\n  // underlying tensorData will be disposed.\n  complex.complexTensorInfos = {\n    real: backend.makeTensorInfo(real.shape, 'float32', realVals),\n    imag: backend.makeTensorInfo(imag.shape, 'float32', imagVals)\n  };\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'cpu',\n  kernelFunc: complex as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from '../kernels/Complex';\n\n/**\n * Generates a tensorInfo with all zeros value.\n * @param backend cpu backend.\n * @param shape Shape for the zeros tensor.\n * @param dtype Optional. If set, the result has this dtype.\n */\nexport function zeros(\n    backend: MathBackendCPU, shape: number[],\n    dtype: DataType = 'float32'): TensorInfo {\n  if (dtype === 'complex64') {\n    const real = zeros(backend, shape, 'float32');\n    const imag = zeros(backend, shape, 'float32');\n\n    return complex({inputs: {real, imag}, backend});\n  }\n\n  const values = util.makeZerosTypedArray(util.sizeFromShape(shape), dtype);\n\n  return backend.makeTensorInfo(shape, dtype, values);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  backend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'cpu',\n  kernelFunc: identity as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Real, RealInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function real(args: {inputs: RealInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const real = backend.data.get(input.dataId).complexTensorInfos.real;\n  const realVal = backend.data.get(real.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the real value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(real.shape, real.dtype, realVal);\n}\n\nexport const realConfig: KernelConfig = {\n  kernelName: Real,\n  backendName: 'cpu',\n  kernelFunc: real as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Cast, CastAttrs, CastInputs, DataType, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {zeros} from '../utils/zeros_impl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {real} from './Real';\n\nexport function castImpl(\n    values: TypedArray, shape: number[], inputType: DataType,\n    dtype: DataType): [number[], DataType, TypedArray] {\n  if (dtype === 'int32') {\n    const resultValues = Int32Array.from(values);\n    return [shape, 'int32', resultValues];\n  }\n\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    const zero = util.toTypedArray([0], inputType);\n\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl(\n        (a, b) => (a !== b) ? 1 : 0)(shape, [], values, zero, 'bool');\n\n    return [resultShape, 'bool', resultData];\n  }\n  throw new Error(`Error in Cast: failed to cast ${inputType} to ${dtype}`);\n}\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendCPU, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensorInfo}, backend});\n\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const [resultShape, resultType, resultData] =\n      castImpl(values, x.shape, x.dtype, dtype);\n  return backend.makeTensorInfo(resultShape, resultType, resultData);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from '../kernels/Cast';\nimport {complex} from '../kernels/Complex';\n\nimport {ComplexBinaryKernelImpl, ComplexBinaryOperation, SimpleBinaryKernelImpl} from './binary_types';\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param name Kernel name.\n * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.\n * @param binaryKernelComplexImpl Optional. If exists, represents a\n *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype\n *     is `complex64`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(\n    name: string, simpleImpl: SimpleBinaryKernelImpl,\n    complexImpl?: ComplexBinaryKernelImpl, dtype?: DataType): KernelFunc {\n  if (complexImpl == null) {\n    return ({inputs, backend}) => {\n      const {a, b} = inputs as BinaryInputs;\n      const cpuBackend = backend as MathBackendCPU;\n\n      assertNotComplex([a, b], name);\n\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const decodedAVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(aVals as any as Uint8Array[]) :\n          aVals;\n      const decodedBVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(bVals as any as Uint8Array[]) :\n          bVals;\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    };\n  }\n\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      const $aComplex = cast(\n          {inputs: {x: a}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n\n      const aReal = $aComplexVals.complexTensorInfos.real;\n      const aImag = $aComplexVals.complexTensorInfos.imag;\n\n      const aRealVals =\n          cpuBackend.data.get(aReal.dataId).values as Float32Array;\n      const aImagVals =\n          cpuBackend.data.get(aImag.dataId).values as Float32Array;\n\n      const $bComplex = cast(\n          {inputs: {x: b}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n\n      const bReal = $bComplexVals.complexTensorInfos.real;\n      const bImag = $bComplexVals.complexTensorInfos.imag;\n\n      const bRealVals =\n          cpuBackend.data.get(bReal.dataId).values as Float32Array;\n      const bImagVals =\n          cpuBackend.data.get(bImag.dataId).values as Float32Array;\n\n      const [resultRealData, resultImagData, resultShape] = complexImpl(\n          a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);\n\n      const resultReal =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\n\n      const resultImag =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\n\n      const result = complex(\n          {inputs: {real: resultReal, imag: resultImag}, backend: cpuBackend});\n\n      cpuBackend.disposeIntermediateTensorInfo($aComplex);\n      cpuBackend.disposeIntermediateTensorInfo($bComplex);\n      cpuBackend.disposeIntermediateTensorInfo(resultReal);\n      cpuBackend.disposeIntermediateTensorInfo(resultImag);\n\n      return result;\n    } else {\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    }\n  };\n}\n\n/**\n * Template that creates the complex type implementation for binary ops.\n * Supports broadcast.\n */\nexport function createComplexBinaryKernelImpl(op: ComplexBinaryOperation):\n    ComplexBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aRealVals: Float32Array,\n          aImagVals: Float32Array, bRealVals: Float32Array,\n          bImagVals: Float32Array): [TypedArray, TypedArray, number[]] => {\n    const resultShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const resultSize = util.sizeFromShape(resultShape);\n    const resultRank = resultShape.length;\n    const resultStrides = util.computeStrides(resultShape);\n\n    const resultRealVals = util.getTypedArrayFromDType('float32', resultSize);\n    const resultImagVals = util.getTypedArrayFromDType('float32', resultSize);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, resultShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, resultShape);\n\n    const aVals = backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\n    const bVals = backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\n\n    const aRank = aShape.length;\n    const aStrides = util.computeStrides(aShape);\n\n    const bRank = bShape.length;\n    const bStrides = util.computeStrides(bShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const aIdx = i % aVals.length;\n        const bIdx = i % bVals.length;\n\n        const result =\n            op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2],\n               bVals[bIdx * 2 + 1]);\n\n        resultRealVals[i] = result.real;\n        resultImagVals[i] = result.imag;\n      }\n    } else {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        const opResult =\n            op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2],\n               bVals[bIndex * 2 + 1]);\n\n        resultRealVals[i] = opResult.real;\n        resultImagVals[i] = opResult.imag;\n      }\n    }\n    return [resultRealVals, resultImagVals, resultShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const addImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => a + b));\nexport const addComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal + bReal, imag: aImag + bImag};\n    }));\n\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'cpu',\n  kernelFunc: add\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function bincountImpl(\n    xVals: TypedArray, weightsVals: TypedArray, weightsDtype: DataType,\n    weightsShape: number[], size: number): TypedArray {\n  const weightsSize = util.sizeFromShape(weightsShape);\n  const outVals = util.makeZerosTypedArray(size, weightsDtype) as TypedArray;\n\n  for (let i = 0; i < xVals.length; i++) {\n    const value = xVals[i];\n    if (value < 0) {\n      throw new Error('Input x must be non-negative!');\n    }\n\n    if (value >= size) {\n      continue;\n    }\n\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n\n  return outVals;\n}\n\nexport function bincountReduceImpl<R extends Rank>(\n    xBuf: TensorBuffer<R>, weightsBuf: TensorBuffer<R>, size: number,\n    binaryOutput = false): TensorBuffer<R> {\n  const numRows = xBuf.shape[0];\n  const numCols = xBuf.shape[1];\n\n  const outBuf = buffer([numRows, size], weightsBuf.dtype);\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      const value = xBuf.get(i, j);\n      if (value < 0) {\n        throw new Error('Input x must be non-negative!');\n      }\n\n      if (value >= size) {\n        continue;\n      }\n\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NumericDataType, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl(op: SimpleUnaryOperation):\n    SimpleUnaryImpl {\n  return (values, dtype, attrs) => {\n    const newValues =\n        util.getTypedArrayFromDType(dtype as NumericDataType, values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return newValues;\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelFunc, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param name Kernel name.\n * @param op A `SimpleUnaryOperation` for the kernel.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFunc(\n    name: string, op: SimpleUnaryOperation, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xSize = util.sizeFromShape(x.shape);\n    const $dtype = dtype || x.dtype;\n    const newValues = util.getArrayFromDType($dtype, xSize);\n    for (let i = 0; i < xSize; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n\n/**\n * Template that creates a `KernelFunc` for unary ops from the given\n * `SimpleUnaryImpl`..\n * @param name Kernel name.\n * @param unaryImpl A `SimpleUnaryImpl` that implements the op.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFuncFromImpl(\n    name: string, unaryImpl: SimpleUnaryImpl, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const $dtype = dtype || x.dtype;\n    const newValues = unaryImpl(values, $dtype, attrs);\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'cpu',\n  kernelFunc: ceil,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function concatImpl(\n    inputs: Array<{vals: BackendValues, shape: number[]}>, outShape: number[],\n    dtype: DataType, simplyConcat: boolean): TypedArray|string[] {\n  const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n\n  if (simplyConcat && dtype !== 'string') {\n    // Use built-in TypedArray.set() method for speed.\n    let offset = 0;\n    inputs.forEach(input => {\n      const size = util.sizeFromShape(input.shape);\n\n      (outVals as TypedArray).set(input.vals as TypedArray, offset);\n      offset += size;\n    });\n  } else {\n    let colOffset = 0;\n\n    inputs.forEach(input => {\n      const decodedData = dtype === 'string' ?\n          backend_util.fromUint8ToStringArray(input.vals as Uint8Array[]) :\n          input.vals as TypedArray;\n\n      let tIdx = 0;\n\n      for (let row = 0; row < input.shape[0]; ++row) {\n        const resIdx = row * outShape[1] + colOffset;\n        for (let col = 0; col < input.shape[1]; ++col) {\n          outVals[resIdx + col] = decodedData[tIdx++];\n        }\n      }\n\n      colOffset += input.shape[1];\n    });\n  }\n\n  return outVals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const equalImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a === b) ? 1 : 0);\nexport const equal =\n    binaryKernelFunc(Equal, equalImpl, null /* complexImpl */, 'bool');\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'cpu',\n  kernelFunc: equal\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl, 'float32');\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'cpu',\n  kernelFunc: exp,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'cpu',\n  kernelFunc: expm1,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'cpu',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function gatherNdImpl<R extends Rank>(\n    indicesData: TypedArray, paramsBuf: TensorBuffer<R>, dtype: DataType,\n    numSlices: number, sliceRank: number, sliceSize: number, strides: number[],\n    paramsShape: number[], paramsSize: number): TensorBuffer<R> {\n  const outBuf = buffer([numSlices, sliceSize], dtype);\n\n  for (let i = 0; i < numSlices; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      flattenIndex += dim * strides[j];\n      index.push(dim);\n    }\n    if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n      throw new Error(\n          `Invalid indices: ${index} does not index into ${paramsShape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      outBuf.values[i * sliceSize + k] =\n          paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function gatherV2Impl<R extends Rank, D extends DataType>(\n    xBuf: TensorBuffer<R, D>, indicesBuf: TensorBuffer<R, D>,\n    flattenOutputShape: number[]): TensorBuffer<R, D> {\n  const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const newLoc = outBuf.indexToLoc(i);\n\n    const originalLoc: number[] = newLoc.slice();\n    const batchIdx = originalLoc[0];\n    const indicesIdx = originalLoc[2];\n    const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n    originalLoc[2] = indicesBuf.values[indicesIndex] as number;\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    if (0 <= originalIndex && originalIndex < xBuf.values.length) {\n      outBuf.values[i] = xBuf.values[originalIndex];\n    } // Else, index is out of bounds, so leave the default zero val in outBuf.\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a > b) ? 1 : 0);\nexport const greater =\n    binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'cpu',\n  kernelFunc: greater\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a >= b) ? 1 : 0);\nexport const greaterEqual = binaryKernelFunc(\n    GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'cpu',\n  kernelFunc: greaterEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Less} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a < b) ? 1 : 0);\nexport const less =\n    binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'cpu',\n  kernelFunc: less\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a <= b) ? 1 : 0);\nexport const lessEqual =\n    binaryKernelFunc(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'cpu',\n  kernelFunc: lessEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function linSpaceImpl(\n    start: number, stop: number, num: number): TypedArray {\n  const step = (stop - start) / (num - 1);\n\n  const values = util.makeZerosTypedArray(num, 'float32');\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'cpu',\n  kernelFunc: log,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function maxImpl(\n    aVals: TypedArray, reduceSize: number, outShape: number[],\n    dtype: DataType): TypedArray {\n  const vals = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value > max) {  // comparison with NaN always return false\n        max = value;\n      }\n    }\n    vals[i] = max;\n  }\n  return vals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Maximum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const maximumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.max(aValue as number, bValue as number)));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'cpu',\n  kernelFunc: maximum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Minimum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const minimumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.min(aValue as number, bValue as number)));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'cpu',\n  kernelFunc: minimum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Multiply} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const multiplyImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue * bValue));\nexport const multiplyComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n      };\n    }));\n\nexport const multiply =\n    binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'cpu',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelConfig, KernelFunc, Neg, TensorInfo, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {multiplyImpl} from './Multiply';\n\nexport function negImpl(xVals: TypedArray, xShape: number[], xDtype: DataType):\n    [TypedArray, number[]] {\n  const minusOne =\n      util.createScalarValue(-1 as {} as 'float32', xDtype) as TypedArray;\n  return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\n\nexport function neg(args: {inputs: UnaryInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  assertNotComplex(x, 'neg');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n\n  return backend.makeTensorInfo(newShape, x.dtype, res);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'cpu',\n  kernelFunc: neg as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NotEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const notEqualImpl =\n    createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual =\n    binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'cpu',\n  kernelFunc: notEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function transposeImpl(\n    xVals: TypedArray, xShape: number[], dtype: DataType, perm: number[],\n    newShape: number[]): TypedArray {\n  const xRank = xShape.length;\n  const xSize = util.sizeFromShape(xShape);\n  const xStrides = util.computeStrides(xShape);\n  const newStrides = util.computeStrides(newShape);\n\n  const result = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(newShape));\n\n  for (let i = 0; i < xSize; ++i) {\n    const loc = util.indexToLoc(i, xRank, xStrides);\n\n    // Permute location.\n    const newLoc: number[] = new Array(loc.length);\n    for (let i = 0; i < newLoc.length; i++) {\n      newLoc[i] = loc[perm[i]];\n    }\n\n    const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n    result[newIndex] = xVals[i];\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {transposeImpl} from './Transpose_impl';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: MathBackendCPU\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n\n  assertNotComplex(x, 'transpose');\n\n  const xRank = x.shape.length;\n\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const result = transposeImpl(values, x.shape, x.dtype, perm, newShape);\n\n  const dataId = backend.write(result, newShape, x.dtype);\n  return {dataId, shape: newShape, dtype: x.dtype};\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'cpu',\n  kernelFunc: transpose as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function prodImpl(\n    xShape: number[], xDtype: DataType, xVals: TypedArray,\n    reductionAxes: number[]):\n    {outVals: TypedArray, outShape: number[], outDtype: DataType} {\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n  const outDtype = upcastType(xDtype, 'int32');\n  const outVals = util.makeZerosTypedArray(\n                      util.sizeFromShape(outShape), outDtype) as TypedArray;\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  for (let i = 0; i < outVals.length; ++i) {\n    const offset = i * reduceSize;\n    let prod = 1;\n    for (let j = 0; j < reduceSize; ++j) {\n      prod *= xVals[offset + j];\n    }\n    outVals[i] = prod;\n  }\n\n  return {outVals, outShape, outDtype};\n}\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendCPU, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'prod');\n\n  const xRank = x.shape.length;\n  const axes = util.parseAxisParam(axis, x.shape);\n\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n  let reductionAxes = axes;\n  let permutedX = x;\n  const intermediateTensorInfos = [];\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    intermediateTensorInfos.push(permutedX);\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  const xVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  const {outVals, outShape, outDtype} =\n      prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n\n  let resultShape = outShape;\n  if (keepDims) {\n    resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'cpu',\n  kernelFunc: prod as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction validateIndices(\n    indices: TypedArray, indicesShape: number[], numParams: number) {\n  indices.forEach((index: number, i: number) => {\n    if (index < 0 || index >= numParams) {\n      const locString =\n          util.indexToLoc(\n                  i, indicesShape.length, util.computeStrides(indicesShape))\n              .join(',');\n      throw new Error(\n          `indices[${locString}] = ${index} is not in [0, ${numParams})`);\n    }\n  });\n}\n\nfunction validateSplits(\n    paramsNestedSplits: TypedArray[], numParamsDenseValues: number) {\n  // Validate\n  for (let dim = 0; dim < paramsNestedSplits.length; ++dim) {\n    const splits = paramsNestedSplits[dim];\n    const lastSplit = (dim === paramsNestedSplits.length - 1) ?\n        numParamsDenseValues :\n        paramsNestedSplits[dim + 1].length;\n    if (splits.length === 0) {\n      throw new Error('Ragged splits may not be empty');\n    }\n    if (splits[0] < 0) {\n      throw new Error('Ragged splits must be non-negative');\n    }\n    if (splits[splits.length - 1] > lastSplit) {\n      throw new Error('Ragged splits must not point past values');\n    }\n    for (let i = 1; i < splits.length; ++i) {\n      if (splits[i - 1] > splits[i]) {\n        throw new Error('Ragged splits must be sorted in ascending order');\n      }\n    }\n  }\n}\n\n// Construct the `splits` output tensors, encoded using a nested vector.\n// Also find the slices of values that need to be copied, and store them\n// in `valueSlices`.  The total number of values that will be copied (which\n// we need for allocating the output values tensor) is stored in `numValues`.\nfunction makeSplits(\n    indices: TypedArray, indicesShape: number[],\n    paramsNestedSplits: TypedArray[], numParamsDenseValues: number) {\n  const valueSlices: Array<[number, number]> = [];\n  let numValues = 0;\n\n  const numSplits = indicesShape.length - 1 + paramsNestedSplits.length;\n  const outSplits = new Array(numSplits).fill(null).map(() => [0]);\n\n  validateSplits(paramsNestedSplits, numParamsDenseValues);\n\n  // Add `splits` that come from all but the last dimension of the dense\n  // Tensor `indices`.  In particular, for each dimension D, we add a\n  // splits tensor whose values are:\n  //   range(reduceProd(splits.shape[:D]) + 1) * splits.shape[D+1]\n  // E.g., if indices.shape=[2, 3, 4] then we will add splits tensors:\n  //   [0, 3, 6]                    # length=2+1, stride=3\n  //   [0, 4, 8, 12, 16, 20, 24]    # length=2*3+1, stride=4\n  let nrows = 1;\n  for (let dim = 0; dim < indicesShape.length - 1; ++dim) {\n    nrows *= indicesShape[dim];\n    const rowLength = indicesShape[dim + 1];\n    for (let i = 1; i < nrows + 1; ++i) {\n      outSplits[dim].push(i * rowLength);\n    }\n  }\n\n  // Add `splits` that come from `paramsNestedSplits`.  Starting with the\n  // outermost ragged dimension (i.e., the first `splits` tensor), we work\n  // our way in, finding the range of values that should be copied.  As we\n  // go, we update the output `splits` for each dimension with the appropriate\n  // values.  In particular, the *lengths* of the slices from `param_splits`\n  // should be copied to generate corresponding slice lengths in the output\n  // splits.  E.g., if we are copying a ragged row with length 4, then we\n  // should add a new split point to outSplits that is 4 greater than the\n  // previous split point in outSplits.\n  for (let i = 0; i < indices.length; ++i) {\n    let start = indices[i];\n    let limit = indices[i] + 1;\n\n    // Copy splits.\n    for (let dim = 0; dim < paramsNestedSplits.length; ++dim) {\n      const splits = paramsNestedSplits[dim];\n      const outDim = dim + indicesShape.length - 1;\n      if (outDim >= 0) {\n        const outSplitsOutDim = outSplits[outDim];\n        const delta =\n            outSplitsOutDim[outSplitsOutDim.length - 1] - splits[start];\n        for (let j = start; j < limit; ++j) {\n          outSplits[outDim].push(splits[j + 1] + delta);\n        }\n      }\n      start = splits[start];\n      limit = splits[limit];\n    }\n    if (limit !== start) {\n      valueSlices.push([start, limit]);\n      numValues += limit - start;\n    }\n  }\n\n  return {outSplits, valueSlices, numValues};\n}\n\nfunction getSplits(outSplits: number[][]) {\n  const splitsOut: TypedArray[] = [];\n  for (let i = 0; i < outSplits.length; ++i) {\n    const numSplits = outSplits[i].length;\n    const splits = util.getArrayFromDType('int32', numSplits) as TypedArray;\n    splitsOut.push(splits);\n\n    outSplits[i].forEach((value, j: number) => splits[j] = value);\n  }\n\n  return splitsOut;\n}\n\nfunction computeFlatOuterDims(orig: number[], numOutDims: number) {\n  const outDims = orig.slice(0, numOutDims);\n  while (outDims.length < numOutDims) {\n    outDims.push(1);\n  }\n\n  for (let inDim = numOutDims; inDim < orig.length; inDim++) {\n    outDims[numOutDims - 1] *= orig[inDim];\n  }\n\n  return outDims;\n}\n// For each slice in `(start, limit)` in `valueSlices`, append\n// `paramsDenseValues[start,...,limit] to `values`.  `valueSize` indicates\n// the number of scalars contained in each value paramsDenseValues[i].\nfunction writeValueSlices(\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    valueSlices: Array<[number, number]>, valueSize: number, values: TypedArray,\n    valuesShape: number[]) {\n  const denseM = computeFlatOuterDims(paramsDenseValuesShape, 2)[1];\n  const valuesM = computeFlatOuterDims(valuesShape, 2)[1];\n\n  let outPos = 0;\n  for (const slice of valueSlices) {\n    for (let i = slice[0]; i < slice[1]; ++i) {\n      for (let j = 0; j < valueSize; ++j) {\n        values[outPos * valuesM + j] = paramsDenseValues[i * denseM + j];\n      }\n      ++outPos;\n    }\n  }\n}\n\nfunction getValues(\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    paramsDenseValuesDType: DataType, valueSlices: Array<[number, number]>,\n    numValues: number): [TypedArray, number[]] {\n  const valuesShape = paramsDenseValuesShape.slice();\n  valuesShape[0] = numValues;\n\n  const valuesOut = util.getArrayFromDType(\n                        paramsDenseValuesDType,\n                        util.sizeFromShape(valuesShape)) as TypedArray;\n\n  const numElements = paramsDenseValues.length;\n  const valueSize =\n      numElements === 0 ? 0 : (numElements / paramsDenseValuesShape[0]);\n  writeValueSlices(\n      paramsDenseValues, paramsDenseValuesShape, valueSlices, valueSize,\n      valuesOut, valuesShape);\n\n  return [valuesOut, valuesShape];\n}\nexport function raggedGatherImpl(\n    paramsNestedSplits: TypedArray[], paramsNestedSplitsShapes: number[][],\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    paramsDenseValuesDType: DataType, indices: TypedArray,\n    indicesShape: number[],\n    outputRaggedRank: number): [TypedArray[], TypedArray, number[]] {\n  if (paramsNestedSplits.length === 0) {\n    throw new Error('paramsNestedSplits must be non empty');\n  }\n\n  if (paramsNestedSplitsShapes[0].length === 0) {\n    throw new Error('Split tensors must not be scalars');\n  }\n  const numParams = paramsNestedSplitsShapes[0][0] - 1;\n  validateIndices(indices, indicesShape, numParams);\n\n  if (paramsDenseValuesShape.length === 0) {\n    throw new Error('params.rank must be nonzero');\n  }\n  const numParamsDenseValues = paramsDenseValuesShape[0];\n\n  // Calculate the `splits`, and store the value slices that we need to\n  // copy in `valueSlices`.\n  const {outSplits, valueSlices, numValues} = makeSplits(\n      indices, indicesShape, paramsNestedSplits, numParamsDenseValues);\n\n  // Write the output tensors.\n  const outputNestedSplits = getSplits(outSplits);\n  const outputDenseValues = getValues(\n      paramsDenseValues, paramsDenseValuesShape, paramsDenseValuesDType,\n      valueSlices, numValues);\n\n  return [outputNestedSplits, outputDenseValues[0], outputDenseValues[1]];\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, broadcastTo, DataType, reshape, tidy, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport RowPartitionType = backend_util.RowPartitionType;\n// Based on\n// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc\nclass RaggedTensorToTensorOp {\n  private readonly rowPartitionTypes: RowPartitionType[];\n  private readonly raggedRank: number;\n  constructor(\n      private shape: TypedArray, private shapeShape: number[],\n      private values: TypedArray, private valuesShape: number[],\n      private valuesDType: DataType, private defaultValue: TypedArray,\n      private defaultValueShape: number[],\n      private readonly rowPartitionValues: TypedArray[],\n      private readonly rowPartitionValuesShapes: number[][],\n      rowPartitionTypeStrings: string[]) {\n    this.rowPartitionTypes =\n        backend_util.getRowPartitionTypesHelper(rowPartitionTypeStrings);\n    this.raggedRank = backend_util.getRaggedRank(this.rowPartitionTypes);\n  }\n\n  private getRowPartitionTypeByDimension(dimension: number) {\n    if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n      return this.rowPartitionTypes[dimension + 1];\n    } else {\n      return this.rowPartitionTypes[dimension];\n    }\n  }\n\n  // Returns the relationship between dimension and dimension + 1.\n  private getRowPartitionTensor(dimension: number) {\n    if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n      return this.rowPartitionValues[dimension + 1];\n    } else {\n      return this.rowPartitionValues[dimension];\n    }\n  }\n\n  private getMaxWidth(dimension: number) {\n    const rowPartitionTensor = this.getRowPartitionTensor(dimension - 1);\n    switch (this.getRowPartitionTypeByDimension(dimension - 1)) {\n      case RowPartitionType.VALUE_ROWIDS:\n        return RaggedTensorToTensorOp.getMaxWidthValueRowID(rowPartitionTensor);\n      case RowPartitionType.ROW_SPLITS:\n        return RaggedTensorToTensorOp.getMaxWidthRowSplit(rowPartitionTensor);\n      default:\n        throw new Error(`Cannot handle partition type ${\n            RowPartitionType[this.getRowPartitionTypeByDimension(\n                dimension - 1)]}`);\n    }\n  }\n\n  static getMaxWidthRowSplit(rowSplit: TypedArray) {\n    const tensorLength = rowSplit.length;\n    if (tensorLength === 0 || tensorLength === 1) {\n      return 0;\n    }\n    let maxWidth = 0;\n    for (let i = 0; i < tensorLength - 1; ++i) {\n      const currentWidth = rowSplit[i + 1] - rowSplit[i];\n      if (currentWidth > maxWidth) {\n        maxWidth = currentWidth;\n      }\n    }\n    return maxWidth;\n  }\n\n  static getMaxWidthValueRowID(valueRowIds: TypedArray) {\n    const indexLength = valueRowIds.length;\n    if (indexLength === 0) {\n      return 0;\n    }\n    let firstEqualIndex = 0;\n    let firstEqualIndexValue = valueRowIds[0];\n    let maxWidth = 0;\n    for (let i = 1; i < indexLength; ++i) {\n      const value = valueRowIds[i];\n      if (value !== firstEqualIndexValue) {\n        firstEqualIndexValue = value;\n        maxWidth = Math.max(i - firstEqualIndex, maxWidth);\n        firstEqualIndex = i;\n      }\n    }\n    return Math.max(indexLength - firstEqualIndex, maxWidth);\n  }\n\n  private tensorShapeFromTensor(\n      t: TypedArray, tShape: number[], isPartial = true) {\n    if (tShape.length === 0) {\n      if (t[0] === -1) {\n        return [];\n      }\n      throw new Error(\n          `The only valid scalar shape tensor is the fully unknown shape specified as -1.`);\n    }\n    // MakePartialShape/MakeShapeHelper.\n    return makeShape(t, isPartial);\n  }\n\n  private calculateOutputSize(firstDim: number) {\n    const valueShape = this.valuesShape;\n    const defaultValueShape = this.defaultValueShape;\n\n    backend_util.validateDefaultValueShape(defaultValueShape, valueShape);\n\n    const shape = this.tensorShapeFromTensor(this.shape, this.shapeShape);\n    const outputShape = backend_util.combineRaggedTensorToTensorShapes(\n        this.raggedRank, shape, valueShape);\n\n    const result = outputShape;\n\n    if (result[0] < 0) {\n      result[0] = firstDim;\n    }\n    for (let i = 1; i <= this.raggedRank; ++i) {\n      if (result[i] < 0) {\n        result[i] = this.getMaxWidth(i);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * The outputIndex represents the index in the output tensor\n   * where the first element of a particular dimension would be written.\n   * If it is -1, it indicates that the index is out of scope.\n   * Example, given firstDimension = 10, firstDimensionOutput = 6,\n   * and outputIndexMultiplier = 100:\n   * result = [0 100 200 300 400 500 -1 -1 -1 -1]\n   * If firstDimensionOutput = 11 instead, then:\n   * result = [0 100 200 300 400 500 600 700 800 900]\n   */\n  private calculateFirstParentOutputIndex(\n      firstDimension: number, outputIndexMultiplier: number,\n      firstDimensionOutput: number) {\n    const minDimension = Math.min(firstDimension, firstDimensionOutput);\n    const result: number[] = [];\n    let currentOutputIndex = 0;\n    for (let i = 0; i < minDimension;\n         ++i, currentOutputIndex += outputIndexMultiplier) {\n      result.push(currentOutputIndex);\n    }\n    for (let i = minDimension; i < firstDimension; ++i) {\n      result.push(-1);\n    }\n    util.assert(\n        result.length === firstDimension,\n        () => 'Final length of result must be equal to firstDimension.');\n\n    return result;\n  }\n\n  private calculateOutputIndexRowSplit(\n      rowSplit: TypedArray, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const rowSplitSize = rowSplit.length;\n    const result: number[] = [];\n    for (let i = 0; i < rowSplitSize - 1; ++i) {\n      const rowLength = rowSplit[i + 1] - rowSplit[i];\n      let realLength = Math.min(outputSize, rowLength);\n      let parentOutputIndexCurrent = parentOutputIndex[i];\n\n      if (parentOutputIndexCurrent === -1) {\n        realLength = 0;\n      }\n      for (let j = 0; j < realLength; ++j) {\n        result.push(parentOutputIndexCurrent);\n        parentOutputIndexCurrent += outputIndexMultiplier;\n      }\n      for (let j = 0; j < rowLength - realLength; ++j) {\n        result.push(-1);\n      }\n    }\n    if (rowSplitSize > 0 && result.length !== rowSplit[rowSplitSize - 1]) {\n      throw new Error('Invalid row split size.');\n    }\n\n    return result;\n  }\n\n  // Calculate the output index of the first element of a list.\n  // The parentOutputIndex is the same computation for the previous list.\n  // -1 indicates an element or list that is out of range.\n  // The outputIndexMultiplier is the number of output indices one moves\n  // forward for each column.\n  // E.g., given:\n  // valueRowIds:[0 1 2 2 2 3 5 5 6]\n  // parentOutputIndex:[1000 1100 2000 2100 -1 3000 4000]\n  // outputIndexMultiplier: 10\n  // outputSize: 2\n  // You get:\n  // result = [1000 1100 2000 2010 -1 2100 -1 -1 3000]\n  // result[0] = parentOutputIndex[valueRowIds[0]]\n  // result[1] = parentOutputIndex[valueRowIds[1]]\n  // result[2] = parentOutputIndex[valueRowIds[2]]\n  // result[3] = parentOutputIndex[valueRowIds[2] + 10]\n  // result[4] = -1 because it is the third element the size is 2.\n  // result[5] = parentOutputIndex[valueRowIds[3]]\n  // result[6] = -1 because parentOutputIndex[valueRowIds[6]] == -1\n  // result[7] = -1 because parentOutputIndex[valueRowIds[6]] == -1\n  // result[8] = parentOutputIndex[valueRowIds[7]]\n  private calculateOutputIndexValueRowID(\n      valueRowIds: TypedArray, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const indexSize = valueRowIds.length;\n    const result: number[] = [];\n    if (indexSize === 0) {\n      return [];\n    }\n\n    let currentOutputColumn = 0;\n    let currentValueRowId = valueRowIds[0];\n\n    if (currentValueRowId >= parentOutputIndex.length) {\n      throw new Error(\n          `Got currentValueRowId=${currentValueRowId}, which is not less than ${\n              parentOutputIndex.length}`);\n    }\n\n    let currentOutputIndex = parentOutputIndex[currentValueRowId];\n    result.push(currentOutputIndex);\n    for (let i = 1; i < indexSize; ++i) {\n      const nextValueRowId = valueRowIds[i];\n      if (nextValueRowId === currentValueRowId) {\n        if (currentOutputIndex >= 0) {\n          ++currentOutputColumn;\n          if (currentOutputColumn < outputSize) {\n            currentOutputIndex += outputIndexMultiplier;\n          } else {\n            currentOutputIndex = -1;\n          }\n        }\n      } else {\n        currentOutputColumn = 0;\n        currentValueRowId = nextValueRowId;\n\n        if (nextValueRowId >= parentOutputIndex.length) {\n          throw new Error(\n              `Got nextValueRowId=${nextValueRowId} which is not less than ${\n                  parentOutputIndex.length}`);\n        }\n\n        currentOutputIndex = parentOutputIndex[nextValueRowId];\n      }\n      result.push(currentOutputIndex);\n    }\n\n    if (result.length !== valueRowIds.length) {\n      throw new Error('Invalid row ids.');\n    }\n\n    return result;\n  }\n\n  private calculateOutputIndex(\n      dimension: number, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const rowPartitionTensor = this.getRowPartitionTensor(dimension);\n    const partitionType = this.getRowPartitionTypeByDimension(dimension);\n    switch (partitionType) {\n      case RowPartitionType.VALUE_ROWIDS:\n        return this.calculateOutputIndexValueRowID(\n            rowPartitionTensor, parentOutputIndex, outputIndexMultiplier,\n            outputSize);\n      case RowPartitionType.ROW_SPLITS:\n        if (rowPartitionTensor.length - 1 > parentOutputIndex.length) {\n          throw new Error(`Row partition size is greater than output size: ${\n              rowPartitionTensor.length - 1} > ${parentOutputIndex.length}`);\n        }\n        return this.calculateOutputIndexRowSplit(\n            rowPartitionTensor, parentOutputIndex, outputIndexMultiplier,\n            outputSize);\n      default:\n        throw new Error(\n            `Unsupported partition type: ${RowPartitionType[partitionType]}`);\n    }\n  }\n\n  private getFirstDimensionSize() {\n    const firstPartitionTensor = this.rowPartitionValues[0];\n    if (this.rowPartitionTypes.length === 0) {\n      throw new Error('No row_partition_types given.');\n    }\n    const firstPartitionType = this.rowPartitionTypes[0];\n    switch (firstPartitionType) {\n      case RowPartitionType.FIRST_DIM_SIZE:\n        return firstPartitionTensor[0];\n      case RowPartitionType.VALUE_ROWIDS:\n        throw new Error('Cannot handle VALUE_ROWIDS in first dimension.');\n      case RowPartitionType.ROW_SPLITS:\n        return this.rowPartitionValuesShapes[0][0] - 1;\n      default:\n        throw new Error(\n            `Cannot handle type ${RowPartitionType[firstPartitionType]}`);\n    }\n  }\n\n  compute(): [number[], TypedArray] {\n    const firstPartitionTensor = this.rowPartitionValues[0];\n    if (firstPartitionTensor.length <= 0) {\n      throw new Error(\n          'Invalid first partition input. ' +\n          'Tensor requires at least one element.');\n    }\n    const firstDimension = this.getFirstDimensionSize();\n    const outputSize = this.calculateOutputSize(firstDimension);\n    const multiplier: number[] = new Array(this.raggedRank + 1);\n\n    multiplier[multiplier.length - 1] = 1;\n    for (let i = multiplier.length - 2; i >= 0; --i) {\n      multiplier[i] = multiplier[i + 1] * outputSize[i + 1];\n    }\n    // Full size of the tensor.\n    const outputShape: number[] = makeShape(outputSize, false);\n    const outputTensor =\n        util.getArrayFromDType(\n            this.valuesDType, util.sizeFromShape(outputShape)) as TypedArray;\n\n    const fullSize = multiplier[0] * outputSize[0];\n    if (fullSize > 0) {\n      let outputIndex = this.calculateFirstParentOutputIndex(\n          firstDimension, multiplier[0], outputSize[0]);\n      for (let i = 1; i <= this.raggedRank; ++i) {\n        const newOutputIndex = this.calculateOutputIndex(\n            i - 1, outputIndex, multiplier[i], outputSize[i]);\n        outputIndex = newOutputIndex;\n      }\n\n      this.setOutput(this.raggedRank, outputIndex, outputTensor, outputShape);\n    }\n\n    return [outputShape, outputTensor];\n  }\n  setOutput(\n      raggedRank: number, outputIndex: number[], outputTensor: TypedArray,\n      outputShape: number[]) {\n    if (outputTensor.length === 0) {\n      return;\n    }\n\n    const valuesBase = this.values;\n    const outputBase = outputTensor;\n\n    let elementShape = outputShape.slice();\n    elementShape = elementShape.slice(raggedRank + 1);\n    const valueElementSize = util.sizeFromShape(elementShape);\n    const outputIndexSize = outputIndex.length;\n\n    // Broadcast the default value to value_element_size.  (We can skip this\n    // if defaultValueTensor.size == 1, since we use fill when that's true.)\n    let defaultValue = this.defaultValue;\n    if (defaultValue.length !== valueElementSize && defaultValue.length !== 1) {\n      const srcShape = this.defaultValueShape;\n      tidy(() => {\n        const defaultValueTensor = reshape(defaultValue, srcShape);\n        const bCastDefault = broadcastTo(defaultValueTensor, elementShape);\n        defaultValue = bCastDefault.dataSync();\n      });\n    }\n\n    // Loop through the outputIndex array, finding contiguous regions that\n    // should be copied.  Once we find the end of a contiguous region, copy it\n    // and add any necessary padding (with defaultValue).\n    let srcStart = 0;  // Start of contiguous region (in values)\n    let dstStart = 0;  // Destination for contiguous region (in output)\n    let dstEnd = 0;    // Destination for contiguous region (in output)\n    for (let srcI = 0; srcI <= outputIndexSize; ++srcI) {\n      // dstI is the destination where the value at srcI should be copied.\n      let dstI = srcI < outputIndexSize ? outputIndex[srcI] : -1;\n\n      // If we're still in a contiguous region, then update dstEnd go to the\n      // next srcI.\n      if (dstI === dstEnd) {\n        ++dstEnd;\n        continue;\n      }\n\n      // We found the end of contiguous region.  This can be because we found\n      // a gap (dstI > dstEnd), or a source value that shouldn't be copied\n      // because it's out-of-bounds (dstI == -1), or the end of the tensor\n      // (dstI === -1).\n      if (dstStart < dstEnd) {\n        // Copy the contiguous region.\n        const src = valuesBase.subarray(srcStart * valueElementSize);\n        const dst = outputBase.subarray(dstStart * valueElementSize);\n        const nVals = (dstEnd - dstStart) * valueElementSize;\n        copyArray(dst, src, nVals);\n      }\n\n      // Add any necessary padding (w/ defaultValue).\n      if (srcI >= outputIndexSize) {\n        // We reached the end of values: pad to the end of output.\n        const outputSize = outputTensor.length;\n        dstI = Math.floor(outputSize / valueElementSize);\n      }\n      if (dstI > dstEnd) {\n        if (this.defaultValue.length === 1) {\n          outputBase\n              .subarray(dstEnd * valueElementSize, dstI * valueElementSize)\n              .fill(this.defaultValue[0]);\n          dstEnd = dstI;\n        } else {\n          while (dstI > dstEnd) {\n            const dst = outputBase.slice(dstEnd * valueElementSize);\n            copyArray(dst, defaultValue, valueElementSize);\n            ++dstEnd;\n          }\n        }\n      }\n\n      // Update indices.\n      if (dstI < 0) {\n        // srcI should be skipped -- leave it out of the contiguous region.\n        srcStart = srcI + 1;\n        dstStart = dstEnd;\n      } else {\n        // srcI should be copied -- include it in the contiguous region.\n        srcStart = srcI;\n        dstStart = dstEnd;\n        dstEnd = dstStart + 1;\n      }\n    }\n  }\n}\n\nfunction copyArray(dst: TypedArray, src: TypedArray, size: number) {\n  for (let i = 0; i < size; i++) {\n    dst[i] = src[i];\n  }\n}\n\nfunction makeShape(shape: number[]|TypedArray, isPartial: boolean) {\n  const out: number[] = [];\n  for (let dim of shape) {\n    if (dim < 0) {\n      if (!isPartial) {\n        throw new Error(`Dimension ${dim} must be >= 0`);\n      }\n      if (dim < -1) {\n        throw new Error(`Dimension ${dim} must be >= -1`);\n      }\n      dim = -1;\n    }\n    out.push(dim);\n  }\n\n  return out;\n}\n\nexport function raggedTensorToTensorImpl(\n    shape: TypedArray, shapesShape: number[], values: TypedArray,\n    valuesShape: number[], valuesDType: DataType, defaultValue: TypedArray,\n    defaultValueShape: number[], rowPartitionValues: TypedArray[],\n    rowPartitionValuesShapes: number[][],\n    rowPartitionTypes: string[]): [number[], TypedArray] {\n  return new RaggedTensorToTensorOp(\n             shape, shapesShape, values, valuesShape, valuesDType, defaultValue,\n             defaultValueShape, rowPartitionValues, rowPartitionValuesShapes,\n             rowPartitionTypes)\n      .compute();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataTypeMap, util} from '@tensorflow/tfjs-core';\n\nexport function rangeImpl(\n    start: number, stop: number, step: number,\n    dtype: 'float32'|'int32'): DataTypeMap['float32' | 'int32'] {\n  const sameStartStop = start === stop;\n  const increasingRangeNegativeStep = start < stop && step < 0;\n  const decreasingRangePositiveStep = stop < start && step > 1;\n\n  if (sameStartStop || increasingRangeNegativeStep ||\n      decreasingRangePositiveStep) {\n    return util.makeZerosTypedArray(0, dtype);\n  }\n\n  const numElements = Math.abs(Math.ceil((stop - start) / step));\n  const values = util.makeZerosTypedArray(numElements, dtype);\n\n  if (stop < start && step === 1) {\n    // Auto adjust the step's sign if it hasn't been set\n    // (or was set to 1)\n    step = -1;\n  }\n\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Rsqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'cpu',\n  kernelFunc: rsqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {buffer, Rank, ShapeMap, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\ninterface DefaultValueTypeMap {\n  bool: boolean;\n  int32: number;\n  float32: number;\n  string: string;\n}\n\nexport function\nscatterImpl<R extends Rank, D extends 'float32'|'int32'|'bool'|'string'>(\n    indices: TensorBuffer<R, 'int32'>, updates: TensorBuffer<R, D>,\n    shape: number[], outputSize: number, sliceSize: number, numUpdates: number,\n    sliceRank: number, strides: number[], defaultValue: DefaultValueTypeMap[D],\n    sumDupeIndices: boolean): TensorBuffer<R, D> {\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  const indicesData = indices.values as TypedArray;\n  const updatesData = updates.values;\n\n  if (outputSize === 0) {\n    return buffer(shape as ShapeMap[R], updates.dtype);\n  }\n\n  const outBuf = buffer(flattenShape, updates.dtype);\n  if (typeof defaultValue === 'string') {\n    (outBuf.values as string[]).fill(defaultValue);\n  } else if (typeof defaultValue === 'number') {\n    (outBuf.values as TypedArray).fill(defaultValue);\n  } else if (typeof defaultValue === 'boolean') {\n    (outBuf.values as TypedArray).fill(+defaultValue);\n  }\n\n  for (let i = 0; i < numUpdates; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      index.push(dim);\n      flattenIndex += dim * strides[j];\n    }\n\n    if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      if (sumDupeIndices) {\n        (outBuf.values as TypedArray)[flattenIndex * sliceSize + k] +=\n            (updatesData as TypedArray)[i * sliceSize + k];\n      } else {\n        outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n            updatesData[0] :\n            updatesData[i * sliceSize + k];\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sigmoidImpl =\n    createSimpleUnaryImpl((xi) => 1 / (1 + Math.exp(-xi)));\nexport const sigmoid =\n    unaryKernelFunc(Sigmoid, (xi) => 1 / (1 + Math.exp(-xi)));\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'cpu',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, buffer, DataType, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function sliceImpl(\n    vals: BackendValues, begin: number[], size: number[], shape: number[],\n    dtype: DataType): BackendValues {\n  const isContinous = slice_util.isSliceContinous(shape, begin, size);\n  const length = util.sizeFromShape(size);\n  const xStrides = util.computeStrides(shape);\n\n  if (isContinous) {\n    const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n\n    if (dtype === 'string') {\n      return (vals as Uint8Array[]).slice(flatOffset, flatOffset + length);\n    }\n\n    return (vals as TypedArray).subarray(flatOffset, flatOffset + length);\n  }\n\n  const decodedData = dtype === 'string' ?\n      backend_util.fromUint8ToStringArray(vals as Uint8Array[]) :\n      vals as TypedArray;\n\n  const inBuf = buffer(shape, dtype, decodedData);\n  const outBuf = buffer(size, dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.map((idx: number, j) => idx + begin[j]);\n    outBuf.set(inBuf.get(...inLoc), ...outLoc);\n  }\n\n  if (dtype === 'string') {\n    return backend_util.fromStringArrayToUint8(outBuf.values as string[]);\n  }\n  return outBuf.values as TypedArray;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendCPU, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  assertNotComplex(x, 'slice');\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  const vals = backend.data.get(x.dataId).values;\n  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseFillEmptyRowsImpl(\n    indices: TypedArray, indicesShape: number[], indicesDType: DataType,\n    values: TypedArray, valuesDType: DataType, denseShape: TypedArray,\n    defaultValue: number):\n    [TypedArray, number[], TypedArray, boolean[], number[]] {\n  const indicesCount = indicesShape[0];\n  const denseRows = denseShape[0];\n\n  const emptyRowIndicator: boolean[] = new Array(denseRows);\n  const reverseIndexMap: number[] = new Array(indicesCount);\n\n  const rank = indicesShape[1];\n\n  if (denseRows === 0) {\n    if (indicesCount !== 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(\n              indicesCount));\n    }\n    const outputIndices = util.getArrayFromDType(indicesDType, 0) as TypedArray;\n    const outputValues = util.getArrayFromDType(valuesDType, 0) as TypedArray;\n    return [\n      outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap\n    ];\n  }\n\n  let rowsAreOrdered = true;\n  let lastIndicesRow = 0;\n  const csrOffset: number[] = new Array(denseRows).fill(0);\n\n  for (let i = 0; i < indicesCount; ++i) {\n    // indices is a 2d tensor with shape of [N, rank]\n    const row = indices[i * rank];\n    if (row < 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(i, row));\n    }\n    if (row >= denseRows) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(\n              i, row, denseRows));\n    }\n    ++csrOffset[row];\n    rowsAreOrdered = rowsAreOrdered && (row >= lastIndicesRow);\n    lastIndicesRow = row;\n  }\n\n  let allRowsFull = true;\n  for (let row = 0; row < denseRows; ++row) {\n    // csrOffset here describes the number of elements in this dense row\n    const rowEmpty = (csrOffset[row] === 0);\n    emptyRowIndicator[row] = rowEmpty;\n    allRowsFull = allRowsFull && !rowEmpty;\n    // In filled version, each row has at least one element.\n    csrOffset[row] = Math.max(csrOffset[row], 1);\n    // Update csrOffset to represent the number of elements up to and\n    // including denseRows + 1:\n    //  csrOffset[0] == #{elements of row 0}\n    //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n    //  ..\n    //  csrOffset[i] == starting index for elements in row i + 1.\n    if (row > 0) {\n      csrOffset[row] += csrOffset[row - 1];\n    }\n  }\n\n  if (allRowsFull && rowsAreOrdered) {\n    const outputIndices: TypedArray = indices;\n    const outputValues: TypedArray = values;\n    for (let i = 0; i < indicesCount; ++i) {\n      reverseIndexMap[i] = i;\n    }\n    return [\n      outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  } else {\n    const fullIndicesCount = csrOffset[denseRows - 1];\n    const outputIndices =\n        util.getArrayFromDType(indicesDType, fullIndicesCount * rank) as\n        TypedArray;\n    const outputValues =\n        util.getArrayFromDType(valuesDType, fullIndicesCount) as TypedArray;\n    const filledCount: number[] = new Array(denseRows).fill(0);\n\n    // Fill in values for rows that are not missing\n    for (let i = 0; i < indicesCount; ++i) {\n      // indices is a 2d tensor with shape of [N, rank]\n      const row = indices[i * rank];\n      const offset = filledCount[row];\n      const outputI = ((row === 0) ? 0 : csrOffset[row - 1]) + offset;\n      filledCount[row]++;  // Increment the filled count for this row.\n      for (let j = 0; j < rank; ++j) {\n        // indices and outputIndices are 2d tensors with shape of [N, rank]\n        outputIndices[outputI * rank + j] = indices[i * rank + j];\n      }\n      outputValues[outputI] = values[i];\n      // We'll need this reverse index map to backprop correctly.\n      reverseIndexMap[i] = outputI;\n    }\n\n    // Fill in values for rows that are missing\n    for (let row = 0; row < denseRows; ++row) {\n      const rowCount = filledCount[row];\n      if (rowCount === 0) {  // We haven't filled this row\n        const startingIndex = (row === 0) ? 0 : csrOffset[row - 1];\n        // Remaining index values were set to zero already.\n        // Just need to set the row index in the right location.\n        // outputIndices is a 2d tensor with shape of [N, rank]\n        outputIndices[startingIndex * rank + 0] = row;\n        for (let col = 1; col < rank; ++col) {\n          outputIndices[startingIndex * rank + col] = 0;\n        }\n        outputValues[startingIndex] = defaultValue;\n      }\n    }\n    return [\n      outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseReshapeImpl(\n    inputIndices: TypedArray, inputIndicesShape: number[], inputDType: DataType,\n    inputShape: number[],\n    targetShape: number[]): [TypedArray, number[], number[]] {\n  const denseSize = util.sizeFromShape(inputShape);\n  const nnz = inputIndicesShape[0];\n  const outputRank = targetShape.length;\n\n  // Compute the output shape. Determine product of specified dimensions, and\n  // find the index of the unspecified one.\n  const outputShape: number[] = [];\n  let product = 1;\n  let unknownIndex = -1;\n  for (let d = 0; d < outputRank; ++d) {\n    const size = targetShape[d];\n    if (size === -1) {\n      if (unknownIndex !== -1) {\n        throw new Error(\n            backend_util\n                .getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(\n                    unknownIndex, d));\n      }\n      unknownIndex = d;\n      outputShape.push(1);\n    } else {\n      if (size < 0) {\n        throw new Error(\n            backend_util.getSparseReshapeNegativeOutputDimErrorMessage(\n                d, size));\n      }\n      product *= size;\n      outputShape.push(size);\n    }\n  }\n  if (unknownIndex !== -1) {\n    if (product <= 0) {\n      throw new Error(\n          backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());\n    }\n    const missing = Math.trunc(denseSize / product);\n    if (product * missing !== denseSize) {\n      throw new Error(\n          backend_util.getSparseReshapeInputOutputMultipleErrorMessage(\n              inputShape, outputShape));\n    }\n\n    outputShape[unknownIndex] = missing;\n  }\n  const outputSize = util.sizeFromShape(outputShape);\n  if (outputSize !== denseSize) {\n    throw new Error(\n        backend_util.getSparseReshapeInputOutputMismatchErrorMessage(\n            inputShape, outputShape));\n  }\n\n  const inputRank = inputShape.length;\n  const inputStrides: number[] = [];\n  if (inputRank > 0) {\n    inputStrides[inputRank - 1] = 1;\n    for (let d = inputRank - 2; d >= 0; --d) {\n      inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n    }\n  }\n\n  const outputStrides: number[] = [];\n  if (outputRank > 0) {\n    outputStrides[outputRank - 1] = 1;\n    for (let d = outputRank - 2; d >= 0; --d) {\n      outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n    }\n  }\n\n  const newIndices =\n      util.getArrayFromDType(inputDType, nnz * outputRank) as TypedArray;\n  for (let i = 0; i < nnz; ++i) {\n    let id = 0;\n    for (let j = 0; j < inputRank; ++j) {\n      // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n      id += inputIndices[i * inputRank + j] * inputStrides[j];\n    }\n    for (let j = 0; j < outputRank; ++j) {\n      // newIndices is a 2d tensor with shape of [nnz, outputRank]\n      newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n      id %= outputStrides[j];\n    }\n  }\n  return [newIndices, [nnz, outputRank], outputShape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseSegmentReductionImpl(\n    input: TypedArray, inputShape: number[], inputDType: DataType,\n    indices: TypedArray, segmentIds: TypedArray, isMean = false,\n    defaultValue = 0): [TypedArray, number[]] {\n  const numIndices = indices.length;\n\n  // Flatten the array to two dimensions\n  const inputFlat: number[] = [inputShape[0], input.length / inputShape[0]];\n  const numCol = inputFlat[1];\n  // Note that the current implementation assumes that segmentIds values are\n  // sorted.\n  const lastSegmentIdPlusOne =\n      numIndices > 0 ? segmentIds[numIndices - 1] + 1 : 0;\n  const outputRows = lastSegmentIdPlusOne;\n\n  if (outputRows < 0) {\n    throw new Error(\n        backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n\n  const outputShape = inputShape.slice();\n  outputShape[0] = outputRows;\n\n  const outputLength =\n      outputShape.reduce((product, value) => product * value, 1);\n  // Output array is initialized with the value 0 by default.\n  const output = util.getArrayFromDType(inputDType, outputLength) as TypedArray;\n\n  // Note that we do not initialize the output buffer with a default value, so\n  // we need to explicitly set missing indices to the default value.\n  if (numIndices === 0) {\n    if (outputRows > 0) {\n      output.fill(defaultValue);\n    }\n    return [output, outputShape];\n  }\n\n  if (outputRows <= 0) {\n    throw new Error(\n        backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n\n  let start = 0, end = 1;\n  // Index from which the output is not initialized.\n  let uninitializedIndex = 0;\n  let outIndex = segmentIds[start];\n\n  while (true) {\n    // We initialize nextIndex to 0 to avoid may be uninitialized warning\n    let nextIndex = 0;\n    if (end < numIndices) {\n      nextIndex = segmentIds[end];\n      if (outIndex === nextIndex) {\n        ++end;\n        continue;\n      }\n      // We have a new segment here.  Verify that the segment ids are growing.\n      if (outIndex >= nextIndex) {\n        throw new Error(backend_util\n            .getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage());\n      }\n    }\n\n    if (outIndex < 0 || outIndex >= outputRows) {\n      throw new Error(\n          backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(\n              outIndex, outputRows));\n    }\n\n    // If there is a gap between two indices, we need to set that gap to the\n    // default value.\n    if (outIndex > uninitializedIndex) {\n      output.fill(defaultValue, uninitializedIndex * numCol, outIndex * numCol);\n    }\n\n    for (let i = start; i < end; ++i) {\n      const index = indices[i];\n      if (index < 0 || index >= inputFlat[0]) {\n        throw new Error(\n            backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(\n                i, indices[i], inputFlat[0]));\n      }\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] += input[index * numCol + j];\n      }\n    }\n\n    if (isMean) {\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] /= end - start;\n      }\n    }\n\n    start = end;\n    ++end;\n    uninitializedIndex = outIndex + 1;\n    outIndex = nextIndex;\n    if (end > numIndices) {\n      break;\n    }\n  }\n\n  // Fill the gap at the end with the default value.\n  if (uninitializedIndex < outputRows) {\n    output.fill(defaultValue, uninitializedIndex * numCol, outputRows * numCol);\n  }\n\n  return [output, outputShape];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sqrtImpl = createSimpleUnaryImpl((xi) => Math.sqrt(xi));\nexport const sqrt = unaryKernelFunc(Sqrt, (xi) => Math.sqrt(xi));\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'cpu',\n  kernelFunc: sqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const squaredDifferenceImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => {\n      const diff = a - b;\n      return diff * diff;\n    }));\nexport const squaredDifference =\n    binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'cpu',\n  kernelFunc: squaredDifference\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function stridedSliceImpl<R extends Rank>(\n    outShape: number[], xBuf: TensorBuffer<R>, strides: number[],\n    begin: number[]): TensorBuffer<R> {\n  const outBuf = buffer(outShape, xBuf.dtype);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const loc = outBuf.indexToLoc(i);\n\n    const newLoc: number[] = new Array(loc.length);\n    for (let j = 0; j < newLoc.length; j++) {\n      newLoc[j] = loc[j] * strides[j] + begin[j];\n    }\n    outBuf.set(xBuf.get(...newLoc), ...loc);\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n  private separator: Uint8Array;\n  private nGramWidths: number[];\n  private padWidth: number;\n  private leftPad: Uint8Array;\n  private rightPad: Uint8Array;\n  private preserveShort: boolean;\n\n  constructor(\n      separator: string, nGramWidths: number[], leftPad: string,\n      rightPad: string, padWidth: number, preserveShortSequences: boolean) {\n    this.separator = util.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util.encodeString(leftPad);\n    this.rightPad = util.encodeString(rightPad);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n\n  private getPadWidth(nGramWidth: number) {\n    // Ngrams can be padded with either a fixed pad width or a dynamic pad\n    // width depending on the 'padWidth' arg, but in no case should the padding\n    // ever be wider than 'nGramWidth' - 1.\n    return Math.min(\n        this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n  }\n\n  private getNumNGrams(length: number, nGramWidth: number) {\n    const padWidth = this.getPadWidth(nGramWidth);\n    return Math.max(0, ((length + 2 * padWidth) - nGramWidth) + 1);\n  }\n\n  private createNGrams(\n      data: Uint8Array[], splitIndex: number, output: Uint8Array[],\n      outputStartIndex: number, numNGrams: number, nGramWidth: number) {\n    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n      const padWidth = this.getPadWidth(nGramWidth);\n      const leftPadding = Math.max(0, padWidth - nGramIndex);\n      const rightPadding =\n          Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n      const numTokens = nGramWidth - (leftPadding + rightPadding);\n      const dataStartIndex =\n          splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n\n      // Calculate the total expected size of the nGram so we can reserve the\n      // correct amount of space in the string.\n      let nGramSize = 0;\n      // Size of the left padding.\n      nGramSize += leftPadding * this.leftPad.length;\n      // Size of the tokens.\n      for (let n = 0; n < numTokens; ++n) {\n        nGramSize += data[dataStartIndex + n].length;\n      }\n      // Size of the right padding.\n      nGramSize += rightPadding * this.rightPad.length;\n      // Size of the separators.\n      const numSeparators = leftPadding + rightPadding + numTokens - 1;\n      nGramSize += numSeparators * this.separator.length;\n\n      // Build the nGram.\n      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n      const nGram = output[outputStartIndex + nGramIndex];\n\n      let nextNGramIndex = 0;\n      const appendToNGram = (str: Uint8Array) =>\n          str.forEach((value) => nGram[nextNGramIndex++] = value);\n\n      for (let n = 0; n < leftPadding; ++n) {\n        appendToNGram(this.leftPad);\n        appendToNGram(this.separator);\n      }\n      // Only output first numTokens - 1 pairs of data and separator\n      for (let n = 0; n < numTokens - 1; ++n) {\n        appendToNGram(data[dataStartIndex + n]);\n        appendToNGram(this.separator);\n      }\n      // Handle case when there are no tokens or no right padding as these\n      // can result in consecutive separators.\n      if (numTokens > 0) {\n        // If we have tokens, then output last and then pair each separator\n        // with the right padding that follows, to ensure nGram ends either with\n        // the token or with the right pad.\n        appendToNGram(data[dataStartIndex + numTokens - 1]);\n        for (let n = 0; n < rightPadding; ++n) {\n          appendToNGram(this.separator);\n          appendToNGram(this.rightPad);\n        }\n      } else {\n        // If we don't have tokens, then the last item inserted into the nGram\n        // has been the separator from the left padding loop above. Hence,\n        // output right pad and separator and make sure to finish with a\n        // padding, not a separator.\n        for (let n = 0; n < rightPadding - 1; ++n) {\n          appendToNGram(this.rightPad);\n          appendToNGram(this.separator);\n        }\n        appendToNGram(this.rightPad);\n      }\n    }\n  }\n\n  // Data and splits together form the definition of the ragged tensor,\n  // where data is 1 dimensional and contains the values of the tensor\n  // and splits denotes the indices at which each row starts.\n  public compute(data: Uint8Array[], splits: Int32Array):\n      [Uint8Array[], Int32Array] {\n    // Validate that the splits are valid indices into data, only if there are\n    // splits specified.\n    const inputDataSize = data.length;\n    const splitsSize = splits.length;\n    if (splitsSize > 0) {\n      let prevSplit = splits[0];\n      if (prevSplit !== 0) {\n        throw new Error(`First split value must be 0, got ${prevSplit}`);\n      }\n      for (let i = 1; i < splitsSize; ++i) {\n        let validSplits = splits[i] >= prevSplit;\n        validSplits = validSplits && (splits[i] <= inputDataSize);\n        if (!validSplits) {\n          throw new Error(`Invalid split value ${splits[i]}, must be in [${\n              prevSplit}, ${inputDataSize}]`);\n        }\n        prevSplit = splits[i];\n      }\n      if (prevSplit !== inputDataSize) {\n        throw new Error(`Last split value must be data size. Expected ${\n            inputDataSize}, got ${prevSplit}`);\n      }\n    }\n\n    const numBatchItems = splitsSize - 1;\n    const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n    // If there is no data or size, return an empty ragged tensor.\n    if (inputDataSize === 0 || splitsSize === 0) {\n      const empty: Uint8Array[] = new Array(inputDataSize);\n      for (let i = 0; i <= numBatchItems; ++i) {\n        nGramsSplits[i] = 0;\n      }\n      return [empty, nGramsSplits];\n    }\n\n    nGramsSplits[0] = 0;\n    for (let i = 1; i <= numBatchItems; ++i) {\n      const length = splits[i] - splits[i - 1];\n      let numNGrams = 0;\n      this.nGramWidths.forEach((nGramWidth) => {\n        numNGrams += this.getNumNGrams(length, nGramWidth);\n      });\n      if (this.preserveShort && length > 0 && numNGrams === 0) {\n        numNGrams = 1;\n      }\n      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n    }\n\n    const nGrams: Uint8Array[] = new Array(nGramsSplits[numBatchItems]);\n\n    for (let i = 0; i < numBatchItems; ++i) {\n      const splitIndex = splits[i];\n      let outputStartIdx = nGramsSplits[i];\n      this.nGramWidths.forEach((nGramWidth) => {\n        const length = splits[i + 1] - splits[i];\n        const numNGrams = this.getNumNGrams(length, nGramWidth);\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        outputStartIdx += numNGrams;\n      });\n      // If we're preserving short sequences, check to see if no sequence was\n      // generated by comparing the current output start idx to the original\n      // one (nGramSplitsdata). If no ngrams were generated, then they will\n      // be equal (since we increment outputStartIdx by numNGrams every\n      // time we create a set of ngrams.)\n      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n        const dataLength = splits[i + 1] - splits[i];\n        // One legitimate reason to not have any ngrams when this.preserveShort\n        // is true is if the sequence itself is empty. In that case, move on.\n        if (dataLength === 0) {\n          continue;\n        }\n        // We don't have to worry about dynamic padding sizes here: if padding\n        // was dynamic, every sequence would have had sufficient padding to\n        // generate at least one nGram.\n        const nGramWidth = dataLength + 2 * this.padWidth;\n        const numNGrams = 1;\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n      }\n    }\n    return [nGrams, nGramsSplits];\n  }\n}\n\nexport function stringNGramsImpl(\n    data: Uint8Array[], dataSplits: Int32Array, separator: string,\n    nGramWidths: number[], leftPad: string, rightPad: string, padWidth: number,\n    preserveShortSequences: boolean): [Uint8Array[], Int32Array] {\n  return new StringNGramsOp(\n             separator, nGramWidths, leftPad, rightPad, padWidth,\n             preserveShortSequences)\n      .compute(data, dataSplits);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction split(\n    str: Uint8Array, delimiters: Uint8Array, skipEmpty: boolean,\n    result: Uint8Array[]): void {\n  if (!str.length) {\n    return;\n  }\n  // When the delimiter is empty, the input is split into individual characters.\n  if (delimiters.length === 0) {\n    for (let i = 0; i < str.length; ++i) {\n      result.push(str.subarray(i, i + 1));\n    }\n    return;\n  }\n  // When there is one delimiter, the input is split only at that delimiter.\n  if (delimiters.length === 1) {\n    const delimiter = delimiters[0];\n    let f = str.indexOf(delimiter);\n    while (f !== -1) {\n      const token = str.subarray(0, f);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      str = str.subarray(f + 1);\n      f = str.indexOf(delimiter);\n    }\n    if (!skipEmpty || str.length !== 0) {\n      result.push(str);\n    }\n    return;\n  }\n  // When there are multiple delimiters, the input is split at every instance\n  // one of the delimiters appears.\n  let tokenStart = 0;\n  for (let i = 0; i < str.length + 1; i++) {\n    if ((i === str.length) || (delimiters.indexOf(str[i]) !== -1)) {\n      const token = str.subarray(tokenStart, i);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      tokenStart = i + 1;\n    }\n  }\n}\n\nexport function stringSplitImpl(\n    input: Uint8Array[], delimiter: Uint8Array,\n    skipEmpty: boolean): [TypedArray, Uint8Array[], [number, number]] {\n  const batchSize = input.length;\n\n  // Empty delimiter means split the input character by character.\n  const tokens: Uint8Array[] = [];\n\n  let outputSize = 0;\n  let maxNumEntries = 0;\n  const numIndices: number[] = new Array(batchSize);\n  for (let i = 0; i < batchSize; ++i) {\n    const prevTokensLength = tokens.length;\n    split(input[i], delimiter, skipEmpty, tokens);\n    const nEntries = tokens.length - prevTokensLength;\n    numIndices[i] = nEntries;\n    outputSize += nEntries;\n    maxNumEntries = Math.max(maxNumEntries, nEntries);\n  }\n\n  const indices = util.getArrayFromDType('int32', outputSize * 2) as TypedArray;\n  const values: Uint8Array[] = new Array(outputSize);\n  const shape: [number, number] = [batchSize, maxNumEntries];\n\n  let c = 0;\n  for (let i = 0; i < batchSize; ++i) {\n    for (let j = 0; j < numIndices[i]; ++j) {\n      // indices is a 2d tensor with shape of [outputSize, 2]\n      indices[c * 2] = i;\n      indices[c * 2 + 1] = j;\n      values[c] = tokens[c];\n      ++c;\n    }\n  }\n\n  return [indices, values, shape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function stringToHashBucketFastImpl(\n    input: Uint8Array[], numBuckets: number): TypedArray {\n  const output = util.getArrayFromDType('int32', input.length) as TypedArray;\n\n  for (let i = 0; i < input.length; ++i) {\n    output[i] =\n        util.fingerPrint64(input[i]).modulo(numBuckets).getLowBitsUnsigned();\n  }\n\n  return output;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const subImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue - bValue));\nexport const subComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal - bReal, imag: aImag - bImag};\n    }));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'cpu',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\n\nexport function tileImpl<R extends Rank>(\n    xBuf: TensorBuffer<R, DataType>,\n    reps: number[]): TensorBuffer<R, DataType> {\n  const newShape: number[] = new Array(xBuf.rank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = xBuf.shape[i] * reps[i];\n  }\n  const result = buffer(newShape, xBuf.dtype);\n  for (let i = 0; i < result.values.length; ++i) {\n    const newLoc = result.indexToLoc(i);\n\n    const originalLoc: number[] = new Array(xBuf.rank);\n    for (let j = 0; j < originalLoc.length; j++) {\n      originalLoc[j] = newLoc[j] % xBuf.shape[j];\n    }\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    result.values[i] = xBuf.values[originalIndex];\n  }\n  return result as TensorBuffer<R, DataType>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\n\nimport {buffer, NumericDataType, Rank, ShapeMap, Tensor, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\ntype Pair = {\n  value: number,\n  index: number\n};\n\nconst comparePair = (a: Pair, b: Pair) => {\n  const valueDiff = b.value - a.value;\n  return valueDiff === 0 ? a.index - b.index : valueDiff;\n};\n\n/**\n * Partitions array where all elements smaller than the (k+1) smallest element\n * are found to the left of it, and all larger to the right of it.\n * Based on the Floyd-Rivest Algorithm, ref:\n * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm\n * @param array: Array to partition\n * @param left: Left index for the interval\n * @param right: Right index for the interval\n * @param k: Desired index value, where array[k] is the (k+1)th smallest element\n *           when left = 0\n */\nfunction select(array: Pair[], k: number, left = 0, right = array.length - 1) {\n  while (right > left) {\n    // Use select recursively to sample a smaller set of size s\n    // the arbitrary constants 600 and 0.5 are used in the original\n    // version to minimize execution time.\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const i = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);\n      const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\n      select(array, k, newLeft, newRight);\n    }\n    // partition the elements between left and right around t\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    util.swap(array, left, k);\n\n    if (comparePair(array[right], t) > 0) {\n      util.swap(array, left, right);\n    }\n    while (i < j) {\n      util.swap(array, i, j);\n      i++;\n      j--;\n      while (comparePair(array[i], t) < 0) {\n        i = i + 1;\n      }\n      while (comparePair(array[j], t) > 0) {\n        j = j - 1;\n      }\n    }\n    if (comparePair(array[left], t) === 0) {\n      util.swap(array, left, j);\n    } else {\n      j = j + 1;\n      util.swap(array, j, right);\n    }\n    // Adjust left and right towards the boundaries of the subset\n    // containing the (k - left + 1)th smallest element.\n    if (j <= k) {\n      left = j + 1;\n    }\n    if (k <= j) {\n      right = j - 1;\n    }\n  }\n}\n\nexport function topKImpl<T extends Tensor, R extends Rank>(\n    x: TypedArray, xShape: number[], xDtype: NumericDataType, k: number,\n    sorted: boolean):\n    [TensorBuffer<R, NumericDataType>, TensorBuffer<R, 'int32'>] {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n\n    let valAndInd: Pair[] = new Array(vals.length);\n    vals.forEach(\n        (value: number, index: number) => valAndInd[index] = {value, index});\n\n    if (k < valAndInd.length) {\n      select(valAndInd, k);\n      valAndInd = valAndInd.slice(0, k);\n    }\n\n    if (sorted) {\n      valAndInd.sort(comparePair);\n    }\n    \n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n\n  return [\n    buffer(outputShape as ShapeMap[R], xDtype, allTopKVals),\n    buffer(outputShape as ShapeMap[R], 'int32', allTopKIndices)\n  ];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendValues, DataType, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function uniqueImpl(\n    values: BackendValues, axis: number, shape: number[], dtype: DataType): {\n  outputValues: BackendValues,\n  outputShape: number[],\n  indices: BackendValues\n} {\n  // Normalize and validate axis.\n  const $axis = util.parseAxisParam(axis, shape)[0];\n\n  // Calculate the new shape that is suitable for extracting data along the\n  // given axis.\n  //\n  // The rank is 3.\n  // The size of the 1st dimension is the size of all the axes < the given axis.\n  // The size of the 2nd dimension is the same as the size of the given axis.\n  // The size of the 3rd dimension is the size of all the axes > the given axis.\n  //\n  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n  // newShape would be: [2*3, 5, 4].\n  //\n  // Note that this is not the final output shape. This will be the shape for an\n  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n  // values along the given axis. To demonstrate how it works, consider the\n  // following example:\n  //\n  // Input: a 3D tensor, with shape [1, 2, 3]\n  // [\n  //   [\n  //      [1,2,3],\n  //      [4,5,6]\n  //   ]\n  // ]\n  // Axis: 2 (the last axis).\n  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n  //\n  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n  // 1*2. The re-shaped data would look like:\n  //\n  // [\n  //   [\n  //     [1], [2], [3]\n  //   ],\n  //   [\n  //     [4], [5], [6]\n  //   ]\n  // ]\n  //\n  // Then, we can construct a 3-level nested loop by the following dimension\n  // order to extract the values along the axis (dimension1):\n  // i: dimension1       // 0,1,2 (newShape[1])\n  //   m: dimension0     // 0,1   (newShape[0])\n  //     n: dimension2   // 0     (newShape[2])\n  //\n  //                       m, i, n\n  //                      ---------\n  // Iteration 0: data at [0, 0, 0] => \"1\"\n  // Iteration 1: data at [1, 0, 0] => \"4\"\n  // We got [1,4].\n  // Iteration 2: data at [0, 1, 0] => \"2\"\n  // Iteration 3: data at [1, 1, 0] => \"5\"\n  // We got [2,5].\n  // Iteration 4: data at [0, 2, 0] => \"3\"\n  // Iteration 5: data at [1, 2, 0] => \"6\"\n  // We got [3,6].\n  const newShape = [1, shape[0], 1];\n  for (let i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n  newShape[1] = shape[$axis];\n  for (let i = $axis + 1; i < shape.length; i++) {\n    newShape[2] *= shape[i];\n  }\n\n  // A map from unique elements (their string representations) to their values\n  // in \"indices\" (below).\n  const uniqueElements: {[key: string]: number} = {};\n  // The indices of each unique element in the original tensor along the given\n  // axis. It is 1D and has the same size as the given axis.\n  const indices = new Int32Array(shape[$axis]);\n  // Create a buffer so we can easily extract value at a given location.\n  const inputBuffer = new TensorBuffer(newShape, dtype, values as TypedArray);\n  // The indices along the given axis that have unique elements. This is a\n  // de-duped version of \"indices\" above.\n  const uniqueIndices: number[] = [];\n  const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n  for (let i = 0; i < shape[$axis]; i++) {\n    // Extract values along the axis.\n    let element: string;\n    if (is1DTensor) {\n      // Fast path for 1D tensor input.\n      element = values[i].toString();\n    } else {\n      const axisValues = [];\n      for (let m = 0; m < newShape[0]; m++) {\n        for (let n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, i, n));\n        }\n      }\n      element = axisValues.join(',');\n    }\n\n    // Dedup and update various indices.\n    if (uniqueElements[element] !== undefined) {\n      indices[i] = uniqueElements[element];\n    } else {\n      const uniqueIndex = Object.keys(uniqueElements).length;\n      uniqueElements[element] = uniqueIndex;\n      indices[i] = uniqueIndex;\n      uniqueIndices.push(i);\n    }\n  }\n\n  // Now we know where each of the unique elements are located along the axis\n  // (uniqueIndices). Extract them from input buffer and store them in the\n  // output buffer.\n  const outputTmpShape = newShape.slice();\n  outputTmpShape[1] = Object.keys(uniqueElements).length;\n  const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach((uniqueElementIndex, i) => {\n    for (let m = 0; m < newShape[0]; m++) {\n      for (let n = 0; n < newShape[2]; n++) {\n        outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n      }\n    }\n  });\n\n  // The output shape can be calculated from the input shape with the size of\n  // the given axis replaced by the number of unique elements along that axis.\n  const outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n\n  return {\n    outputValues: outputBuffer.values as BackendValues,\n    outputShape,\n    indices,\n  };\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '3.21.0';\nexport {version};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/*\n * base.ts contains all the exports from tfjs-backend-cpu\n * without auto-kernel registration\n */\nimport {registerBackend} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from './backend_cpu';\nimport * as shared from './shared';\n\nexport {MathBackendCPU} from './backend_cpu';\nexport {version as version_cpu} from './version';\nexport {shared};\n\n// Side effects for default initialization of MathBackendCPU\nregisterBackend('cpu', () => new MathBackendCPU(), 1 /* priority */);\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Elu, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const elu =\n    unaryKernelFunc(Elu, (xi) => xi >= 0 ? xi : (Math.exp(xi) - 1));\n\nexport const eluConfig: KernelConfig = {\n  kernelName: Elu,\n  backendName: 'cpu',\n  kernelFunc: elu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function leakyRelu(args: {\n  inputs: LeakyReluInputs,\n  backend: MathBackendCPU,\n  attrs: LeakyReluAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {alpha} = attrs;\n\n  assertNotComplex([x], 'leakyRelu');\n\n  const xSize = util.sizeFromShape(x.shape);\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const outVals = util.getTypedArrayFromDType('float32', xSize);\n\n  for (let i = 0; i < xVals.length; i++) {\n    outVals[i] = xVals[i] < 0 ? alpha * xVals[i] : xVals[i];\n  }\n\n  return backend.makeTensorInfo(x.shape, 'float32', outVals);\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'cpu',\n  kernelFunc: leakyRelu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Prelu, PreluInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\n\nconst preluImpl = createSimpleBinaryKernelImpl(\n    (xValue: number, aValue: number) => xValue < 0 ? aValue * xValue : xValue);\n\nexport function prelu(args: {inputs: PreluInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  assertNotComplex([x, alpha], 'prelu');\n\n  const aVals = backend.data.get(x.dataId).values as TypedArray;\n  const bVals = backend.data.get(alpha.dataId).values as TypedArray;\n\n  const [resultData, resultShape] =\n      preluImpl(x.shape, alpha.shape, aVals, bVals, 'float32');\n\n  return backend.makeTensorInfo(resultShape, 'float32', resultData);\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'cpu',\n  kernelFunc: prelu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const relu = unaryKernelFunc(Relu, (xi) => Math.max(0, xi));\n\nexport const reluConfig: KernelConfig = {\n  kernelName: Relu,\n  backendName: 'cpu',\n  kernelFunc: relu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu6} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const relu6 =\n    unaryKernelFunc(Relu6, (xi) => Math.min(Math.max(0, xi), 6));\n\nexport const relu6Config: KernelConfig = {\n  kernelName: Relu6,\n  backendName: 'cpu',\n  kernelFunc: relu6,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {elu} from '../kernels/Elu';\nimport {identity} from '../kernels/Identity';\nimport {leakyRelu} from '../kernels/LeakyRelu';\nimport {prelu} from '../kernels/Prelu';\nimport {relu} from '../kernels/Relu';\nimport {relu6} from '../kernels/Relu6';\nimport {sigmoid} from '../kernels/Sigmoid';\n\nexport function applyActivation(\n    backend: MathBackendCPU, x: TensorInfo, activation: backend_util.Activation,\n    preluActivationWeights?: TensorInfo, leakyreluAlpha?: number): TensorInfo {\n  if (activation === 'linear') {\n    return identity({inputs: {x}, backend});\n  } else if (activation === 'relu') {\n    return relu({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'elu') {\n    return elu({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'relu6') {\n    return relu6({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'prelu') {\n    return prelu({inputs: {x, alpha: preluActivationWeights}, backend});\n  } else if (activation === 'leakyrelu') {\n    return leakyRelu({inputs: {x}, backend, attrs: {alpha: leakyreluAlpha}});\n  } else if (activation === 'sigmoid') {\n    return sigmoid({inputs: {x}, backend}) as TensorInfo;\n  }\n  throw new Error(\n      `Activation ${activation} has not been implemented for the CPU backend.`);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function reshape(\n    args:\n        {inputs: ReshapeInputs, backend: MathBackendCPU, attrs: ReshapeAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  backend.incRef(x.dataId);\n\n  const xData = backend.data.get(x.dataId);\n\n  if (xData.complexTensorInfos != null) {\n    const real = xData.complexTensorInfos.real;\n    const imag = xData.complexTensorInfos.imag;\n\n    real.shape = $shape;\n    imag.shape = $shape;\n  }\n\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'cpu',\n  kernelFunc: reshape as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs, broadcast_util, buffer, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {reshape} from './Reshape';\n\nexport function batchMatMul(args: {\n  inputs: BatchMatMulInputs,\n  attrs: BatchMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b} = inputs;\n  const {transposeA, transposeB} = attrs;\n\n  assertNotComplex([a, b], 'matMul');\n\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  const outShapeOuterDims = broadcast_util.assertAndGetBroadcastShape(\n      a.shape.slice(0, -2), b.shape.slice(0, -2));\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n          `${b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const a3dShape = transposeA ? [batchDimA, innerShapeA, outerShapeA] :\n                                [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape = transposeB ? [batchDimB, outerShapeB, innerShapeB] :\n                                [batchDimB, innerShapeB, outerShapeB];\n\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({inputs: {x: a}, backend, attrs: {shape: a3dShape}});\n  const b3d = reshape({inputs: {x: b}, backend, attrs: {shape: b3dShape}});\n\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n  const leftDim = transposeA ? a3d.shape[2] : a3d.shape[1];\n  const rightDim = transposeB ? b3d.shape[1] : b3d.shape[2];\n  const batchDim = Math.max(batchDimA, batchDimB);\n\n  const a3dValues = backend.data.get(a3d.dataId).values as TypedArray;\n  const b3dValues = backend.data.get(b3d.dataId).values as TypedArray;\n\n  const a3dStrides = util.computeStrides(a3d.shape);\n  const b3dStrides = util.computeStrides(b3d.shape);\n\n  const [aBatch, aOuterStep, aInnerStep] = transposeA ?\n      [a3dStrides[0], 1, a3dStrides[1]] :\n      [a3dStrides[0], a3dStrides[1], 1];\n  const [bInnerStep, bOuterStep, bBatch] = transposeB ?\n      [1, b3dStrides[1], b3dStrides[0]] :\n      [b3dStrides[1], 1, b3dStrides[0]];\n\n  const size = leftDim * rightDim;\n  const result = buffer([batchDim, leftDim, rightDim], a3d.dtype);\n\n  const resVals = result.values as TypedArray;\n  const blockSize = backend.blockSize;\n\n  for (let bi = 0; bi < batchDim; bi++) {\n    for (let i0 = 0; i0 < leftDim; i0 += blockSize) {\n      for (let j0 = 0; j0 < rightDim; j0 += blockSize) {\n        for (let k0 = 0; k0 < sharedDim; k0 += blockSize) {\n          // for when blockSize doesn't evenly divide the input\n          const iBlock = Math.min(i0 + blockSize, leftDim);\n          const jBlock = Math.min(j0 + blockSize, rightDim);\n          const kBlock = Math.min(k0 + blockSize, sharedDim);\n\n          for (let i = i0; i < iBlock; i++) {\n            for (let j = j0; j < jBlock; j++) {\n              let sum = 0.0;\n\n              for (let k = k0; k < kBlock; k++) {\n                const batchOffsetA = Math.min(bi, batchDimA - 1) * aBatch;\n                const batchOffsetB = Math.min(bi, batchDimB - 1) * bBatch;\n                const aVal =\n                    a3dValues[batchOffsetA + i * aOuterStep + k * aInnerStep];\n                const bVal =\n                    b3dValues[k * bInnerStep + j * bOuterStep + batchOffsetB];\n                sum += aVal * bVal;\n              }\n              resVals[bi * size + (i * rightDim + j)] += sum;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  backend.disposeIntermediateTensorInfo(a3d);\n  backend.disposeIntermediateTensorInfo(b3d);\n\n  // set correct shape on output.\n  return backend.makeTensorInfo(\n      outShape, result.dtype, result.values as TypedArray);\n}\n\nexport const batchMatMulConfig: KernelConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'cpu',\n  kernelFunc: batchMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\n\nimport {add} from './Add';\nimport {batchMatMul} from './BatchMatMul';\n\nexport function _fusedMatMul(args: {\n  inputs: _FusedMatMulInputs,\n  attrs: _FusedMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b, bias, preluActivationWeights} = inputs;\n  const {transposeA, transposeB, activation, leakyreluAlpha} = attrs;\n\n  let current;\n  let addRes;\n  let activationRes;\n\n  const intermediates: TensorInfo[] = [];\n\n  const matMulRes =\n      batchMatMul({inputs: {a, b}, attrs: {transposeA, transposeB}, backend});\n  current = matMulRes;\n\n  if (bias) {\n    addRes = add({inputs: {a: current, b: bias}, backend}) as TensorInfo;\n    intermediates.push(current);\n    current = addRes;\n  }\n  if (activation) {\n    activationRes = applyActivation(\n        backend, current, activation, preluActivationWeights, leakyreluAlpha);\n    intermediates.push(current);\n    current = activationRes;\n  }\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return current;\n}\n\nexport const _fusedMatMulConfig: KernelConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'cpu',\n  kernelFunc: _fusedMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const acos = unaryKernelFunc(Acos, (xi) => Math.acos(xi));\n\nexport const acosConfig: KernelConfig = {\n  kernelName: Acos,\n  backendName: 'cpu',\n  kernelFunc: acos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const acosh = unaryKernelFunc(Acosh, (xi) => Math.acosh(xi));\n\nexport const acoshConfig: KernelConfig = {\n  kernelName: Acosh,\n  backendName: 'cpu',\n  kernelFunc: acosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, buffer, KernelConfig, KernelFunc, Tensor, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function addN(args: {inputs: AddNInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const tensors = inputs as Tensor[];\n\n  assertNotComplex(inputs, 'addN');\n\n  const vals =\n      tensors.map(t => backend.data.get(t.dataId).values as TypedArray);\n  const outBuf = buffer(tensors[0].shape, tensors[0].dtype as 'float32');\n  const outVals = outBuf.values;\n  for (let i = 0; i < tensors.length; i++) {\n    const currVals = vals[i];\n    for (let j = 0; j < outVals.length; j++) {\n      outVals[j] += currVals[j];\n    }\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'cpu',\n  kernelFunc: addN as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {All, AllAttrs, AllInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function all(\n    args: {inputs: AllInputs, backend: MathBackendCPU, attrs: AllAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'all');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('all', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let all = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      all = all && value;\n    }\n    vals[i] = all;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const allConfig: KernelConfig = {\n  kernelName: All,\n  backendName: 'cpu',\n  kernelFunc: all as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Any, AnyAttrs, AnyInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function any(\n    args: {inputs: AnyInputs, backend: MathBackendCPU, attrs: AnyAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'any');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('any', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let anyVal = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      anyVal = anyVal || value;\n    }\n    vals[i] = anyVal;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const anyConfig: KernelConfig = {\n  kernelName: Any,\n  backendName: 'cpu',\n  kernelFunc: any as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function argMax(\n    args: {inputs: ArgMaxInputs, backend: MathBackendCPU, attrs: ArgMaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  assertNotComplex(x, 'argMax');\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMax', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    let maxIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value > max) {\n        max = value;\n        maxIndex = j;\n      }\n    }\n    vals[i] = maxIndex;\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\n\nexport const argMaxConfig: KernelConfig = {\n  kernelName: ArgMax,\n  backendName: 'cpu',\n  kernelFunc: argMax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin, ArgMinAttrs, ArgMinInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function argMin(\n    args: {inputs: ArgMinInputs, backend: MathBackendCPU, attrs: ArgMinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  assertNotComplex(x, 'argMin');\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMin', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    let minIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value < min) {\n        min = value;\n        minIndex = j;\n      }\n    }\n    vals[i] = minIndex;\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\n\nexport const argMinConfig: KernelConfig = {\n  kernelName: ArgMin,\n  backendName: 'cpu',\n  kernelFunc: argMin as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asin, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const asin = unaryKernelFunc(Asin, (xi) => Math.asin(xi));\n\nexport const asinConfig: KernelConfig = {\n  kernelName: Asin,\n  backendName: 'cpu',\n  kernelFunc: asin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asinh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const asinh = unaryKernelFunc(Asinh, (xi) => Math.asinh(xi));\n\nexport const asinhConfig: KernelConfig = {\n  kernelName: Asinh,\n  backendName: 'cpu',\n  kernelFunc: asinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const atan = unaryKernelFunc(Atan, (xi) => Math.atan(xi));\n\nexport const atanConfig: KernelConfig = {\n  kernelName: Atan,\n  backendName: 'cpu',\n  kernelFunc: atan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan2, KernelConfig} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const atan2Impl = createSimpleBinaryKernelImpl(\n    (aValue, bValue) => Math.atan2(aValue as number, bValue as number));\n\nexport const atan2 = binaryKernelFunc(Atan2, atan2Impl);\n\nexport const atan2Config: KernelConfig = {\n  kernelName: Atan2,\n  backendName: 'cpu',\n  kernelFunc: atan2,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atanh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const atanh = unaryKernelFunc(Atanh, (xi) => Math.atanh(xi));\n\nexport const atanhConfig: KernelConfig = {\n  kernelName: Atanh,\n  backendName: 'cpu',\n  kernelFunc: atanh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function pool(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv2DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides =\n      convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3];\n  const outputRowStrides = convInfo.outShape[2] * convInfo.outShape[3];\n  const outputColStrides = convInfo.outShape[3];\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const outputBatchOffset = b * outputBatchStrides;\n    const inputBatchOffset = b * strides[0];\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        const outputRowOffset = outputBatchOffset + yR * outputRowStrides;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          const xCMin = Math.max(0, xCCorner);\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let minMaxValue = initialValue;\n          let avgValue = 0;\n          let count = 0;\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const xROffset = inputBatchOffset + xR * strides[1];\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const xCOffset = xROffset + xC * strides[2];\n              const pixel = xValues[xCOffset + d];\n              if ((poolType === 'max' && pixel > minMaxValue)) {\n                minMaxValue = pixel;\n              } else if (poolType === 'avg') {\n                avgValue += pixel;\n                count++;\n              }\n            }\n            if (isNaN(minMaxValue)) {\n              break;\n            }\n          }\n          const outputOffset = outputRowOffset + yC * outputColStrides + d;\n          outputVals[outputOffset] =\n              poolType === 'avg' ? avgValue / count : minMaxValue;\n        }\n      }\n    }\n  }\n  return output;\n}\n\nexport function maxPoolPositions(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    convInfo: backend_util.Conv2DInfo, flattenPositions = false,\n    includeBatchInIndex = false): TensorBuffer<Rank, 'int32'> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const xBuf = buffer(xShape, dtype, xValues);\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        let xRMin = xRCorner;\n        while (xRMin < 0) {\n          xRMin += dilationHeight;\n        }\n        // const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          let xCMin = xCCorner;\n          while (xCMin < 0) {\n            xCMin += dilationWidth;\n          }\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let maxValue = Number.NEGATIVE_INFINITY;\n          let maxPosition = -1;\n\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const wR = xR - xRCorner;\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const wC = xC - xCCorner;\n              const pixel = xBuf.get(b, xR, xC, d);\n              if (pixel > maxValue) {\n                maxValue = pixel as number;\n                if (flattenPositions) {\n                  maxPosition = includeBatchInIndex ?\n                      ((b * convInfo.inHeight + xR) * convInfo.inWidth + xC) *\n                              convInfo.inChannels +\n                          d :\n                      (xR * convInfo.inWidth + xC) * convInfo.inChannels + d;\n                } else {\n                  maxPosition = wR * effectiveFilterWidth + wC;\n                }\n              }\n            }\n          }\n          maxPositions.set(maxPosition, b, yR, yC, d);\n        }\n      }\n    }\n  }\n  return maxPositions;\n}\n\nexport function pool3d(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv3DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] *\n      convInfo.outShape[3] * convInfo.outShape[4];\n  const outputDepthStrides =\n      convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n  const outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];\n  const outputColStrides = convInfo.outShape[4];\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    const outputBatchOffset = batch * outputBatchStrides;\n    const inputBatchOffset = batch * strides[0];\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax =\n            Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        const outputDepthOffset =\n            outputBatchOffset + yDepth * outputDepthStrides;\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          const outputRowOffset = outputDepthOffset + yRow * outputRowStrides;\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n            // Shader code begins\n            const outputColOffset = outputRowOffset + yCol * outputColStrides;\n            let minMaxValue = initialValue;\n            let avgValue = 0;\n            let count = 0;\n            for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                 xDepth += dilationDepth) {\n              const xDepthOffset = inputBatchOffset + xDepth * strides[1];\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const xRowOffset = xDepthOffset + xRow * strides[2];\n                for (let xCol = xColMin; xCol < xColMax;\n                     xCol += dilationWidth) {\n                  const xColOffset = xRowOffset + xCol * strides[3];\n                  const pixel = xValues[xColOffset + channel];\n                  if ((poolType === 'max' && pixel > minMaxValue)) {\n                    minMaxValue = pixel;\n                  } else if (poolType === 'avg') {\n                    avgValue += pixel;\n                    count++;\n                  }\n                  if (isNaN(minMaxValue)) {\n                    break;\n                  }\n                }\n                if (isNaN(minMaxValue)) {\n                  break;\n                }\n              }\n              if (isNaN(minMaxValue)) {\n                break;\n              }\n            }\n            const outputOffset = outputColOffset + channel;\n            outputVals[outputOffset] =\n                poolType === 'avg' ? avgValue / count : minMaxValue;\n          }\n        }\n      }\n    }\n  }\n\n  return output;\n}\n\nexport function maxPool3dPositions(\n    xBuf: TensorBuffer<Rank, DataType>,\n    convInfo: backend_util.Conv3DInfo): TensorBuffer<Rank, DataType> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax =\n            Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n\n            // Shader code begins\n            let maxValue = Number.NEGATIVE_INFINITY;\n            let maxPosition = -1;\n\n            for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                 xDepth += dilationDepth) {\n              const wDepth = xDepth - xDepthCorner;\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const wRow = xRow - xRowCorner;\n                for (let xCol = xColMin; xCol < xColMax;\n                     xCol += dilationWidth) {\n                  const wCol = xCol - xColCorner;\n                  const pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);\n                  if (pixel >= maxValue) {\n                    maxValue = pixel as number;\n                    maxPosition =\n                        wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                        wRow * effectiveFilterHeight + wCol;\n                  }\n                }\n              }\n            }\n\n            maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return maxPositions;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function avgPool(\n    args:\n        {inputs: AvgPoolInputs, backend: MathBackendCPU, attrs: AvgPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'avgPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'avg');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'cpu',\n  kernelFunc: avgPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3D, AvgPool3DAttrs, AvgPool3DInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool3d} from '../utils/pool_utils';\n\nexport function avgPool3D(args: {\n  inputs: AvgPool3DInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n\n  assertNotComplex(x, 'avgPool3d');\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode, dataFormat);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = pool3d(\n      xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'avg');\n\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\n\nexport const avgPool3DConfig: KernelConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'cpu',\n  kernelFunc: avgPool3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3DGrad, AvgPool3DGradAttrs, AvgPool3DGradInputs, backend_util, buffer, KernelConfig, KernelFunc, Rank, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function avgPool3DGrad(args: {\n  inputs: AvgPool3DGradInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, input], 'avgPool3DGrad');\n\n  const convInfo = backend_util.computePool3DInfo(\n      input.shape as [number, number, number, number, number], filterSize,\n      strides, 1 /* dilations */, pad, dimRoundingMode);\n\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n\n  const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n  const dyBuf = backend.bufferSync<Rank, 'float32'>(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins.\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                 wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                  Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight;\n                   wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                    Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth;\n                     wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                      Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const pixel =\n                      dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel;\n                }\n              }\n            }\n            dx.set(\n                dotProd * avgMultiplier, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const avgPool3DGradConfig: KernelConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs, backend_util, buffer, KernelConfig, KernelFunc, Rank, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function avgPoolGrad(args: {\n  inputs: AvgPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel;\n            }\n          }\n          dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const avgPoolGradConfig: KernelConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function batchNorm(args: {\n  inputs: FusedBatchNormInputs,\n  backend: MathBackendCPU,\n  attrs: FusedBatchNormAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, scale, offset, mean, variance} = inputs;\n\n  util.assert(\n      mean.shape.length === variance.shape.length,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      offset == null || mean.shape.length === offset.shape.length,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      scale == null || mean.shape.length === scale.shape.length,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  assertNotComplex([x, mean, variance, scale, offset], 'batchNorm');\n\n  let {varianceEpsilon} = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const mVals = backend.data.get(mean.dataId).values as TypedArray;\n  const varVals = backend.data.get(variance.dataId).values as TypedArray;\n  const sVals = scale ? backend.data.get(scale.dataId).values as TypedArray :\n                        new Float32Array([1]);\n  const offVals = offset ?\n      backend.data.get(offset.dataId).values as TypedArray :\n      new Float32Array([0]);\n  const outVals = new Float32Array(xVals.length);\n\n  const offValsLength = offVals.length;\n  const sValsLength = sVals.length;\n  const varValsLength = varVals.length;\n  const mValsLength = mVals.length;\n\n  let offi = 0;\n  let mi = 0;\n  let si = 0;\n  let vi = 0;\n  for (let i = 0; i < xVals.length; ++i) {\n    outVals[i] = offVals[offi++] +\n        (xVals[i] - mVals[mi++]) * sVals[si++] /\n            Math.sqrt(varVals[vi++] + varianceEpsilon);\n    if (offi >= offValsLength) {\n      offi = 0;\n    }\n    if (mi >= mValsLength) {\n      mi = 0;\n    }\n    if (si >= sValsLength) {\n      si = 0;\n    }\n    if (vi >= varValsLength) {\n      vi = 0;\n    }\n  }\n  return backend.makeTensorInfo(x.shape, x.dtype, outVals);\n}\n\nexport const batchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'cpu',\n  kernelFunc: batchNorm as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport function batchToSpaceND(args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: MathBackendCPU,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  assertNotComplex([x], 'batchToSpaceND');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const xReshaped = reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const xTransposed =\n      transpose({inputs: {x: xReshaped}, backend, attrs: {perm: permuted}});\n  const xTransposedReshaped = reshape(\n      {inputs: {x: xTransposed}, backend, attrs: {shape: reshapedPermuted}});\n  const result = slice({\n    inputs: {x: xTransposedReshaped},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  backend.disposeIntermediateTensorInfo(xReshaped);\n  backend.disposeIntermediateTensorInfo(xTransposed);\n  backend.disposeIntermediateTensorInfo(xTransposedReshaped);\n\n  return result;\n}\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'cpu',\n  kernelFunc: batchToSpaceND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Bincount, BincountAttrs, BincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {bincountImpl} from './Bincount_impl';\n\nexport function bincount(args: {\n  inputs: BincountInputs,\n  backend: MathBackendCPU,\n  attrs: BincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size} = attrs;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const weightsVals = backend.data.get(weights.dataId).values as TypedArray;\n\n  const outVals =\n      bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n  return backend.makeTensorInfo([size], weights.dtype, outVals);\n}\n\nexport const bincountConfig: KernelConfig = {\n  kernelName: Bincount,\n  backendName: 'cpu',\n  kernelFunc: bincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BroadcastArgs, BroadcastArgsInputs, KernelConfig, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function broadcastArgs(args: {\n  inputs: BroadcastArgsInputs,\n  backend: MathBackendCPU,\n}): TensorInfo {\n  const {inputs, backend} = args;\n  const {s0, s1} = inputs;\n\n  const s0Vals = backend.data.get(s0.dataId).values as TypedArray;\n  const s1Vals = backend.data.get(s1.dataId).values as TypedArray;\n\n  const broadcastShape = backend_util.assertAndGetBroadcastShape(\n      Array.from(s0Vals), Array.from(s1Vals));\n\n  return backend.makeTensorInfo(\n      [broadcastShape.length], 'int32', Int32Array.from(broadcastShape));\n}\n\nexport const broadcastArgsConfig: KernelConfig = {\n  kernelName: BroadcastArgs,\n  backendName: 'cpu',\n  kernelFunc: broadcastArgs\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ClipByValue, ClipByValueAttrs, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const clipByValue = unaryKernelFunc(ClipByValue, (xi, attrs) => {\n  const clipAttrs = attrs as {} as ClipByValueAttrs;\n  if (xi > clipAttrs.clipValueMax) {\n    return clipAttrs.clipValueMax;\n  }\n  return xi < clipAttrs.clipValueMin ? clipAttrs.clipValueMin : xi;\n});\n\nexport const clipByValueConfig: KernelConfig = {\n  kernelName: ClipByValue,\n  backendName: 'cpu',\n  kernelFunc: clipByValue,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ComplexAbs, ComplexAbsInputs, KernelConfig, KernelFunc, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const complexAbs =\n    (args: {inputs: ComplexAbsInputs, backend: MathBackendCPU}) => {\n      const {x} = args.inputs;\n      const cpuBackend = args.backend;\n      const resultValues = new Float32Array(util.sizeFromShape(x.shape));\n      const complexVals = cpuBackend.data.get(x.dataId);\n      const real = complexVals.complexTensorInfos.real;\n      const imag = complexVals.complexTensorInfos.imag;\n      const realVals = cpuBackend.data.get(real.dataId).values as Float32Array;\n      const imagVals = cpuBackend.data.get(imag.dataId).values as Float32Array;\n      for (let i = 0; i < realVals.length; i++) {\n        const real = realVals[i];\n        const imag = imagVals[i];\n        resultValues[i] = Math.hypot(real, imag);\n      }\n\n      return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n    };\n\nexport const complexAbsConfig: KernelConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'cpu',\n  kernelFunc: complexAbs as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Imag, ImagInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function imag(args: {inputs: ImagInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const imag = backend.data.get(input.dataId).complexTensorInfos.imag;\n  const imagVal = backend.data.get(imag.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the imag value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(imag.shape, imag.dtype, imagVal);\n}\n\nexport const imagConfig: KernelConfig = {\n  kernelName: Imag,\n  backendName: 'cpu',\n  kernelFunc: imag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {complex} from './Complex';\nimport {concatImpl} from './Concat_impl';\nimport {identity} from './Identity';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {reshape} from './Reshape';\n\nexport function concat(\n    args: {inputs: ConcatInputs, backend: MathBackendCPU, attrs: ConcatAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n\n  const shapes = inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  let outShape = backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({inputs: {x: $inputs[0]}, backend});\n  }\n\n  if ($inputs[0].dtype === 'complex64') {\n    const reals = $inputs.map((t) => real({inputs: {input: t}, backend}));\n    const imags = $inputs.map((t) => imag({inputs: {input: t}, backend}));\n\n    const realConcated = concat({inputs: reals, backend, attrs: {axis: $axis}});\n    const imagConcated = concat({inputs: imags, backend, attrs: {axis: $axis}});\n\n    const result =\n        complex({inputs: {real: realConcated, imag: imagConcated}, backend});\n\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n\n    return result;\n  }\n\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  const inputs2D = $inputs.map(t => {\n    const innerSize = util.sizeFromShape(t.shape.slice($axis));\n    const shape = [-1, innerSize];\n    return reshape({inputs: {x: t}, backend, attrs: {shape}});\n  });\n\n  const inputsValShapes = inputs2D.map(t => {\n    return {vals: backend.data.get(t.dataId).values, shape: t.shape};\n  });\n\n  // Concats 2d tensors along axis=1.\n  outShape =\n      backend_util.computeOutShape(inputs2D.map(t => t.shape), 1 /* axis */);\n  const simplyConcat = inputs2D[0].shape[0] === 1;\n  const outVals =\n      concatImpl(inputsValShapes, outShape, inputs[0].dtype, simplyConcat);\n\n  const finalOutShape =\n      backend_util.computeOutShape($inputs.map(t => t.shape), $axis);\n\n  const outInfo =\n      backend.makeTensorInfo(finalOutShape, inputs[0].dtype, outVals);\n\n  inputs2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return outInfo;\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'cpu',\n  kernelFunc: concat as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2D(\n    args: {inputs: Conv2DInputs, backend: MathBackendCPU, attrs: Conv2DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'conv2d');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const padLeft = convInfo.padInfo.left;\n  const padTop = convInfo.padInfo.top;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const xBatchStride = xStrides[0];\n  const xRowStride = isChannelsLast ? xStrides[1] : xStrides[2];\n  const xColStride = isChannelsLast ? xStrides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : xStrides[1];\n  const yBatchStride = y.strides[0];\n  const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n  const yColStride = isChannelsLast ? y.strides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xBatchStride;\n    const yOffset1 = b * yBatchStride;\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * yRowStride;\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xRowStride;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * yColStride;\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * xColStride;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1 * xChannelStride];\n              for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                yVals[yOffset3 + d2 * yChannelStride] +=\n                    xVal * wVals[wOffset3 + d2];\n              }\n              wOffset3 += convInfo.outChannels;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, yVals);\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'cpu',\n  kernelFunc: conv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropFilter(args: {\n  inputs: Conv2DBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, dataFormat, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv2dBackpropFilter');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad, dimRoundingMode, false /* depthwise */,\n      $dataFormat);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n          let dotProd = 0;\n          for (let b = 0; b < convInfo.batchSize; ++b) {\n            for (let yR = yRMin; yR < yRMax; ++yR) {\n              const xR = wR + yR * strideHeight - topPad;\n              for (let yC = yCMin; yC < yCMax; ++yC) {\n                const xC = wC + yC * strideWidth - leftPad;\n                if (isChannelsLast) {\n                  dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                      (dyBuf.get(b, yR, yC, d2) as number);\n                } else {\n                  dotProd += (xBuf.get(b, d1, xR, xC) as number) *\n                      (dyBuf.get(b, d2, yR, yC) as number);\n                }\n              }\n            }\n          }\n          dW.set(dotProd, wR, wC, d1, d2);\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const conv2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropFilter as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, filter], 'conv2dBackpropInput');\n\n  const filterStrides = util.computeStrides(filter.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  let $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  $dataFormat = convInfo.dataFormat;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  const isChannelsLast = $dataFormat === 'channelsLast';\n  const xBatchStride = dx.strides[0];\n  const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n  const xColStride = isChannelsLast ? dx.strides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n  const yBatchStride = dyStrides[0];\n  const yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];\n  const yColStride = isChannelsLast ? dyStrides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : dyStrides[1];\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset =\n                  yBatchStride * b + yRowStride * yR + yColStride * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let d2 = 0; d2 < outChannels; ++d2) {\n                const pixel = dyValues[dyOffset + yChannelStride * d2];\n                const weight = fltValues[fltOffset + d2];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          const dxOffset = xBatchStride * b + xRowStride * xR +\n              xColStride * xC + xChannelStride * d1;\n          dxValues[dxOffset] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropInput as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3D, Conv3DAttrs, Conv3DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3D(\n    args: {inputs: Conv3DInputs, backend: MathBackendCPU, attrs: Conv3DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  assertNotComplex([x, filter], 'conv3d');\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number],\n      filter.shape as [number, number, number, number, number], strides,\n      dilations, pad);\n\n  const {\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    dilationDepth,\n    dilationHeight,\n    dilationWidth,\n    padInfo\n  } = convInfo;\n  const padFront = padInfo.front;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yF = 0; yF < convInfo.outDepth; ++yF) {\n      const yOffset2 = yOffset1 + yF * y.strides[1];\n      const xFCorner = yF * convInfo.strideDepth - padFront;\n      for (let wF = 0; wF < filterDepth; ++wF) {\n        const xF = xFCorner + wF * dilationDepth;\n        if (xF < 0 || xF >= convInfo.inDepth) {\n          continue;\n        }\n        const wOffset1 = wF * filterStrides[0];\n        const xOffset2 = xOffset1 + xF * xStrides[1];\n\n        for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n          const yOffset3 = yOffset2 + yR * y.strides[2];\n          const xRCorner = yR * convInfo.strideHeight - padTop;\n          for (let wR = 0; wR < filterHeight; ++wR) {\n            const xR = xRCorner + wR * dilationHeight;\n            if (xR < 0 || xR >= convInfo.inHeight) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wR * filterStrides[1];\n            const xOffset3 = xOffset2 + xR * xStrides[2];\n            for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n              const yOffset4 = yOffset3 + yC * convInfo.outChannels;\n              const xCCorner = yC * convInfo.strideWidth - padLeft;\n              for (let wC = 0; wC < filterWidth; ++wC) {\n                const xC = xCCorner + wC * dilationWidth;\n                if (xC < 0 || xC >= convInfo.inWidth) {\n                  continue;\n                }\n                const wOffset3 = wOffset2 + wC * filterStrides[2];\n                const xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                let wOffset4 = wOffset3;\n                for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                  const xVal = xVals[xOffset4 + d1];\n                  for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                    yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                  }\n                  wOffset4 += convInfo.outChannels;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const conv3DConfig: KernelConfig = {\n  kernelName: Conv3D,\n  backendName: 'cpu',\n  kernelFunc: conv3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropFilterV2, Conv3DBackpropFilterV2Attrs, Conv3DBackpropFilterV2Inputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropFilterV2(args: {\n  inputs: Conv3DBackpropFilterV2Inputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropFilterV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv3dBackpropFilterV2');\n\n  const xStrides = util.computeStrides(x.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad);\n\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n\n  const dw = new TensorBuffer(convInfo.filterShape, 'float32');\n  const dwValues = dw.values;\n  const [dwS0, dwS1, dwS2, dwS3] = dw.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const [xS0, xS1, xS2, xS3] = xStrides;\n\n  const frontPad = convInfo.padInfo.front;\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n\n  for (let wF = 0; wF < filterDepth; ++wF) {\n    const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n    const yFMax = Math.min(\n        convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n    const wOffset1 = wF * dwS0;\n\n    for (let wR = 0; wR < filterHeight; ++wR) {\n      const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n      const yRMax = Math.min(\n          convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n      const wOffset2 = wR * dwS1 + wOffset1;\n\n      for (let wC = 0; wC < filterWidth; ++wC) {\n        const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n        const yCMax = Math.min(\n            convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n        const wOffset3 = wC * dwS2 + wOffset2;\n\n        for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n          const wOffset4 = d1 * dwS3 + wOffset3;\n\n          for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n            let dotProd = 0;\n            for (let b = 0; b < convInfo.batchSize; ++b) {\n              const xOffset1 = b * xS0;\n              const yOffset1 = b * dyS0;\n\n              for (let yF = yFMin; yF < yFMax; ++yF) {\n                const xF = wF + yF * strideDepth - frontPad;\n                const xOffset2 = xF * xS1 + xOffset1;\n                const yOffset2 = yF * dyS1 + yOffset1;\n\n                for (let yR = yRMin; yR < yRMax; ++yR) {\n                  const xR = wR + yR * strideHeight - topPad;\n                  const xOffset3 = xR * xS2 + xOffset2;\n                  const yOffset3 = yR * dyS2 + yOffset2;\n\n                  for (let yC = yCMin; yC < yCMax; ++yC) {\n                    const xC = wC + yC * strideWidth - leftPad;\n                    const xOffset4 = xC * xS3 + xOffset3;\n                    const yOffset4 = yC * dyS3 + yOffset3;\n\n                    dotProd += xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                  }\n                }\n              }\n            }\n            dwValues[wOffset4 + d2] = dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dw.shape, dw.dtype, dw.values);\n}\n\nexport const conv3DBackpropFilterV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropFilterV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropInputV2(args: {\n  inputs: Conv3DBackpropInputV2Inputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropInputV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {pad, strides, inputShape} = attrs;\n\n  assertNotComplex([dy], 'conv3dBackpropInputV2');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      inputShape, filter.shape as [number, number, number, number, number],\n      strides, 1 /* dilations */, pad);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2, dxS3] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2, fltS3] = filterStrides;\n  const {\n    batchSize,\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inDepth,\n    inHeight,\n    inWidth,\n    outChannels,\n    outDepth,\n    outHeight,\n    outWidth,\n    strideDepth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const frontPad = filterDepth - 1 - convInfo.padInfo.front;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      // Frames of depth\n      for (let xF = 0; xF < inDepth; ++xF) {\n        const xFCorner = xF - frontPad;\n        const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n        const yFMax =\n            Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);\n\n        // Rows as per standard 2d matrix notation\n        for (let xR = 0; xR < inHeight; ++xR) {\n          const xRCorner = xR - topPad;\n          const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n          const yRMax =\n              Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n          // Columns as per standard 2d matrix notation\n          for (let xC = 0; xC < inWidth; ++xC) {\n            const xCCorner = xC - leftPad;\n            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n            const yCMax =\n                Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n            let dotProd = 0;\n            for (let yF = xFMin; yF < yFMax; ++yF) {\n              const wF = yF * strideDepth - xFCorner;\n\n              for (let yR = xRMin; yR < yRMax; ++yR) {\n                const wR = yR * strideHeight - xRCorner;\n\n                for (let yC = xCMin; yC < yCMax; ++yC) {\n                  const wC = yC * strideWidth - xCCorner;\n                  const dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                  const fltOffset = fltS0 * (filterDepth - 1 - wF) +\n                      fltS1 * (filterHeight - 1 - wR) +\n                      fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n\n                  for (let d2 = 0; d2 < outChannels; ++d2) {\n                    const pixel = dyValues[dyOffset + d2];\n                    const weight = fltValues[fltOffset + d2];\n                    dotProd += pixel * weight;\n                  }\n                }\n              }\n            }\n            dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] =\n                dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv3DBackpropInputV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropInputV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const cos = unaryKernelFunc(Cos, (xi) => Math.cos(xi));\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'cpu',\n  kernelFunc: cos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const cosh = unaryKernelFunc(Cosh, (xi) => Math.cosh(xi));\n\nexport const coshConfig: KernelConfig = {\n  kernelName: Cosh,\n  backendName: 'cpu',\n  kernelFunc: cosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function cropAndResize(args: {\n  inputs: CropAndResizeInputs,\n  backend: MathBackendCPU,\n  attrs: CropAndResizeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, boxes, boxInd} = inputs;\n  const {cropSize, method, extrapolationValue} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const numBoxes = boxes.shape[0];\n\n  const [cropHeight, cropWidth] = cropSize;\n  const output =\n      buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');\n\n  const boxVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const boxIndVals = backend.data.get(boxInd.dataId).values as TypedArray;\n  const imageVals = backend.data.get(image.dataId).values as TypedArray;\n\n  const inStride =\n      util.computeStrides(image.shape);  // to calculate flat indexes into image\n  const outStride = util.computeStrides(\n      output.shape);  // to calculate flat indexes into output\n\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc\n  for (let b = 0; b < numBoxes; b++) {\n    const startInd = b * 4;\n    const y1 = boxVals[startInd];\n    const x1 = boxVals[startInd + 1];\n    const y2 = boxVals[startInd + 2];\n    const x2 = boxVals[startInd + 3];\n\n    const bInd: number = boxIndVals[b];\n    if (bInd >= batch) {\n      continue;\n    }\n\n    const heightScale =\n        (cropHeight > 1) ? (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) : 0;\n    const widthScale =\n        (cropWidth > 1) ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n\n    for (let y = 0; y < cropHeight; y++) {\n      const yInd: number = (cropHeight > 1) ?\n          y1 * (imageHeight - 1) + y * (heightScale) :\n          0.5 * (y1 + y2) * (imageHeight - 1);\n\n      if (yInd < 0 || yInd > imageHeight - 1) {\n        for (let x = 0; x < cropWidth; x++) {\n          for (let c = 0; c < numChannels; c++) {\n            const ind =\n                c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = extrapolationValue;\n          }\n        }\n        continue;\n      }\n\n      if (method === 'bilinear') {\n        const topInd = Math.floor(yInd);\n        const bottomInd = Math.ceil(yInd);\n        const yLerp = yInd - topInd;\n\n        for (let x = 0; x < cropWidth; x++) {\n          const xInd = (cropWidth > 1) ?\n              x1 * (imageWidth - 1) + x * widthScale :\n              0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n\n          const leftInd = Math.floor(xInd);\n          const rightInd = Math.ceil(xInd);\n          const xLerp = xInd - leftInd;\n\n          for (let c = 0; c < numChannels; c++) {\n            let ind = c + leftInd * inStride[2] + topInd * inStride[1] +\n                bInd * inStride[0];\n            const topLeft = imageVals[ind];\n\n            ind = c + rightInd * inStride[2] + topInd * inStride[1] +\n                bInd * inStride[0];\n            const topRight = imageVals[ind];\n\n            ind = c + leftInd * inStride[2] + bottomInd * inStride[1] +\n                bInd * inStride[0];\n            const bottomLeft = imageVals[ind];\n\n            ind = c + rightInd * inStride[2] + bottomInd * inStride[1] +\n                bInd * inStride[0];\n            const bottomRight = imageVals[ind];\n\n            const top = topLeft + (topRight - topLeft) * xLerp;\n            const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n\n            ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = top + ((bottom - top) * yLerp);\n          }\n        }\n      } else {  // method == \"nearest\"\n        for (let x = 0; x < cropWidth; ++x) {\n          const xInd = (cropWidth > 1) ?\n              x1 * (imageWidth - 1) + x * widthScale :\n              0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n\n          const closestX = Math.round(xInd);\n          const closestY = Math.round(yInd);\n          for (let c = 0; c < numChannels; c++) {\n            const inInd = c + closestX * inStride[2] + closestY * inStride[1] +\n                bInd * inStride[0];\n            const outInd =\n                c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[outInd] = imageVals[inInd];\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(output.shape, output.dtype, output.values);\n}\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'cpu',\n  kernelFunc: cropAndResize as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Cumprod, CumprodAttrs, CumprodInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function cumprod(\n    args: {inputs: CumprodInputs, backend: MathBackendCPU,\n           attrs: CumprodAttrs}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  assertNotComplex(x, 'cumprod');\n\n  const permutation = backend_util.getAxesPermutation([axis], x.shape.length);\n  let $x = x;\n  if (permutation != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, x.shape.length)[0];\n\n  if (permutedAxis !== $x.shape.length - 1) {\n    throw new Error(\n        `backend.cumprod in CPU expects an inner-most ` +\n        `axis=${$x.shape.length - 1} but got axis=${permutedAxis}`);\n  }\n\n  const resultDtype = upcastType($x.dtype, 'int32');\n  const vals = util.makeOnesTypedArray(\n                   util.sizeFromShape($x.shape), resultDtype) as TypedArray;\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  const finalDim = $x.shape[$x.shape.length - 1];\n  const indexAdjuster = reverse ?\n      (i: number, j: number) => i + finalDim - j - 1 :\n      (i: number, j: number) => i + j;\n  for (let i = 0; i < aVals.length; i += finalDim) {\n    for (let j = 0; j < finalDim; j++) {\n      const idx = indexAdjuster(i, j);\n      if (j === 0) {\n        vals[idx] = exclusive ? 1 : aVals[idx];\n      } else {\n        const prevIdx = indexAdjuster(i, j - 1);\n        vals[idx] = exclusive ? aVals[prevIdx] * vals[prevIdx] :\n                                aVals[idx] * vals[prevIdx];\n      }\n    }\n  }\n\n  const result = backend.makeTensorInfo($x.shape, resultDtype, vals);\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo($x);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n\nexport const cumprodConfig: KernelConfig = {\n  kernelName: Cumprod,\n  backendName: 'cpu',\n  kernelFunc: cumprod as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Cumsum, CumsumAttrs, CumsumInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function cumsum(\n    args: {inputs: CumsumInputs, backend: MathBackendCPU, attrs: CumsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  assertNotComplex(x, 'cumsum');\n\n  const permutation = backend_util.getAxesPermutation([axis], x.shape.length);\n  let $x = x;\n  if (permutation != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, x.shape.length)[0];\n\n  if (permutedAxis !== $x.shape.length - 1) {\n    throw new Error(\n        `backend.cumsum in CPU expects an inner-most ` +\n        `axis=${$x.shape.length - 1} but got axis=${permutedAxis}`);\n  }\n\n  const resultDtype = upcastType($x.dtype, 'int32');\n  const vals = util.makeZerosTypedArray(\n                   util.sizeFromShape($x.shape), resultDtype) as TypedArray;\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  const finalDim = $x.shape[$x.shape.length - 1];\n  const indexAdjuster = reverse ?\n      (i: number, j: number) => i + finalDim - j - 1 :\n      (i: number, j: number) => i + j;\n  for (let i = 0; i < aVals.length; i += finalDim) {\n    for (let j = 0; j < finalDim; j++) {\n      const idx = indexAdjuster(i, j);\n      if (j === 0) {\n        vals[idx] = exclusive ? 0 : aVals[idx];\n      } else {\n        const prevIdx = indexAdjuster(i, j - 1);\n        vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] :\n                                aVals[idx] + vals[prevIdx];\n      }\n    }\n  }\n\n  const result = backend.makeTensorInfo($x.shape, resultDtype, vals);\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo($x);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n\nexport const cumsumConfig: KernelConfig = {\n  kernelName: Cumsum,\n  backendName: 'cpu',\n  kernelFunc: cumsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {bincountImpl, bincountReduceImpl} from './Bincount_impl';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: MathBackendCPU,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  if (x.shape.length === 1) {\n    const xVals = backend.data.get(x.dataId).values as TypedArray;\n    const weightsVals = backend.data.get(weights.dataId).values as TypedArray;\n\n    const outVals =\n        bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync<Rank, 'float32'>(x);\n    const weightsBuf = backend.bufferSync<Rank, 'float32'>(weights);\n\n    const outBuf = bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput);\n\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(\n      `Error in denseBincount: input must be at most rank 2, but got rank` +\n      `${x.shape.length}.`);\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'cpu',\n  kernelFunc: denseBincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function depthToSpace(args: {\n  inputs: DepthToSpaceInputs,\n  backend: MathBackendCPU,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  util.assert(\n      dataFormat === 'NHWC',\n      () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${\n          dataFormat}`);\n\n  const batchSize = x.shape[0];\n  const inputHeight = x.shape[1];\n  const inputWidth = x.shape[2];\n  const inputDepth = x.shape[3];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const result =\n      new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n\n  let outputIdx = 0;\n  for (let b = 0; b < batchSize; ++b) {\n    for (let h = 0; h < outputHeight; ++h) {\n      const inH = Math.floor(h / blockSize);\n      const offsetH = (h % blockSize);\n      for (let w = 0; w < outputWidth; ++w) {\n        const inW = Math.floor(w / blockSize);\n        const offsetW = (w % blockSize);\n        const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n        for (let d = 0; d < outputDepth; ++d) {\n          const inD = d + offsetD;\n          const inputIdx =\n              inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n          result[outputIdx++] = xValues[inputIdx];\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batchSize, outputHeight, outputWidth, outputDepth], x.dtype, result);\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'cpu',\n  kernelFunc: depthToSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'depthwiseConv2DNative');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const {filterHeight, filterWidth, dilationHeight, dilationWidth, padInfo} =\n      convInfo;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * y.strides[1];\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xStrides[1];\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * y.strides[2];\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * convInfo.inChannels;\n            let yOffset4 = yOffset3;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1];\n              for (let q = 0; q < chMul; ++q) {\n                yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];\n              }\n              yOffset4 += chMul;\n              wOffset3 += chMul;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNative as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropFilter(args: {\n  inputs: DepthwiseConv2dNativeBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'depthwiseConv2dNativeBackpropFilter');\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n        const d1 = Math.trunc(d2 / chMul);\n        const dm = d2 % chMul;\n\n        let dotProd = 0;\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n          for (let yR = yRMin; yR < yRMax; ++yR) {\n            const xR = wR + yR * strideHeight - topPad;\n            for (let yC = yCMin; yC < yCMax; ++yC) {\n              const xC = wC + yC * strideWidth - leftPad;\n              dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                  (dyBuf.get(b, yR, yC, d2) as number);\n            }\n          }\n        }\n        dW.set(dotProd, wR, wC, d1, dm);\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const depthwiseConv2dNativeBackpropFilterConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropInput(args: {\n  inputs: DepthwiseConv2dNativeBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, inputShape} = attrs;\n\n  assertNotComplex([dy, filter], 'depthwiseConv2DNativeBackpropInput');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  const chMul = outChannels / inChannels;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let dm = 0; dm < chMul; ++dm) {\n                const d2 = d1 * chMul + dm;\n                const pixel = dyValues[dyOffset + d2];\n                const weight = fltValues[fltOffset + dm];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const depthwiseConv2dNativeBackpropInputConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropInput as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function diag(args: {inputs: DiagInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const xSize = util.sizeFromShape(x.shape);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = buffer([xSize, xSize], x.dtype);\n  const vals = outBuf.values;\n  for (let i = 0; i < xVals.length; i++) {\n    vals[i * xSize + i] = xVals[i];\n  }\n\n  const outShape = [...x.shape, ...x.shape];\n\n  return backend.makeTensorInfo(outShape, outBuf.dtype, outBuf.values);\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'cpu',\n  kernelFunc: diag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2DConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter} = inputs as Dilation2DInputs;\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xRank = x.shape.length;\n\n    const filterVals = cpuBackend.data.get(filter.dataId).values as TypedArray;\n    const filterRank = filter.shape.length;\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    const outSize = util.sizeFromShape(outShape);\n    const outRank = outShape.length;\n    const outputVals = util.getArrayFromDType(x.dtype, outSize);\n\n    // Upsampling the input by fill in `dilation size - 1` values between each\n    // input value.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const xIndex = util.locToIndex(\n                        [b, hIn, wIn, d], xRank, util.computeStrides(x.shape));\n                    const filterIndex = util.locToIndex(\n                        [h, w, d], filterRank,\n                        util.computeStrides(filter.shape));\n                    const val = xVals[xIndex] + filterVals[filterIndex];\n                    if (val > curVal) {\n                      curVal = val;\n                    }\n                  }\n                }\n              }\n            }\n            const outputIndex = util.locToIndex(\n                [b, hOut, wOut, d], outRank, util.computeStrides(outShape));\n            outputVals[outputIndex] = curVal;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(outputVals, x.dtype), outShape, x.dtype);\n\n    return {dataId, shape: outShape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropFilter, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropFilter}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed filter gradients has the same dimensions as the filter:\n    // [filterHeight, filterWidth, depth]\n    const gradients = util.makeZerosNestedTypedArray(\n                          filter.shape, filter.dtype) as number[][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hMax = 0;\n            let wMax = 0;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hMax = h;\n                      wMax = w;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[hMax][wMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), filter.shape, filter.dtype);\n\n    return {dataId, shape: filter.shape, dtype: filter.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropInput, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2DBackpropInputConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropInput}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed gradients has the same dimensions as the input:\n    // [batch, inputHeight, inputCols, inChannel]\n    const gradients =\n        util.makeZerosNestedTypedArray(x.shape, x.dtype) as number[][][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hInMax = (hBeg < 0) ? 0 : hBeg;\n            let wInMax = (wBeg < 0) ? 0 : wBeg;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hInMax = hIn;\n                      wInMax = wIn;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[b][hInMax][wInMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), x.shape, x.dtype);\n\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Sum, SumAttrs, SumInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {zeros} from '../utils/zeros_impl';\nimport {cast} from './Cast';\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function sum(\n    args: {inputs: SumInputs, backend: MathBackendCPU, attrs: SumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'sum');\n\n  let $x;\n  if (x.dtype === 'bool') {\n    $x = cast({inputs: {x}, backend, attrs: {dtype: 'int32'}});\n  } else {\n    $x = identity({inputs: {x}, backend});\n  }\n\n  const xRank = $x.shape.length;\n  const axes = util.parseAxisParam(axis, $x.shape);\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n\n  let reductionAxes = axes;\n  let permutedX = $x;\n  if (permutation != null) {\n    permutedX =\n        transpose({inputs: {x: $x}, backend, attrs: {perm: permutation}});\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims(\n      'sum', reductionAxes, permutedX.shape.length);\n\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, reductionAxes);\n  const resultDtype = backend_util.upcastType(permutedX.dtype, 'int32');\n  let result = zeros(backend, outShape, resultDtype);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = backend.data.get(result.dataId).values as TypedArray;\n\n  const aVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let sum = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      sum += aVals[offset + j];\n    }\n    vals[i] = sum;\n  }\n\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(result.shape, axes);\n    const oldResult = result;\n    result = reshape({inputs: {x: result}, backend, attrs: {shape: newShape}});\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  backend.disposeIntermediateTensorInfo($x);\n\n  if (permutation != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return result;\n}\n\nexport const sumConfig: KernelConfig = {\n  kernelName: Sum,\n  backendName: 'cpu',\n  kernelFunc: sum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Einsum, EinsumAttrs, EinsumInputs, KernelConfig, KernelFunc, Tensor, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\nexport function einsum(\n    args: {inputs: EinsumInputs, backend: MathBackendCPU, attrs: EinsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {equation} = attrs;\n  const tensors = inputs as Tensor[];\n\n  const {allDims, summedDims, idDims} =\n      backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {path, steps} = backend_util.getEinsumComputePath(summedDims, idDims);\n\n  const nSteps = steps.length;\n  let out: TensorInfo|null = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose: TensorInfo[] = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {permutationIndices: perm, expandDims: dimsToExpand} =\n          backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x: TensorInfo;\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({inputs: {x: tensors[idTerm]}, backend, attrs: {perm}});\n        tensorsToDispose.push(x);\n      }\n      const targetShape: number[] = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({inputs: {x}, backend, attrs: {shape: targetShape}});\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out = multiply({inputs: {a: x, b: out}, backend}) as TensorInfo;\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {x: out},\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n\n  // Clean up intermediate tensors.\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n\n  return out;\n}\n\nexport const einsumConfig: KernelConfig = {\n  kernelName: Einsum,\n  backendName: 'cpu',\n  kernelFunc: einsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {EluGrad, EluGradInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function eluGrad(args: {inputs: EluGradInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {dy, y} = inputs;\n\n  assertNotComplex([dy, y], 'eluGrad');\n\n  const resultValues = new Float32Array(util.sizeFromShape(y.shape));\n  const values = backend.data.get(y.dataId).values as TypedArray;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  for (let i = 0; i < values.length; ++i) {\n    const v = values[i];\n    if (v >= 1) {\n      resultValues[i] = dyValues[i];\n    } else {\n      resultValues[i] = dyValues[i] * (v + 1);\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, 'float32', resultValues);\n}\n\nexport const eluGradConfig: KernelConfig = {\n  kernelName: EluGrad,\n  backendName: 'cpu',\n  kernelFunc: eluGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Erf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nconst p = backend_util.ERF_P;\nconst a1 = backend_util.ERF_A1;\nconst a2 = backend_util.ERF_A2;\nconst a3 = backend_util.ERF_A3;\nconst a4 = backend_util.ERF_A4;\nconst a5 = backend_util.ERF_A5;\n\nexport const erf = unaryKernelFunc(\n    Erf,\n    (xi) => {\n      const sign = Math.sign(xi);\n      const v = Math.abs(xi);\n      const t = 1.0 / (1.0 + p * v);\n      return sign *\n          (1.0 -\n           (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t *\n               Math.exp(-v * v));\n    },\n);\n\nexport const erfConfig: KernelConfig = {\n  kernelName: Erf,\n  backendName: 'cpu',\n  kernelFunc: erf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {reshape} from './Reshape';\n\nexport function expandDims(args: {\n  inputs: ExpandDimsInputs,\n  backend: MathBackendCPU,\n  attrs: ExpandDimsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {input} = inputs;\n  const {dim} = attrs;\n\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(\n        -(inputRank + 1) <= dim,\n        () => `Axis must be in the interval [${- (inputRank + 1)}, ${\n            inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n\n  return reshape({inputs: {x: input}, backend, attrs: {shape: newShape}});\n}\n\nexport const expandDimsConfig: KernelConfig = {\n  kernelName: ExpandDims,\n  backendName: 'cpu',\n  kernelFunc: expandDims as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, RealDiv} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const realDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a / b);\nexport const div = binaryKernelFunc(RealDiv, realDivImpl);\n\nexport const realDivConfig: KernelConfig = {\n  kernelName: RealDiv,\n  backendName: 'cpu',\n  kernelFunc: div\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Tensor, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {add} from '../kernels/Add';\nimport {complex} from '../kernels/Complex';\nimport {concat} from '../kernels/Concat';\nimport {identity} from '../kernels/Identity';\nimport {imag} from '../kernels/Imag';\nimport {multiply} from '../kernels/Multiply';\nimport {real} from '../kernels/Real';\nimport {realDivConfig} from '../kernels/RealDiv';\nimport {slice} from '../kernels/Slice';\nimport {sub} from '../kernels/Sub';\n\n/**\n * Calculate FFT of inner most elements of batch tensor.\n */\nexport function fftBatch(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): TensorInfo {\n  const inputShape = input.shape;\n  const batch = inputShape[0];\n  const innerDim = inputShape[1];\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const real2D = inputVals.complexTensorInfos.real;\n  const imag2D = inputVals.complexTensorInfos.imag;\n\n  // Collects real and imaginary values separately.\n  const resultShape = [batch, innerDim];\n  const resultSize = util.sizeFromShape(resultShape);\n  const resultReal = util.getTypedArrayFromDType('float32', resultSize);\n  const resultImag = util.getTypedArrayFromDType('float32', resultSize);\n\n  for (let b = 0; b < batch; b++) {\n    // TODO: Support slice ops for complex type.\n    const r = slice({\n      inputs: {x: real2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n    const i = slice({\n      inputs: {x: imag2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n\n    const input = complex({inputs: {real: r, imag: i}, backend: cpuBackend});\n\n    // Run FFT by batch element.\n    const {real, imag} = fftImpl(input, inverse, cpuBackend);\n    const res = backend_util.mergeRealAndImagArrays(real, imag);\n\n    for (let d = 0; d < innerDim; d++) {\n      const c = backend_util.getComplexWithIndex(res, d);\n      resultReal[b * innerDim + d] = c.real;\n      resultImag[b * innerDim + d] = c.imag;\n    }\n\n    cpuBackend.disposeIntermediateTensorInfo(r);\n    cpuBackend.disposeIntermediateTensorInfo(i);\n    cpuBackend.disposeIntermediateTensorInfo(input);\n  }\n\n  const $realInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultReal);\n  const $imagInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultImag);\n\n  const result = complex(\n      {inputs: {real: $realInfo, imag: $imagInfo}, backend: cpuBackend});\n\n  cpuBackend.disposeIntermediateTensorInfo($realInfo);\n  cpuBackend.disposeIntermediateTensorInfo($imagInfo);\n\n  return result;\n}\n\nexport function fftImpl(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  const inputSize = util.sizeFromShape(input.shape);\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const realVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.real.dataId).values as\n      Float32Array;\n\n  const imagVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.imag.dataId).values as\n      Float32Array;\n\n  if (isExponentOf2(inputSize)) {\n    const result =\n        fftRadix2(realVals, imagVals, inputSize, inverse, cpuBackend);\n\n    const resultShape = [input.shape[0], input.shape[1]];\n\n    if (inverse) {\n      const realInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.real);\n      const imagInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.imag);\n\n      const sizeInfo: TensorInfo = cpuBackend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(inputSize as {} as 'float32', 'float32'));\n      const sizeInfoCopy =\n          identity({inputs: {x: sizeInfo}, backend: cpuBackend});\n\n      const divRealInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: realInfo, b: sizeInfo}, backend: cpuBackend}) as\n          TensorInfo;\n      const divImagInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: imagInfo, b: sizeInfoCopy}, backend: cpuBackend}) as\n          TensorInfo;\n\n      const divRealVals =\n          cpuBackend.data.get(divRealInfo.dataId).values as Float32Array;\n      const divImagVals =\n          cpuBackend.data.get(divImagInfo.dataId).values as Float32Array;\n\n      cpuBackend.disposeIntermediateTensorInfo(realInfo);\n      cpuBackend.disposeIntermediateTensorInfo(imagInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfoCopy);\n      cpuBackend.disposeIntermediateTensorInfo(divRealInfo);\n      cpuBackend.disposeIntermediateTensorInfo(divImagInfo);\n\n      return {real: divRealVals, imag: divImagVals};\n    }\n\n    return result;\n  } else {\n    const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n    const rawOutput =\n        fourierTransformByMatmul(data, inputSize, inverse) as Float32Array;\n\n    return backend_util.splitRealAndImagArrays(rawOutput);\n  }\n}\n\nfunction isExponentOf2(size: number): boolean {\n  return (size & size - 1) === 0;\n}\n\n// FFT using Cooley-Tukey algorithm on radix 2 dimensional input.\nfunction fftRadix2(\n    realVals: Float32Array, imagVals: Float32Array, size: number,\n    inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  if (size === 1) {\n    return {real: realVals, imag: imagVals};\n  }\n\n  const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n  const half = size / 2;\n\n  const evenComplex = backend_util.complexWithEvenIndex(data);\n\n  const evenRealVals = evenComplex.real;\n  const evenImagVals = evenComplex.imag;\n\n  const evenShape = [evenRealVals.length];\n\n  const evenRealInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenRealVals);\n  const evenImagInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenImagVals);\n\n  const evenTensorInfo = complex(\n      {inputs: {real: evenRealInfo, imag: evenImagInfo}, backend: cpuBackend});\n\n  const oddComplex = backend_util.complexWithOddIndex(data);\n\n  const oddRealVals = oddComplex.real;\n  const oddImagVals = oddComplex.imag;\n\n  const oddShape = [oddRealVals.length];\n\n  const oddRealInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddRealVals);\n  const oddImagInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddImagVals);\n\n  const oddTensorInfo = complex(\n      {inputs: {real: oddRealInfo, imag: oddImagInfo}, backend: cpuBackend});\n\n  // Recursive call for half part of original input.\n  const $evenComplex =\n      fftRadix2(evenRealVals, evenImagVals, half, inverse, cpuBackend);\n\n  const $evenRealVals = $evenComplex.real;\n  const $evenImagVals = $evenComplex.imag;\n\n  const $evenShape = [$evenRealVals.length];\n\n  const $evenRealInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenRealVals);\n  const $evenImagInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenImagVals);\n\n  const $evenTensorInfo = complex({\n    inputs: {real: $evenRealInfo, imag: $evenImagInfo},\n    backend: cpuBackend\n  });\n\n  const $oddComplex =\n      fftRadix2(oddRealVals, oddImagVals, half, inverse, cpuBackend);\n\n  const $oddRealVals = $oddComplex.real;\n  const $oddImagVals = $oddComplex.imag;\n\n  const $oddShape = [$oddRealVals.length];\n\n  const $oddRealInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddRealVals);\n  const $oddImagInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddImagVals);\n\n  const $oddTensorInfo = complex(\n      {inputs: {real: $oddRealInfo, imag: $oddImagInfo}, backend: cpuBackend});\n\n  const e = backend_util.exponents(size, inverse);\n  const eShape = [e.real.length];\n\n  const eRealInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.real);\n  const eImagInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.imag);\n\n  const complexInfo = complex(\n      {inputs: {real: eRealInfo, imag: eImagInfo}, backend: cpuBackend});\n\n  const exponentInfo =\n      multiply(\n          {inputs: {a: complexInfo, b: $oddTensorInfo}, backend: cpuBackend}) as\n      TensorInfo;\n\n  const addPart = add({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n  const subPart = sub({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n\n  const addPartReal = real({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartReal = real({inputs: {input: subPart}, backend: cpuBackend});\n\n  const addPartImag = imag({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartImag = imag({inputs: {input: subPart}, backend: cpuBackend});\n\n  const $real = concat({\n    inputs: [addPartReal as Tensor, subPartReal as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n  const $imag = concat({\n    inputs: [addPartImag as Tensor, subPartImag as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n\n  const $realVals = cpuBackend.data.get($real.dataId).values as Float32Array;\n  const $imagVals = cpuBackend.data.get($imag.dataId).values as Float32Array;\n\n  cpuBackend.disposeIntermediateTensorInfo(evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(complexInfo);\n  cpuBackend.disposeIntermediateTensorInfo(exponentInfo);\n  cpuBackend.disposeIntermediateTensorInfo(addPart);\n  cpuBackend.disposeIntermediateTensorInfo(subPart);\n  cpuBackend.disposeIntermediateTensorInfo(addPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(addPartImag);\n  cpuBackend.disposeIntermediateTensorInfo(subPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(subPartImag);\n  cpuBackend.disposeIntermediateTensorInfo($real);\n  cpuBackend.disposeIntermediateTensorInfo($imag);\n\n  return {real: $realVals, imag: $imagVals};\n}\n\n// Calculate fourier transform by multplying sinusoid matrix.\nfunction fourierTransformByMatmul(\n    data: TypedArray, size: number, inverse: boolean): TypedArray {\n  const ret = new Float32Array(size * 2);\n  // TODO: Use matmul instead once it supports complex64 type.\n  for (let r = 0; r < size; r++) {\n    let real = 0.0;\n    let imag = 0.0;\n    for (let c = 0; c < size; c++) {\n      const e = backend_util.exponent(r * c, size, inverse);\n      const term = backend_util.getComplexWithIndex(data as Float32Array, c);\n      real += term.real * e.real - term.imag * e.imag;\n      imag += term.real * e.imag + term.imag * e.real;\n    }\n    if (inverse) {\n      real /= size;\n      imag /= size;\n    }\n    backend_util.assignToTypedArray(ret, real, imag, r);\n  }\n  return ret;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FFT, FFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function fft(args: {inputs: FFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, false, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const fftConfig: KernelConfig = {\n  kernelName: FFT,\n  backendName: 'cpu',\n  kernelFunc: fft as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, DataValues, Fill, FillAttrs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function fill(args: {backend: MathBackendCPU, attrs: FillAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {shape, value, dtype} = attrs;\n\n  const $dtype = dtype || util.inferDtype(value);\n  const values = util.getArrayFromDType($dtype, util.sizeFromShape(shape));\n  fillValues(values, value, $dtype);\n\n  return backend.makeTensorInfo(shape, $dtype, values);\n}\n\nexport const fillConfig: KernelConfig = {\n  kernelName: Fill,\n  backendName: 'cpu',\n  kernelFunc: fill as {} as KernelFunc\n};\n\nfunction fillValues(\n    values: DataValues, value: string|number, dtype: DataType): void {\n  if (dtype === 'string') {\n    (values as string[]).fill(value as string);\n  } else {\n    (values as TypedArray).fill(value as number);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as FlipLeftRightInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coordX = Math.round(imageWidth - col - 1);\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n\n            let outputValue = imageVals[outIdx];\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth) {\n              // set the output to the image value at the coordinate position.\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n            output[outIdx] = outputValue;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const floorDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.floor(a / b));\nexport const floorDiv =\n    binaryKernelFunc(FloorDiv, floorDivImpl, null /* complexImpl */, 'int32');\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'cpu',\n  kernelFunc: floorDiv\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {conv2D} from './Conv2D';\nimport {reshape} from './Reshape';\n\nexport function fusedConv2D(args: {\n  inputs: FusedConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = conv2D({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const resultOld = result;\n    // For NCHW format, if bias is a 1-D tensor, it is supposed to be aligned\n    // to the channel of the conv2d's result; if the bias is a scalar, the\n    // bias_add is computed as if the bias was broadcasted to the shape of the\n    // conv2d's result.\n    if (dataFormat === 'NCHW' && bias.shape.length === 1 &&\n        bias.shape[0] !== 1) {\n      const reshapedBias = reshape(\n          {inputs: {x: bias}, backend, attrs: {shape: [bias.shape[0], 1, 1]}});\n      result =\n          add({inputs: {a: result, b: reshapedBias}, backend}) as TensorInfo;\n      backend.disposeIntermediateTensorInfo(reshapedBias);\n    } else {\n      // This condition handles NHWC and NCHW (scalar case). The only other case\n      // for NCHW (1D case) is handled above.\n      result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    }\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  if (activation) {\n    const resultOld = result;\n    // For NCHW format, if PReLu activation weights is a 1-D tensor, it is\n    // supposed to be aligned with the channel of the conv2d's result. For other\n    // cases, whether NCHW or NHWC data format, the conv2d result is\n    // already aligned with the activation weights.\n    if (dataFormat === 'NCHW' && activation === 'prelu' &&\n        preluActivationWeights.shape.length === 1 &&\n        preluActivationWeights.shape[0] !== 1) {\n      const reshapedAlpha = reshape({\n        inputs: {x: preluActivationWeights},\n        backend,\n        attrs: {shape: [preluActivationWeights.shape[0], 1, 1]}\n      });\n      result = applyActivation(\n          backend, result, activation, reshapedAlpha, leakyreluAlpha);\n      backend.disposeIntermediateTensorInfo(reshapedAlpha);\n    } else {\n      result = applyActivation(\n          backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    }\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  return result;\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedConv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {depthwiseConv2dNative} from './DepthwiseConv2dNative';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedDepthwiseConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = depthwiseConv2dNative({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const oldResult = result;\n    result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n  if (activation) {\n    const oldResult = result;\n    result = applyActivation(\n        backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedDepthwiseConv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {gatherNdImpl} from './GatherNd_Impl';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n  if (numSlices === 0) {\n    return backend.makeTensorInfo(resultShape, params.dtype, []);\n  }\n\n  const indicesData = backend.data.get(indices.dataId).values as TypedArray;\n  const paramsBuf = backend.bufferSync<Rank, 'float32'>(params);\n  const outBuf = gatherNdImpl(\n      indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize,\n      strides, params.shape, paramsSize);\n\n  return backend.makeTensorInfo(resultShape, params.dtype, outBuf.values);\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'cpu',\n  kernelFunc: gatherNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {gatherV2Impl} from './GatherV2_impl';\nimport {reshape} from './Reshape';\n\nexport function gatherV2(args: {\n  inputs: GatherV2Inputs,\n  backend: MathBackendCPU,\n  attrs: GatherV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  assertNotComplex([x, indices], 'gatherV2');\n\n  // Throw error when any index is out of bound.\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  const indicesVals = backend.data.get(indices.dataId).values as TypedArray;\n  const axisDim = x.shape[parsedAxis];\n  for (let i = 0; i < indicesVals.length; ++i) {\n    const index = indicesVals[i];\n    util.assert(\n        index <= axisDim - 1 && index >= 0,\n        () =>\n            `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);\n  }\n\n  let $batchDims = batchDims;\n\n  if (batchDims == null) {\n    $batchDims = 0;\n  }\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, $batchDims);\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  const indicesBuf = backend.bufferSync(flattenIndex);\n  const xBuf = backend.bufferSync(flattenX);\n  const outBuf = gatherV2Impl(xBuf, indicesBuf, flattenOutputShape);\n\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(flattenIndex);\n\n  return backend.makeTensorInfo(\n      shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'cpu',\n  kernelFunc: gatherV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IFFT, IFFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function ifft(args: {inputs: IFFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, true, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const ifftConfig: KernelConfig = {\n  kernelName: IFFT,\n  backendName: 'cpu',\n  kernelFunc: ifft as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsFinite, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isFinite =\n    unaryKernelFunc(IsFinite, (xi) => Number.isFinite(xi) ? 1 : 0, 'bool');\n\nexport const isFiniteConfig: KernelConfig = {\n  kernelName: IsFinite,\n  backendName: 'cpu',\n  kernelFunc: isFinite,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsInf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isInf =\n    unaryKernelFunc(IsInf, (xi) => Math.abs(xi) === Infinity ? 1 : 0, 'bool');\n\nexport const isInfConfig: KernelConfig = {\n  kernelName: IsInf,\n  backendName: 'cpu',\n  kernelFunc: isInf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsNan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isNaN =\n    unaryKernelFunc(IsNan, (xi) => Number.isNaN(xi) ? 1 : 0, 'bool');\n\nexport const isNaNConfig: KernelConfig = {\n  kernelName: IsNan,\n  backendName: 'cpu',\n  kernelFunc: isNaN,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LinSpace, LinSpaceAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {linSpaceImpl} from './LinSpace_impl';\n\nexport function linSpace(args: {backend: MathBackendCPU, attrs: LinSpaceAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, num} = attrs;\n\n  const outVals = linSpaceImpl(start, stop, num);\n\n  return backend.makeTensorInfo([outVals.length], 'float32', outVals);\n}\n\nexport const linSpaceConfig: KernelConfig = {\n  kernelName: LinSpace,\n  backendName: 'cpu',\n  kernelFunc: linSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log1p} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const log1p = unaryKernelFunc(Log1p, (xi) => Math.log1p(xi));\n\nexport const log1pConfig: KernelConfig = {\n  kernelName: Log1p,\n  backendName: 'cpu',\n  kernelFunc: log1p,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalAnd} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const logicalAndImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a && b);\nexport const logicalAnd = binaryKernelFunc(\n    LogicalAnd, logicalAndImpl, null /* complexImpl */, 'bool');\n\nexport const logicalAndConfig: KernelConfig = {\n  kernelName: LogicalAnd,\n  backendName: 'cpu',\n  kernelFunc: logicalAnd\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalNot} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const logicalNot =\n    unaryKernelFunc(LogicalNot, (xi) => xi ? 0 : 1, 'bool');\n\nexport const logicalNotConfig: KernelConfig = {\n  kernelName: LogicalNot,\n  backendName: 'cpu',\n  kernelFunc: logicalNot,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalOr} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const logicalOrImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a || b);\nexport const logicalOr =\n    binaryKernelFunc(LogicalOr, logicalOrImpl, null /* complexImpl */, 'bool');\n\nexport const logicalOrConfig: KernelConfig = {\n  kernelName: LogicalOr,\n  backendName: 'cpu',\n  kernelFunc: logicalOr\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRN, LRNAttrs, LRNInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function lRN(\n    args: {inputs: LRNInputs, backend: MathBackendCPU, attrs: LRNAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  assertNotComplex(x, 'LRN');\n\n  const channels = x.shape[3];\n  const maxD = channels - 1;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const size = util.sizeFromShape(x.shape);\n  const result = new Float32Array(size);\n\n  function sumAcrossChannels(offset: number) {\n    const currentChannel = offset % channels;\n    let beginSumOffset =\n        offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n    const endSumOffset =\n        offset - currentChannel + Math.min(currentChannel + depthRadius, maxD);\n\n    let sum = 0.0;\n    for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n      const z = xValues[beginSumOffset];\n      sum += z * z;\n    }\n    return sum;\n  }\n\n  for (let offset = 0; offset < size; offset++) {\n    const sum = sumAcrossChannels(offset);\n    const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n    result[offset] = val;\n  }\n\n  return backend.makeTensorInfo(x.shape, x.dtype, result);\n}\n\n// tslint:disable-next-line: variable-name\nexport const LRNConfig: KernelConfig = {\n  kernelName: LRN,\n  backendName: 'cpu',\n  kernelFunc: lRN as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRNGrad, LRNGradAttrs, LRNGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function lRNGrad(\n    args:\n        {inputs: LRNGradInputs, backend: MathBackendCPU, attrs: LRNGradAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, y, dy} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  assertNotComplex(dy, 'LRNGrad');\n\n  const dySize = util.sizeFromShape(dy.shape);\n\n  const channels = dy.shape[3];\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const yValues = backend.data.get(y.dataId).values as TypedArray;\n  const result = new Float32Array(dySize);\n  const size = dySize;\n\n  for (let offset = 0; offset < size; offset++) {\n    const currentChannel = offset % channels;\n    const depthBegin =\n        (offset - currentChannel) + Math.max(0, currentChannel - depthRadius);\n    const depthEnd = (offset - currentChannel) +\n        Math.min(channels, currentChannel + depthRadius + 1);\n\n    let norm = 0;\n    for (let k = depthBegin; k < depthEnd; k++) {\n      norm += Math.pow(xValues[k], 2);\n    }\n    norm = alpha * norm + bias;\n\n    for (let k = depthBegin; k < depthEnd; k++) {\n      let dyi = -2 * alpha * beta * xValues[k] * yValues[offset] / norm;\n      if (offset === k) {\n        dyi += Math.pow(norm, -beta);\n      }\n      dyi *= dyValues[offset];\n      result[k] += dyi;\n    }\n  }\n\n  return backend.makeTensorInfo(dy.shape, x.dtype, result);\n}\n\n// tslint:disable-next-line: variable-name\nexport const LRNGradConfig: KernelConfig = {\n  kernelName: LRNGrad,\n  backendName: 'cpu',\n  kernelFunc: lRNGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelFunc, Max, MaxAttrs, MaxInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig} from '@tensorflow/tfjs-core';\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl} from './Transpose_impl';\n\nexport function max(\n    args: {inputs: MaxInputs, backend: MathBackendCPU, attrs: MaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reductionIndices, keepDims} = attrs;\n  const cpuBackend = backend;\n  let xShape = x.shape;\n  const xRank = xShape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, xShape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n  if (permutedAxes != null) {\n    const newShape: number[] = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n      newShape[i] = xShape[permutedAxes[i]];\n    }\n\n    xVals = transposeImpl(xVals, xShape, x.dtype, permutedAxes, newShape);\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n\n    xShape = newShape;\n  }\n\n  assertNotComplex(x, 'max');\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  const [maxOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, axes);\n\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const result = maxImpl(xVals, reduceSize, maxOutShape, x.dtype);\n  const dataId = cpuBackend.write(result, maxOutShape, x.dtype);\n\n  let outShape = maxOutShape;\n  if (keepDims) {\n    // reshape\n    const newShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n    outShape = newShape;\n  }\n\n  return {dataId, shape: outShape, dtype: x.dtype};\n}\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'cpu',\n  kernelFunc: max as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function maxPool(\n    args:\n        {inputs: MaxPoolInputs, backend: MathBackendCPU, attrs: MaxPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'max');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'cpu',\n  kernelFunc: maxPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3D, MaxPool3DAttrs, MaxPool3DInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool3d} from '../utils/pool_utils';\n\nexport function maxPool3D(args: {\n  inputs: MaxPool3DInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n\n  assertNotComplex(x, 'maxPool3d');\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode, dataFormat);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = pool3d(\n      xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'max');\n\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\n\nexport const maxPool3DConfig: KernelConfig = {\n  kernelName: MaxPool3D,\n  backendName: 'cpu',\n  kernelFunc: maxPool3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPool3DGrad, MaxPool3DGradAttrs, MaxPool3DGradInputs, Rank, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPool3dPositions} from '../utils/pool_utils';\n\nexport function maxPool3DGrad(args: {\n  inputs: MaxPool3DGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, input], 'maxPool3DGrad');\n\n  const convInfo = backend_util.computePool3DInfo(\n      input.shape as [number, number, number, number, number], filterSize,\n      strides, 1 /* dilations */, pad, dimRoundingMode);\n\n  const inputBuf = backend.bufferSync(input);\n  const maxPosBuf = maxPool3dPositions(inputBuf, convInfo);\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n\n  const dyBuf = backend.bufferSync<Rank, 'float32'>(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                 wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                  Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight;\n                   wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                    Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth;\n                     wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                      Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const maxPos = effectiveFilterDepth * effectiveFilterHeight *\n                          effectiveFilterWidth -\n                      1 -\n                      (maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel) as\n                       number);\n                  const curPos =\n                      wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                      wRow * effectiveFilterWidth + wCol;\n\n                  const mask = maxPos === curPos ? 1 : 0;\n                  if (mask === 0) {\n                    continue;\n                  }\n\n                  const pixel =\n                      dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel * mask;\n                }\n              }\n            }\n            dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPool3DGradConfig: KernelConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs, Rank, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPoolPositions} from '../utils/pool_utils';\n\nexport function maxPoolGrad(args: {\n  inputs: MaxPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const maxPosBuf = buffer(\n      convInfo.outShape, x.dtype,\n      maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n              const maxPos = effectiveFilterHeight * effectiveFilterWidth - 1 -\n                  (maxPosBuf.get(b, dyR, dyC, d) as number);\n              const curPos = wR * effectiveFilterWidth + wC;\n\n              const mask = maxPos === curPos ? 1 : 0;\n              if (mask === 0) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel * mask;\n            }\n          }\n          dx.set(dotProd, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPoolGradConfig: KernelConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as {} as MaxPoolWithArgmaxAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'MaxPoolWithArgmax');\n\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        [1, 1], pad);\n    const [pooled, indexes] = maxPoolWithArgmaxImpl(\n        values, x.shape, x.dtype, includeBatchInIndex, convInfo);\n\n    const pooledDataId =\n        cpuBackend.write(pooled as Float32Array, convInfo.outShape, x.dtype);\n    const indexesDataId =\n        cpuBackend.write(indexes as Int32Array, convInfo.outShape, x.dtype);\n    return [\n      {dataId: pooledDataId, shape: convInfo.outShape, dtype: x.dtype},\n      {dataId: indexesDataId, shape: convInfo.outShape, dtype: 'int32'}\n    ];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {maxPoolPositions, pool} from '../utils/pool_utils';\nexport function maxPoolWithArgmaxImpl(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    includeBatchInIndex: boolean, convInfo: backend_util.Conv2DInfo) {\n  const strides = util.computeStrides(xShape);\n  const maxPools = pool(xValues, xShape, dtype, strides, convInfo, 'max');\n  const maxPositions = maxPoolPositions(\n      xValues, xShape, dtype, convInfo, true, includeBatchInIndex);\n\n  return [maxPools.values, maxPositions.values];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Mean, MeanAttrs, MeanInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {cast} from './Cast';\nimport {div} from './RealDiv';\nimport {sum} from './Sum';\n\nexport function mean(\n    args: {inputs: MeanInputs, backend: MathBackendCPU, attrs: MeanAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const axes = util.parseAxisParam(axis, x.shape);\n  const shapes = backend_util.computeOutAndReduceShapes(x.shape, axes);\n  const reduceShape = shapes[1];\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const toDispose = [];\n  const reduceSizeScalar =\n      backend.makeTensorInfo([], 'float32', new Float32Array([reduceSize]));\n  toDispose.push(reduceSizeScalar);\n\n  const $x = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n  toDispose.push($x);\n\n  const res =\n      div({inputs: {a: $x, b: reduceSizeScalar}, backend}) as TensorInfo;\n  toDispose.push(res);\n\n  const result = sum({inputs: {x: res}, backend, attrs: {axis, keepDims}});\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'cpu',\n  kernelFunc: mean as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Min, MinAttrs, MinInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function min(\n    args: {inputs: MinInputs, backend: MathBackendCPU, attrs: MinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'min');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('min', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value < min) {  // comparison with NaN always return false\n        min = value;\n      }\n    }\n    vals[i] = min;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const minConfig: KernelConfig = {\n  kernelName: Min,\n  backendName: 'cpu',\n  kernelFunc: min as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, MirrorPad, MirrorPadAttrs, MirrorPadInputs, NumericDataType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function mirrorPad(args: {\n  inputs: MirrorPadInputs,\n  backend: MathBackendCPU,\n  attrs: MirrorPadAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, mode} = attrs;\n\n  assertNotComplex(x, 'mirrorPad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n  const end = paddings.map((p, i) => p[0] + x.shape[i]);\n  const offset = mode === 'reflect' ? 0 : 1;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  for (let i = 0; i < resultSize; i++) {\n    let coords = util.indexToLoc(i, resultRank, resultStrides);\n    for (let i = 0; i < resultRank; i++) {\n      if (coords[i] < start[i]) {\n        coords[i] = start[i] * 2 - coords[i] - offset;\n      } else if (coords[i] >= end[i]) {\n        coords[i] = (end[i] - 1) * 2 - coords[i] + offset;\n      }\n    }\n    coords = coords.map((c, i) => c - start[i]);\n\n    const inIndex = util.locToIndex(coords, xRank, xStrides);\n\n    resVals[i] = xVals[inIndex];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'cpu',\n  kernelFunc: mirrorPad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Mod} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const modImpl =\n    createSimpleBinaryKernelImpl(((aValue: number, bValue: number) => {\n      const rem = aValue % bValue;\n      if ((aValue < 0 && bValue < 0) || (aValue >= 0 && bValue >= 0)) {\n        return rem;\n      } else {\n        return (rem + bValue) % bValue;\n      }\n    }));\n\nexport const mod = binaryKernelFunc(Mod, modImpl);\n\nexport const modConfig: KernelConfig = {\n  kernelName: Mod,\n  backendName: 'cpu',\n  kernelFunc: mod\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {exp} from './Exp';\nimport {max} from './Max';\nimport {div} from './RealDiv';\nimport {reshape} from './Reshape';\nimport {sub} from './Sub';\nimport {sum} from './Sum';\n\nexport function softmax(\n    args:\n        {inputs: SoftmaxInputs, backend: MathBackendCPU, attrs: SoftmaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const logitsRank = logits.shape.length;\n\n  let $dim = dim;\n  if ($dim === -1) {\n    $dim = logitsRank - 1;\n  }\n  if ($dim !== logitsRank - 1) {\n    throw Error(\n        'Softmax along a non-last dimension is not yet supported. ' +\n        `Logits was rank ${logitsRank} and dim was ${$dim}`);\n  }\n\n  const axes = util.parseAxisParam([$dim], logits.shape);\n  const maxLogit = max({\n    inputs: {x: logits},\n    backend,\n    attrs: {reductionIndices: axes, keepDims: false}\n  });\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n  const maxLogitReshaped =\n      reshape({inputs: {x: maxLogit}, backend, attrs: {shape: expandedShape}});\n  const a =\n      sub({inputs: {a: logits, b: maxLogitReshaped}, backend}) as TensorInfo;\n  const b = exp({inputs: {x: a}, backend}) as TensorInfo;\n  const sumExp =\n      sum({inputs: {x: b}, backend, attrs: {axis: axes, keepDims: false}});\n  const sumReshaped =\n      reshape({inputs: {x: sumExp}, backend, attrs: {shape: expandedShape}});\n\n  const result = div({inputs: {a: b, b: sumReshaped}, backend}) as TensorInfo;\n\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumReshaped);\n\n  return result;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'cpu',\n  kernelFunc: softmax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {softmax} from './Softmax';\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  backend: MathBackendCPU,\n  attrs: MultinomialAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  assertNotComplex(logits, 'multinomial');\n\n  const probabilities = normalized ?\n      logits :\n      softmax({inputs: {logits}, backend, attrs: {dim: -1}});\n\n  const batchSize = probabilities.shape[0];\n  const numEvents = probabilities.shape[1];\n  const probVals = backend.data.get(probabilities.dataId).values as TypedArray;\n  const resShape = [batchSize, numSamples];\n  const resVals =\n      util.makeZerosTypedArray(util.sizeFromShape(resShape), 'int32');\n\n  for (let b = 0; b < batchSize; ++b) {\n    const offset = b * numEvents;\n    // The cdf won't include the last event. It will be implicit if no other\n    // event happened.\n    const cdf = new Float32Array(numEvents - 1);\n    cdf[0] = probVals[offset];\n    for (let event = 1; event < cdf.length; ++event) {\n      cdf[event] = cdf[event - 1] + probVals[offset + event];\n    }\n\n    const random = seedrandom.alea(seed.toString());\n    const outOffset = b * numSamples;\n    for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n      const r = random();\n\n      // Assume last event happened by default.\n      resVals[outOffset + sampleId] = cdf.length;\n\n      for (let event = 0; event < cdf.length; event++) {\n        if (r < cdf[event]) {\n          resVals[outOffset + sampleId] = event;\n          break;\n        }\n      }\n    }\n  }\n\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probabilities);\n  }\n\n  return backend.makeTensorInfo(resShape, 'int32', resVals);\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'cpu',\n  kernelFunc: multinomial as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV3(args: {\n  inputs: NonMaxSuppressionV3Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV3Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold} = attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppression');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const {selectedIndices} = nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n\n  return backend.makeTensorInfo(\n      [selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV3 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV4(args: {\n  inputs: NonMaxSuppressionV4Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV4Attrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize} =\n      attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppressionPadded');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n      padToMaxOutputSize);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))\n  ];\n}\nexport const nonMaxSuppressionV4Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV4 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV5(args: {\n  inputs: NonMaxSuppressionV5Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV5Attrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} = attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppressionWithScore');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n\n  const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n      boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n      scoreThresholdVal, softNmsSigmaVal);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo(\n        [selectedScores.length], 'float32', new Float32Array(selectedScores))\n  ];\n}\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV5 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OneHot, OneHotAttrs, OneHotInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function oneHot(\n    args: {inputs: OneHotInputs, backend: MathBackendCPU, attrs: OneHotAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices} = inputs;\n  const {dtype, depth, onValue, offValue} = attrs;\n\n  assertNotComplex(indices, 'oneHot');\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const res = new Float32Array(indicesSize * depth);\n  res.fill(offValue);\n  const indicesVal = backend.data.get(indices.dataId).values as TypedArray;\n\n  for (let event = 0; event < indicesSize; ++event) {\n    if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n      res[event * depth + indicesVal[event]] = onValue;\n    }\n  }\n\n  return backend.makeTensorInfo([...indices.shape, depth], dtype, res);\n}\n\nexport const oneHotConfig: KernelConfig = {\n  kernelName: OneHot,\n  backendName: 'cpu',\n  kernelFunc: oneHot as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, ZerosLike, ZerosLikeInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\n\nexport function zerosLike(\n    args: {inputs: ZerosLikeInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('zerosLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = zerosLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({backend, attrs: {shape: x.shape, value: 0, dtype: x.dtype}});\n  }\n}\n\nexport const zerosLikeConfig: KernelConfig = {\n  kernelName: ZerosLike,\n  backendName: 'cpu',\n  kernelFunc: zerosLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OnesLike, OnesLikeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {zerosLike} from './ZerosLike';\n\nexport function onesLike(\n    args: {inputs: OnesLikeInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = onesLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({backend, attrs: {shape: x.shape, value: 1, dtype: x.dtype}});\n  }\n}\n\nexport const onesLikeConfig: KernelConfig = {\n  kernelName: OnesLike,\n  backendName: 'cpu',\n  kernelFunc: onesLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pack, PackAttrs, PackInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {concat} from './Concat';\nimport {expandDims} from './ExpandDims';\n\nexport function pack(\n    args: {inputs: PackInputs, backend: MathBackendCPU, attrs: PackAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims(\n        {inputs: {input: inputs[0]}, backend, attrs: {dim: axis}});\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n\n  inputs.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n\n  const intermediateTensorInfos: TensorInfo[] = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT =\n        expandDims({inputs: {input: t}, backend, attrs: {dim: axis}});\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n\n  const result = concat({inputs: expandedTensors, backend, attrs: {axis}});\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const packConfig: KernelConfig = {\n  kernelName: Pack,\n  backendName: 'cpu',\n  kernelFunc: pack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function padV2(\n    args: {inputs: PadV2Inputs, backend: MathBackendCPU, attrs: PadV2Attrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, constantValue} = attrs;\n\n  assertNotComplex(x, 'pad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xSize = util.sizeFromShape(x.shape);\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  if (constantValue !== 0) {\n    resVals.fill(constantValue);\n  }\n\n  for (let i = 0; i < xSize; i++) {\n    const coords = util.indexToLoc(i, xRank, xStrides);\n    const outCoords = coords.map((c, i) => c + start[i]);\n    const outIndex = util.locToIndex(outCoords, resultRank, resultStrides);\n\n    resVals[outIndex] = xVals[i];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'cpu',\n  kernelFunc: padV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Pow} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const powImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.pow(a, b));\nexport const pow = binaryKernelFunc(Pow, powImpl);\n\nexport const powConfig: KernelConfig = {\n  kernelName: Pow,\n  backendName: 'cpu',\n  kernelFunc: pow\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedGather, RaggedGatherAttrs, RaggedGatherInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {raggedGatherImpl} from './RaggedGather_impl';\n\nexport function raggedGather(args: {\n  inputs: RaggedGatherInputs,\n  backend: MathBackendCPU,\n  attrs: RaggedGatherAttrs\n}): TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {paramsNestedSplits, paramsDenseValues, indices} = inputs;\n  const {outputRaggedRank} = attrs;\n\n  const $paramsNestedSplits = paramsNestedSplits.map(\n      t => backend.data.get(t.dataId).values as TypedArray);\n  const $paramsNestedSplitsShapes = paramsNestedSplits.map(t => t.shape);\n  const $paramsDenseValues =\n      backend.data.get(paramsDenseValues.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n\n  const [outputNestedSplits, outputDenseValues, outputDenseValuesShape] =\n      raggedGatherImpl(\n          $paramsNestedSplits, $paramsNestedSplitsShapes, $paramsDenseValues,\n          paramsDenseValues.shape, paramsDenseValues.dtype, $indices,\n          indices.shape, outputRaggedRank);\n\n  const outputNestedSplitsTensors = outputNestedSplits.map(\n      (splits) => backend.makeTensorInfo([splits.length], 'int32', splits));\n\n  const outputDenseValuesTensor = backend.makeTensorInfo(\n      outputDenseValuesShape, paramsDenseValues.dtype, outputDenseValues);\n\n  return outputNestedSplitsTensors.concat([outputDenseValuesTensor]);\n}\n\nexport const raggedGatherConfig: KernelConfig = {\n  kernelName: RaggedGather,\n  backendName: 'cpu',\n  kernelFunc: raggedGather as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedTensorToTensor, RaggedTensorToTensorAttrs, RaggedTensorToTensorInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {raggedTensorToTensorImpl} from './RaggedTensorToTensor_impl';\n\nexport function raggedTensorToTensor(args: {\n  inputs: RaggedTensorToTensorInputs,\n  backend: MathBackendCPU,\n  attrs: RaggedTensorToTensorAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {shape, values, defaultValue, rowPartitionTensors} = inputs;\n  const {rowPartitionTypes} = attrs;\n\n  const $shape = backend.data.get(shape.dataId).values as TypedArray;\n  const $values = backend.data.get(values.dataId).values as TypedArray;\n  const $defaultValue =\n      backend.data.get(defaultValue.dataId).values as TypedArray;\n  const $rowPartitionValues = rowPartitionTensors.map(\n      t => backend.data.get(t.dataId).values as TypedArray);\n  const rowPartitionValuesShapes = rowPartitionTensors.map(t => t.shape);\n\n  const [outputShape, output] = raggedTensorToTensorImpl(\n      $shape, shape.shape, $values, values.shape, values.dtype, $defaultValue,\n      defaultValue.shape, $rowPartitionValues, rowPartitionValuesShapes,\n      rowPartitionTypes);\n  return backend.makeTensorInfo(outputShape, values.dtype, output);\n}\n\nexport const raggedTensorToTensorConfig: KernelConfig = {\n  kernelName: RaggedTensorToTensor,\n  backendName: 'cpu',\n  kernelFunc: raggedTensorToTensor as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Range, RangeAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {rangeImpl} from './Range_impl';\n\nexport function range(args: {backend: MathBackendCPU, attrs: RangeAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, dtype, step} = attrs;\n\n  const values = rangeImpl(start, stop, step, dtype);\n  return backend.makeTensorInfo([values.length], dtype, values);\n}\n\nexport const rangeConfig: KernelConfig = {\n  kernelName: Range,\n  backendName: 'cpu',\n  kernelFunc: range as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Reciprocal} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const reciprocal = unaryKernelFunc(Reciprocal, (xi) => 1 / xi);\n\nexport const reciprocalConfig: KernelConfig = {\n  kernelName: Reciprocal,\n  backendName: 'cpu',\n  kernelFunc: reciprocal,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeBilinear');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const result = new Float32Array(\n      util.sizeFromShape([batch, newHeight, newWidth, numChannels]));\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n  let outputIdx = 0;\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n  for (let b = 0; b < batch; b++) {\n    for (let r = 0; r < newHeight; r++) {\n      let sourceFracRow: number;\n      if (halfPixelCenters) {\n        sourceFracRow = effectiveRowSizeRatio * (r + 0.5) - 0.5;\n      } else {\n        sourceFracRow = effectiveRowSizeRatio * r;\n      }\n\n      const sourceRowFloor = Math.max(0, Math.floor(sourceFracRow));\n      const rowFrac = sourceFracRow - sourceRowFloor;\n      const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\n      const topRowOffset =\n          b * imagesStrides[0] + sourceRowFloor * imagesStrides[1];\n      const botRowOffset =\n          b * imagesStrides[0] + sourceRowCeil * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        let sourceFracCol: number;\n        if (halfPixelCenters) {\n          sourceFracCol = effectiveColSizeRatio * (c + 0.5) - 0.5;\n        } else {\n          sourceFracCol = effectiveColSizeRatio * c;\n        }\n        const sourceColFloor = Math.max(0, Math.floor(sourceFracCol));\n        const colFrac = sourceFracCol - sourceColFloor;\n        const sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\n        const topLeftOffest = topRowOffset + sourceColFloor * imagesStrides[2];\n        const botLeftOffset = botRowOffset + sourceColFloor * imagesStrides[2];\n        const topRightOffset = topRowOffset + sourceColCeil * imagesStrides[2];\n        const botRightOffest = botRowOffset + sourceColCeil * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n\n          // Compute the fractional index of the source.\n          const topLeft = xValues[topLeftOffest + d];\n          const bottomLeft = xValues[botLeftOffset + d];\n          const topRight = xValues[topRightOffset + d];\n          const bottomRight = xValues[botRightOffest + d];\n\n          const top = topLeft + (topRight - topLeft) * colFrac;\n          const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\n          const newValue = top + (bottom - top) * rowFrac;\n\n          result[outputIdx++] = newValue;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], 'float32', result);\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinear as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinearGrad, ResizeBilinearGradAttrs, ResizeBilinearGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeBilinearGrad(args: {\n  inputs: ResizeBilinearGradInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeBilinearGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  assertNotComplex([dy, images], 'resizeBilinearGrad');\n\n  const imagesStrides = util.computeStrides(images.shape);\n\n  const [batch, xHeight, xWidth, depth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n\n  const output = new Float32Array(batch * xHeight * xWidth * depth);\n\n  // In the backwards pass, we want to find the pixels that were generated\n  // for each pixel in the input image the forward pass and add the\n  // corresponding coefficient from dy to the gradient (with some\n  // interpolation).\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/3039375c86a5bbc9610c7725dcaa95d635f87ba2/tensorflow/core/kernels/resize_bilinear_op.cc#L275\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  let offset = 0;\n  for (let b = 0; b < batch; b++) {\n    const bOffset = b * imagesStrides[0];\n    for (let r = 0; r < yHeight; r++) {\n      const dxR = r * heightScale;\n      const topDxRIndex = Math.floor(dxR);\n      const bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);\n\n      const topDxROffset = bOffset + topDxRIndex * imagesStrides[1];\n      const bottomDxROffset = bOffset + bottomDxRIndex * imagesStrides[1];\n\n      const dxRLerp = dxR - topDxRIndex;\n      const inverseDxRLerp = 1.0 - dxRLerp;\n      for (let c = 0; c < yWidth; c++) {\n        const dxC = c * widthScale;\n        const leftDxCIndex = Math.floor(dxC);\n        const rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);\n        const dxCLerp = dxC - leftDxCIndex;\n        const inverseDxCLerp = 1.0 - dxCLerp;\n\n        const topLeftRCOffset = topDxROffset + leftDxCIndex * imagesStrides[2];\n        const topRightRCOffset =\n            topDxROffset + rightDxCIndex * imagesStrides[2];\n        const bottomLeftRCOffset =\n            bottomDxROffset + leftDxCIndex * imagesStrides[2];\n        const bottomRightRCOffset =\n            bottomDxROffset + rightDxCIndex * imagesStrides[2];\n\n        const inverseDxRLerpTimesInverseDxCLerp =\n            inverseDxRLerp * inverseDxCLerp;\n        const inverseDxRLerpTimesDxCLerp = inverseDxRLerp * dxCLerp;\n        const dxRLerpTimesInverseDxCLerp = dxRLerp * inverseDxCLerp;\n        const dxRLerpTimesDxCLerp = dxRLerp * dxCLerp;\n        for (let d = 0; d < depth; d++) {\n          const dyVal = dyValues[offset++];\n          output[topLeftRCOffset + d] +=\n              dyVal * inverseDxRLerpTimesInverseDxCLerp;\n          output[topRightRCOffset + d] += dyVal * inverseDxRLerpTimesDxCLerp;\n          output[bottomLeftRCOffset + d] += dyVal * dxRLerpTimesInverseDxCLerp;\n          output[bottomRightRCOffset + d] += dyVal * dxRLerpTimesDxCLerp;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, xWidth, xHeight, depth], 'float32', output);\n}\n\nexport const resizeBilinearGradConfig: KernelConfig = {\n  kernelName: ResizeBilinearGrad,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinearGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeNearestNeighbor(args: {\n  inputs: ResizeNearestNeighborInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeNearestNeighborAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeNearestNeighbor');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const output = new Float32Array(batch * newHeight * newWidth * numChannels);\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n\n  let outputOffset = 0;\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < newHeight; r++) {\n      const sourceFracRow = halfPixelCenters ?\n          effectiveRowSizeRatio * (r + 0.5) :\n          effectiveRowSizeRatio * r;\n      let sourceNearestRow = Math.min(\n          oldHeight - 1,\n          alignCorners ? Math.round(sourceFracRow) : Math.floor(sourceFracRow));\n      if (halfPixelCenters) {\n        sourceNearestRow = Math.max(0, sourceNearestRow);\n      }\n      const rowOffset = batchOffset + sourceNearestRow * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        const sourceFracCol = halfPixelCenters ?\n            effectiveColSizeRatio * (c + 0.5) :\n            effectiveColSizeRatio * c;\n        let sourceNearestCol = Math.min(\n            oldWidth - 1,\n            alignCorners ? Math.round(sourceFracCol) :\n                           Math.floor(sourceFracCol));\n        if (halfPixelCenters) {\n          sourceNearestCol = Math.max(0, sourceNearestCol);\n        }\n        const colOffset = rowOffset + sourceNearestCol * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n          // Compute the fractional index of the source.\n          const newVal = xValues[colOffset + d];\n          output[outputOffset++] = newVal;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], images.dtype, output);\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighbor as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighborGrad, ResizeNearestNeighborGradAttrs, ResizeNearestNeighborGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeNearestNeighborGrad(args: {\n  inputs: ResizeNearestNeighborGradInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeNearestNeighborGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  assertNotComplex([dy, images], 'resizeNearestNeighborGrad');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n  const [batch, xHeight, xWidth, depth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n\n  const output = new Float32Array(batch * xHeight * xWidth * depth);\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n\n  // In the backwards pass, we want to find the pixels that were generated\n  // for each pixel in the input image the forward pass\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  const invHeightScale = 1 / heightScale;\n  const invWidthScale = 1 / widthScale;\n\n  // This defines the size of the window of values around a particular\n  // index in dy that we want to search for contributions to dx.\n  const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n  const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n  // Loop over the output space.\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < xHeight; r++) {\n      const rowOffset = batchOffset + r * imagesStrides[1];\n\n      // Compute bounds for where in dy we will look\n      const startRLerp = Math.floor(r * invHeightScale);\n      const startDyR = Math.floor(startRLerp - (winHeight / 2));\n      for (let c = 0; c < xWidth; c++) {\n        const colOffset = rowOffset + c * imagesStrides[2];\n\n        // Compute bounds for where in dy we will look\n        const startCLerp = Math.floor(c * invWidthScale);\n        const startDyC = Math.floor(startCLerp - (winWidth / 2));\n\n        for (let d = 0; d < depth; d++) {\n          let accum = 0;\n          // loop over dy\n\n          for (let dyRIndex = 0; dyRIndex < winHeight; dyRIndex++) {\n            const dyR = dyRIndex + startDyR;\n            // Guard against the window exceeding the bounds of dy\n            if (dyR < 0 || dyR >= yHeight) {\n              continue;\n            }\n\n            const dyROffset = batchOffset + dyR * dyStrides[1];\n            const sourceFracRow = dyR * heightScale;\n            const sourceNearestRow = Math.min(\n                xHeight - 1,\n                alignCorners ? Math.round(sourceFracRow) :\n                               Math.floor(sourceFracRow));\n            if (r !== sourceNearestRow) {\n              continue;\n            }\n            for (let dyCIndex = 0; dyCIndex < winWidth; dyCIndex++) {\n              const dyC = dyCIndex + startDyC;\n              // Guard against the window exceeding the bounds of dy\n              if (dyC < 0 || dyC >= yWidth) {\n                continue;\n              }\n\n              const dyCOffset = dyROffset + dyC * dyStrides[2];\n              const sourceFracCol = dyC * widthScale;\n              const sourceNearestCol = Math.min(\n                  xWidth - 1,\n                  alignCorners ? Math.round(sourceFracCol) :\n                                 Math.floor(sourceFracCol));\n\n              if (c === sourceNearestCol) {\n                accum += dyValues[dyCOffset + d];\n              }\n            }\n          }\n          output[colOffset + d] = accum;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(images.shape, images.dtype, output);\n}\n\nexport const resizeNearestNeighborGradConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighborGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorBuffer, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {identity} from './Identity';\n\nexport function reverse(\n    args:\n        {inputs: ReverseInputs, backend: MathBackendCPU, attrs: ReverseAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  assertNotComplex(x, 'reverse');\n\n  const xRank = x.shape.length;\n\n  const $dims = util.parseAxisParam(dims, x.shape);\n  if (xRank === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const outBuf = new TensorBuffer(x.shape, x.dtype);\n  const xBuf = backend.bufferSync(x);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.slice();\n    $dims.forEach(d => inLoc[d] = x.shape[d] - 1 - inLoc[d]);\n    outBuf.set(xBuf.get(...inLoc), ...outLoc);\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'cpu',\n  kernelFunc: reverse as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {backend_util, RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} = attrs as {} as RotateWithOffsetAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, imageHeight, imageWidth);\n    const fullOpacityValue = 255;\n\n    const sinFactor = Math.sin(radians);\n    const cosFactor = Math.cos(radians);\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n\n            const x = coords[2];\n            const y = coords[1];\n\n            // coordX/coordY are the result of rotating and translating x/y.\n            let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;\n            let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;\n            coordX = Math.round(coordX + centerX);\n            coordY = Math.round(coordY + centerY);\n\n            let outputValue = fillValue;\n            if (typeof fillValue !== 'number') {\n              if (channel === 3) {\n                outputValue = fullOpacityValue;\n              } else {\n                outputValue = fillValue[channel];\n              }\n            }\n\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth && coordY >= 0 &&\n                coordY < imageHeight) {\n              // set the output to the image value at the coordinate position.\n              const rotatedRowOffset = coordY * (imageWidth * numChannels);\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rotatedRowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n            output[outIdx] = outputValue as number;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Round} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const round = unaryKernelFunc(Round, (xi) => {\n  // The algorithm is based on banker's rounding.\n  const base = Math.floor(xi);\n  if (xi - base < 0.5) {\n    return Math.floor(xi);\n  } else if (xi - base > 0.5) {\n    return Math.ceil(xi);\n  } else {\n    if (base % 2.0 === 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n});\n\nexport const roundConfig: KernelConfig = {\n  kernelName: Round,\n  backendName: 'cpu',\n  kernelFunc: round,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Rank, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: MathBackendCPU,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n  const sumDupeIndices = true;\n\n  const indicesBuf = backend.bufferSync<Rank, 'int32'>(indices);\n  const updatesBuf = backend.bufferSync<Rank, 'int32'|'float32'>(updates);\n\n  const outBuf = scatterImpl(\n      indicesBuf, updatesBuf, shape, outputSize, sliceSize, numUpdates,\n      sliceRank, strides, 0 /* defaultValue */, sumDupeIndices);\n\n  return backend.makeTensorInfo(shape, outBuf.dtype, outBuf.values);\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'cpu',\n  kernelFunc: scatterNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction lowerBound(array: TypedArray, value: number) {\n  let left = 0;\n  let right = array.length;\n  let mid = 0;\n  while (left < right) {\n    mid = Math.floor((left + right) / 2);\n    if (array[mid] < value) {\n      left = mid + 1;\n    } else {\n      right = mid;\n    }\n  }\n  return right;\n}\n\nfunction upperBound(array: TypedArray, value: number) {\n  let left = 0;\n  let right = array.length;\n  let mid = 0;\n  while (left < right) {\n    mid = Math.floor((left + right) / 2);\n    if (array[mid] <= value) {\n      left = mid + 1;\n    } else {\n      right = mid;\n    }\n  }\n  return right;\n}\n\nexport function searchSortedImpl(\n    sortedInputs: TypedArray, values: TypedArray, batchSize: number,\n    numInputs: number, numValues: number, side: 'left'|'right'): TypedArray {\n  const output =\n      util.getArrayFromDType('int32', batchSize * numValues) as TypedArray;\n  for (let b = 0; b < batchSize; ++b) {\n    const sortedInputsSlice =\n        sortedInputs.slice(b * numInputs, (b + 1) * numInputs);\n    const outputOffset = b * numValues;\n    for (let i = 0; i < numValues; ++i) {\n      output[outputOffset + i] = side === 'left' ?\n          lowerBound(sortedInputsSlice, values[i + outputOffset]) :\n          upperBound(sortedInputsSlice, values[i + outputOffset]);\n    }\n  }\n  return output;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SearchSorted, SearchSortedAttrs, SearchSortedInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {searchSortedImpl} from './SearchSorted_impl';\n\nexport function searchSorted(args: {\n  inputs: SearchSortedInputs,\n  backend: MathBackendCPU,\n  attrs: SearchSortedAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sortedSequence, values} = inputs;\n  const {side} = attrs;\n\n  const $sortedSequence =\n      backend.data.get(sortedSequence.dataId).values as TypedArray;\n  const $values = backend.data.get(values.dataId).values as TypedArray;\n\n  const output = searchSortedImpl(\n      $sortedSequence, $values, sortedSequence.shape[0],\n      sortedSequence.shape[1], values.shape[1], side);\n  return backend.makeTensorInfo(values.shape, 'int32', output);\n}\n\nexport const searchSortedConfig: KernelConfig = {\n  kernelName: SearchSorted,\n  backendName: 'cpu',\n  kernelFunc: searchSorted as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function select(args: {inputs: SelectInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  assertNotComplex([condition, t, e], 'select');\n  const conditionRank = condition.shape.length;\n\n  const values = backend.data.get(condition.dataId).values as TypedArray;\n  const tValues = backend.data.get(t.dataId).values as TypedArray;\n  const eValues = backend.data.get(e.dataId).values as TypedArray;\n  const resultDtype = upcastType(t.dtype, e.dtype);\n  const newValues =\n      util.makeZerosTypedArray(util.sizeFromShape(t.shape), resultDtype);\n\n  let index = 0;\n  const offset =\n      conditionRank === 0 || conditionRank > 1 || t.shape.length === 1 ?\n      1 :\n      util.sizeFromShape(t.shape.slice(1));\n\n  for (let i = 0; i < values.length; i++) {\n    for (let j = 0; j < offset; j++) {\n      if (values[i] === 1) {\n        newValues[index++] = tValues[i];\n      } else {\n        newValues[index++] = eValues[i];\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(t.shape, resultDtype, newValues);\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'cpu',\n  kernelFunc: select as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Selu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nconst scaleAlpha = backend_util.SELU_SCALEALPHA;\nconst scale = backend_util.SELU_SCALE;\n\nexport const selu = unaryKernelFunc(Selu, (xi) => {\n  if (xi >= 0) {\n    return scale * xi;\n  } else {\n    return scaleAlpha * (Math.exp(xi) - 1);\n  }\n});\n\nexport const seluConfig: KernelConfig = {\n  kernelName: Selu,\n  backendName: 'cpu',\n  kernelFunc: selu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sign} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sign = unaryKernelFunc(Sign, (xi) => {\n  if (xi < 0) {\n    return -1;\n  } else if (xi > 0) {\n    return 1;\n  } else {\n    return 0;\n  }\n});\n\nexport const signConfig: KernelConfig = {\n  kernelName: Sign,\n  backendName: 'cpu',\n  kernelFunc: sign,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sin} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sin = unaryKernelFunc(Sin, (xi) => Math.sin(xi));\n\nexport const sinConfig: KernelConfig = {\n  kernelName: Sin,\n  backendName: 'cpu',\n  kernelFunc: sin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sinh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sinh = unaryKernelFunc(Sinh, (xi) => Math.sinh(xi));\n\nexport const sinhConfig: KernelConfig = {\n  kernelName: Sinh,\n  backendName: 'cpu',\n  kernelFunc: sinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Softplus} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\n// mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n\n// epsilon is the difference between 1.0 and the next representable float.\n// For a single precision 32 bit float this should be 2^-23, see:\n// https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\nconst epsilon = 1.1920928955078125e-7;\nconst threshold = Math.log(epsilon) + 2.0;\n\nexport const softplus = unaryKernelFunc(Softplus, (xi) => {\n  // Value above which exp(x) may overflow, but softplus(x) == x\n  // is within machine epsilon.\n  const tooLarge = xi > -threshold;\n\n  // Value below which exp(x) may underflow, but softplus(x) == exp(x)\n  // is within machine epsilon.\n  const tooSmall = xi < threshold;\n\n  const expX = Math.exp(xi);\n  let result;\n\n  if (tooSmall) {\n    result = expX;\n  } else if (tooLarge) {\n    result = xi;\n  } else {\n    result = Math.log(1.0 + expX);\n  }\n  return result;\n});\n\nexport const softplusConfig: KernelConfig = {\n  kernelName: Softplus,\n  backendName: 'cpu',\n  kernelFunc: softplus,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ReshapeAttrs, ReshapeInputs, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, TransposeAttrs, TransposeInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {padV2Config} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function spaceToBatchND(args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendCPU,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  assertNotComplex([x], 'spaceToBatchND');\n\n  const prod = util.sizeFromShape(blockShape);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...(paddings as Array<[number, number]>));\n\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const paddedX = padV2Config.kernelFunc({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  }) as TensorInfo;\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapeInputs: ReshapeInputs = {x: paddedX};\n  const reshapeAttrs: ReshapeAttrs = {shape: reshapedPaddedShape};\n  const paddedXReshaped =\n      reshape({inputs: reshapeInputs, backend, attrs: reshapeAttrs});\n\n  const transposeInputs: TransposeInputs = {x: paddedXReshaped};\n  const transposeAttrs:\n      TransposeAttrs = {perm: permutedReshapedPaddedPermutation};\n  const paddedXT =\n      transpose({inputs: transposeInputs, backend, attrs: transposeAttrs});\n\n  const resultReshapeInputs: ReshapeInputs = {x: paddedXT};\n  const resultReshapeAttrs: ReshapeAttrs = {shape: flattenShape};\n  const result = reshape(\n      {inputs: resultReshapeInputs, backend, attrs: resultReshapeAttrs});\n\n  backend.disposeIntermediateTensorInfo(paddedX);\n  backend.disposeIntermediateTensorInfo(paddedXReshaped);\n  backend.disposeIntermediateTensorInfo(paddedXT);\n\n  return result;\n}\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'cpu',\n  kernelFunc: spaceToBatchND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseFillEmptyRows, SparseFillEmptyRowsInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseFillEmptyRowsImpl} from './SparseFillEmptyRows_impl';\n\nexport function sparseFillEmptyRows(args: {\n  inputs: SparseFillEmptyRowsInputs,\n  backend: MathBackendCPU\n}): [TensorInfo, TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {indices, values, denseShape, defaultValue} = inputs;\n  if (denseShape.shape.length !== 1) {\n    throw new Error(`Dense shape must be a vector, saw:\n        ${denseShape.shape}`);\n  }\n  if (indices.shape.length !== 2) {\n    throw new Error(`Indices must be a matrix, saw:\n        ${indices.shape}`);\n  }\n  if (values.shape.length !== 1) {\n    throw new Error(`Values must be a vector, saw:\n        ${values.shape}`);\n  }\n  if (defaultValue.shape.length !== 0) {\n    throw new Error(`Default value must be a scalar, saw:\n        ${defaultValue.shape}`);\n  }\n\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $values = backend.data.get(values.dataId).values as TypedArray;\n  const $denseShape = backend.data.get(denseShape.dataId).values as TypedArray;\n  const $defaultValue =\n      backend.data.get(defaultValue.dataId).values[0] as number;\n\n  const [outputIndices, outputIndicesShape, outputValues,\n         emptyRowIndicator, reverseIndexMap] =\n      sparseFillEmptyRowsImpl(\n          $indices, indices.shape, indices.dtype, $values, values.dtype,\n          $denseShape, $defaultValue);\n  return [\n    backend.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices),\n    backend.makeTensorInfo(\n        [outputIndicesShape[0]], values.dtype, outputValues),\n    backend.makeTensorInfo(\n        [emptyRowIndicator.length], 'bool',\n        new Uint8Array(\n            emptyRowIndicator.map((value: boolean) => Number(value)))),\n    backend.makeTensorInfo(\n        [reverseIndexMap.length], indices.dtype,\n        new Int32Array(reverseIndexMap)),\n  ];\n}\n\nexport const sparseFillEmptyRowsConfig: KernelConfig = {\n  kernelName: SparseFillEmptyRows,\n  backendName: 'cpu',\n  kernelFunc: sparseFillEmptyRows as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseReshape, SparseReshapeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseReshapeImpl} from './SparseReshape_impl';\n\nexport function sparseReshape(\n    args: {inputs: SparseReshapeInputs, backend: MathBackendCPU}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {inputIndices, inputShape, newShape} = inputs;\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape\n        ${inputIndices.shape}`);\n  }\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape\n        ${inputShape.shape}`);\n  }\n\n  if (newShape.shape.length !== 1) {\n    throw new Error(\n        `Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n\n  const $inputShape =\n      Array.from(backend.data.get(inputShape.dataId).values as TypedArray);\n  const $inputIndices =\n      backend.data.get(inputIndices.dataId).values as TypedArray;\n  const targetShape =\n      Array.from(backend.data.get(newShape.dataId).values as TypedArray);\n\n  const [newIndices, indicesShape, outputShape] = sparseReshapeImpl(\n      $inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape,\n      targetShape);\n  return [\n    backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),\n    backend.makeTensorInfo(\n        [outputShape.length], newShape.dtype, new Int32Array(outputShape)),\n  ];\n}\n\nexport const sparseReshapeConfig: KernelConfig = {\n  kernelName: SparseReshape,\n  backendName: 'cpu',\n  kernelFunc: sparseReshape,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseSegmentMean, SparseSegmentMeanInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseSegmentReductionImpl} from './SparseSegmentReduction_impl';\n\nexport function sparseSegmentMean(\n    args: {inputs: SparseSegmentMeanInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n          ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n          ${segmentIds.shape}`);\n  }\n  if (indices.shape[0] !== segmentIds.shape[0]) {\n    throw new Error(`segmentIds and indices should have same size.`);\n  }\n\n  const $data = backend.data.get(data.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $segmentIds = backend.data.get(segmentIds.dataId).values as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImpl(\n      $data, data.shape, data.dtype, $indices, $segmentIds, true);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentMeanConfig: KernelConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'cpu',\n  kernelFunc: sparseSegmentMean,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseSegmentSum, SparseSegmentSumInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseSegmentReductionImpl} from './SparseSegmentReduction_impl';\n\nexport function sparseSegmentSum(\n    args: {inputs: SparseSegmentSumInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n         ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n         ${segmentIds.shape}`);\n  }\n  if (indices.shape[0] !== segmentIds.shape[0]) {\n    throw new Error(`segmentIds and indices should have same size.`);\n  }\n\n  const $data = backend.data.get(data.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $segmentIds = backend.data.get(segmentIds.dataId).values as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImpl(\n      $data, data.shape, data.dtype, $indices, $segmentIds);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentSumConfig: KernelConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: 'cpu',\n  kernelFunc: sparseSegmentSum,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Rank, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: MathBackendCPU,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n\n  const indicesBuf = backend.bufferSync<Rank, 'int32'>(sparseIndices);\n\n  let outBuf;\n  switch (sparseValues.dtype) {\n    case 'bool': {\n      const updatesBuf = backend.bufferSync<Rank, 'bool'>(sparseValues);\n      const $defaultValue =\n          Boolean(backend.data.get(defaultValue.dataId).values[0]);\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    case 'float32': {\n      const updatesBuf = backend.bufferSync<Rank, 'float32'>(sparseValues);\n      const $defaultValue =\n          backend.data.get(defaultValue.dataId).values[0] as number;\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    case 'int32': {\n      const updatesBuf = backend.bufferSync<Rank, 'int32'>(sparseValues);\n      const $defaultValue =\n          backend.data.get(defaultValue.dataId).values[0] as number;\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    case 'string': {\n      const updatesBuf = backend.bufferSync<Rank, 'string'>(sparseValues);\n      const $defaultValue = util.decodeString(\n          backend.data.get(defaultValue.dataId).values[0] as Uint8Array);\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    default:\n      throw new Error(`Unsupported type ${sparseValues.dtype}`);\n  }\n  return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'cpu',\n  kernelFunc: sparseToDense as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, SplitVAttrs, SplitVInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig, KernelFunc, SplitV, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {slice} from './Slice';\n\nexport function splitV(\n    args: {inputs: SplitVInputs, backend: MathBackendCPU, attrs: SplitVAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {numOrSizeSplits, axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n\n  const begin = new Array(x.shape.length).fill(0);\n  const size = x.shape.slice();\n  return splitSizes.map(s => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT =\n        slice({inputs: {x}, backend, attrs: {begin, size: sliceSize}});\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\n\nexport const splitVConfig: KernelConfig = {\n  kernelName: SplitV,\n  backendName: 'cpu',\n  kernelFunc: splitV as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Square, SquareInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend}) => {\n    const {x} = inputs as SquareInputs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'square');\n\n    const values = cpuBackend.data.get(x.dataId).values as Float32Array;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = value * value;\n    }\n    const dataId = cpuBackend.write(newValues, x.shape, x.dtype);\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Step, StepAttrs} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const step = unaryKernelFunc(Step, (xi, attrs) => {\n  const stepAttrs = attrs as {} as StepAttrs;\n  if (isNaN(xi)) {\n    return NaN;\n  } else {\n    return xi > 0 ? 1 : stepAttrs.alpha;\n  }\n});\n\nexport const stepConfig: KernelConfig = {\n  kernelName: Step,\n  backendName: 'cpu',\n  kernelFunc: step,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Rank, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {stridedSliceImpl} from './StridedSlice_impl';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: MathBackendCPU,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  assertNotComplex(x, 'stridedSlice');\n\n  const {\n    finalShapeSparse,\n    finalShape,\n    isIdentity,\n    sliceDim0,\n    isSimpleSlice,\n    begin: $begin,\n    end: $end,\n    strides: $strides\n  } =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  let result;\n\n  // ref:\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/strided_slice_op.cc\n  if (isIdentity) {\n    // Optimization #1, slice is a no-op plus reshape\n    result = reshape({inputs: {x}, backend, attrs: {shape: finalShape}});\n  } else if (sliceDim0 || isSimpleSlice) {\n    // Optimization #2, slice is memory contiguous (only occurs in dim 0)\n    util.assert(\n        x.shape.length >= 1,\n        () => `Input must have rank at least 1, got: ${x.shape.length}`);\n\n    const size = slice_util.computeOutShape($begin, $end, $strides);\n    // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).\n    const sliced = slice({inputs: {x}, backend, attrs: {begin: $begin, size}});\n    result =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: finalShape}});\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else {\n    const xBuf = backend.bufferSync<Rank, 'float32'>(x);\n    const outBuf = stridedSliceImpl(finalShapeSparse, xBuf, $strides, $begin);\n\n    result = backend.makeTensorInfo(finalShape, outBuf.dtype, outBuf.values);\n  }\n\n  return result;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'cpu',\n  kernelFunc: stridedSlice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringNGrams, StringNGramsAttrs, StringNGramsInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringNGramsImpl} from './StringNGrams_impl';\n\nexport function stringNGrams(args: {\n  inputs: StringNGramsInputs,\n  backend: MathBackendCPU,\n  attrs: StringNGramsAttrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {data, dataSplits} = inputs;\n  const $data = backend.data.get(data.dataId).values as Uint8Array[];\n  const $dataSplits = backend.data.get(dataSplits.dataId).values as Int32Array;\n\n  const [nGrams, nGramsSplits] = stringNGramsImpl(\n      $data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth,\n      preserveShortSequences);\n  return [\n    backend.makeTensorInfo([nGrams.length], 'string', nGrams),\n    backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),\n  ];\n}\n\nexport const stringNGramsConfig: KernelConfig = {\n  kernelName: StringNGrams,\n  backendName: 'cpu',\n  kernelFunc: stringNGrams as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringSplit, StringSplitAttrs, StringSplitInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringSplitImpl} from './StringSplit_impl';\n\nexport function stringSplit(args: {\n  inputs: StringSplitInputs,\n  backend: MathBackendCPU,\n  attrs: StringSplitAttrs\n}): [TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {skipEmpty} = attrs;\n  const {input, delimiter} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (input.shape.length !== 1) {\n    throw new Error(`Input must be a vector, got shape: ${input.shape}`);\n  }\n  if (delimiter.shape.length !== 0) {\n    throw new Error(\n        `Delimiter must be a scalar, got shape: ${delimiter.shape}`);\n  }\n\n  const $input = backend.data.get(input.dataId).values as Uint8Array[];\n  const $delimiter = backend.data.get(delimiter.dataId).values[0] as Uint8Array;\n\n  const [indices, values, shape] =\n      stringSplitImpl($input, $delimiter, skipEmpty);\n  const outputSize = values.length;\n  return [\n    backend.makeTensorInfo([outputSize, 2], 'int32', indices),\n    backend.makeTensorInfo([outputSize], 'string', values),\n    backend.makeTensorInfo([2], 'int32', new Int32Array(shape))\n  ];\n}\n\nexport const stringSplitConfig: KernelConfig = {\n  kernelName: StringSplit,\n  backendName: 'cpu',\n  kernelFunc: stringSplit as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringToHashBucketFast, StringToHashBucketFastAttrs, StringToHashBucketFastInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringToHashBucketFastImpl} from './StringToHashBucketFast_impl';\n\nexport function stringToHashBucketFast(args: {\n  inputs: StringToHashBucketFastInputs,\n  backend: MathBackendCPU,\n  attrs: StringToHashBucketFastAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {numBuckets} = attrs;\n  const {input} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (numBuckets <= 0) {\n    throw new Error(`Number of buckets must be at least 1`);\n  }\n\n  const $input = backend.data.get(input.dataId).values as Uint8Array[];\n\n  const output = stringToHashBucketFastImpl($input, numBuckets);\n  return backend.makeTensorInfo(input.shape, 'int32', output);\n}\n\nexport const stringToHashBucketFastConfig: KernelConfig = {\n  kernelName: StringToHashBucketFast,\n  backendName: 'cpu',\n  kernelFunc: stringToHashBucketFast as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tan} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const tan = unaryKernelFunc(Tan, (xi) => Math.tan(xi));\n\nexport const tanConfig: KernelConfig = {\n  kernelName: Tan,\n  backendName: 'cpu',\n  kernelFunc: tan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tanh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const tanh = unaryKernelFunc(Tanh, (xi) => Math.tanh(xi));\n\nexport const tanhConfig: KernelConfig = {\n  kernelName: Tanh,\n  backendName: 'cpu',\n  kernelFunc: tanh,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, Transform, TransformAttrs, TransformInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function transform(args: {\n  inputs: TransformInputs,\n  attrs: TransformAttrs,\n  backend: MathBackendCPU\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape = [batch, outHeight, outWidth, numChannels];\n\n  const inStrides = util.computeStrides(image.shape);\n  const batchInStride = inStrides[0];\n  const rowInStride = inStrides[1];\n  const colInStride = inStrides[2];\n\n  const outStrides = util.computeStrides(outShape);\n  const batchOutStride = outStrides[0];\n  const rowOutStride = outStrides[1];\n  const colOutStride = outStrides[2];\n\n  const outVals = util.getTypedArrayFromDType(\n      image.dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  outVals.fill(fillValue);\n\n  const imageVals = backend.data.get(image.dataId).values as TypedArray;\n  const transformVals =\n      backend.data.get(transforms.dataId).values as TypedArray;\n\n  // Ref TF implementation:\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/image_ops.h\n  for (let b = 0; b < batch; ++b) {\n    const transform = transforms.shape[0] === 1 ?\n        transformVals :\n        transformVals.subarray(b * 8, b * 8 + 8);\n\n    for (let outY = 0; outY < outHeight; ++outY) {\n      for (let outX = 0; outX < outWidth; ++outX) {\n        for (let channel = 0; channel < numChannels; ++channel) {\n          let val;\n\n          const projection = transform[6] * outX + transform[7] * outY + 1;\n\n          if (projection === 0) {\n            // Return the fill value for infinite coordinates,\n            // which are outside the input image\n            continue;\n          }\n\n          const inX =\n              (transform[0] * outX + transform[1] * outY + transform[2]) /\n              projection;\n          const inY =\n              (transform[3] * outX + transform[4] * outY + transform[5]) /\n              projection;\n\n          const x = mapCoord(inX, imageWidth, fillMode);\n          const y = mapCoord(inY, imageHeight, fillMode);\n\n          switch (interpolation) {\n            case 'nearest':\n              val = nearestInterpolation(\n                  imageVals, imageHeight, imageWidth, batchInStride,\n                  rowInStride, colInStride, b, y, x, channel, fillValue);\n              break;\n            case 'bilinear':\n              val = bilinearInterpolation(\n                  imageVals, imageHeight, imageWidth, batchInStride,\n                  rowInStride, colInStride, b, y, x, channel, fillValue);\n              break;\n            default:\n              throw new Error(\n                  `Error in Transform: Expect 'nearest' or ` +\n                  `'bilinear', but got ${interpolation}`);\n          }\n\n          const ind =\n              b * batchOutStride + outY * rowOutStride +\n              outX * colOutStride + channel;\n\n          outVals[ind] = val;\n        }\n      }\n    }\n\n    return backend.makeTensorInfo(outShape, image.dtype, outVals);\n  }\n\n  const dataId = backend.write(outVals, outShape, image.dtype);\n  return {dataId, shape: image.shape, dtype: image.dtype};\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'cpu',\n  kernelFunc: transform as {} as KernelFunc\n};\n\nfunction mapCoord(\n    outCoord: number, len: number,\n    mode: 'constant'|'reflect'|'wrap'|'nearest') {\n  switch (mode) {\n    case 'reflect':\n      return mapCoordReflect(outCoord, len);\n    case 'wrap':\n      return mapCoordWrap(outCoord, len);\n    case 'nearest':\n      return mapCoordNearest(outCoord, len);\n    case 'constant':\n    default:\n      return mapCoordConstant(outCoord, len);\n  }\n}\n\nfunction mapCoordReflect(outCoord: number, len: number): number {\n  // Reflect [abcd] to [dcba|abcd|dcba].\n  let inCoord = outCoord;\n  if (inCoord < 0) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz2 = 2 * len;\n      if (inCoord < sz2) {\n        inCoord = sz2 * Math.trunc(-inCoord / sz2) + inCoord;\n      }\n      inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1;\n    }\n  } else if (inCoord > len - 1) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz2 = 2 * len;\n      inCoord -= sz2 * Math.trunc(inCoord / sz2);\n      if (inCoord >= len) {\n        inCoord = sz2 - inCoord - 1;\n      }\n    }\n  }\n  // clamp is necessary because when outCoord = 3.5 and len = 4,\n  // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.\n  return util.clamp(0, inCoord, len - 1);\n}\n\nfunction mapCoordWrap(outCoord: number, len: number): number {\n  // Wrap [abcd] to [abcd|abcd|abcd].\n  let inCoord = outCoord;\n  if (inCoord < 0) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz = len - 1;\n      inCoord += len * (Math.trunc(-inCoord / sz) + 1);\n    }\n  } else if (inCoord > len - 1) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz = len - 1;\n      inCoord -= len * Math.trunc(inCoord / sz);\n    }\n  }\n  // clamp is necessary because when outCoord = -0.5 and len = 4,\n  // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.\n  return util.clamp(0, inCoord, len - 1);\n}\n\nfunction mapCoordConstant(outCoord: number, len: number): number {\n  return outCoord;\n}\n\nfunction mapCoordNearest(outCoord: number, len: number): number {\n  return util.clamp(0, outCoord, len - 1);\n}\n\nfunction readWithFillValue(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number): number {\n  const ind = batch * batchStride + y * rowStride + x * colStride + channel;\n  if (0 <= y && y < imageHeight && 0 <= x && x < imageWidth) {\n    return imageVals[ind];\n  } else {\n    return fillValue;\n  }\n}\n\nfunction nearestInterpolation(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number): number {\n  const $y = Math.round(y);\n  const $x = Math.round(x);\n\n  return readWithFillValue(\n      imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride,\n      batch, $y, $x, channel, fillValue);\n}\n\nfunction bilinearInterpolation(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number) {\n  const yFloor = Math.floor(y);\n  const xFloor = Math.floor(x);\n  const yCeil = yFloor + 1;\n  const xCeil = xFloor + 1;\n  // f(x, yFloor) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yFloor)\n  //               + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yFloor)\n  const valueYFloor =\n      (xCeil - x) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yFloor, xFloor, channel, fillValue) +\n      (x - xFloor) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yFloor, xCeil, channel, fillValue);\n  // f(x, yCeil) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yCeil)\n  //             + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yCeil)\n  const valueYCeil =\n      (xCeil - x) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yCeil, xFloor, channel, fillValue) +\n      (x - xFloor) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yCeil, xCeil, channel, fillValue);\n  // f(x, y) = (yCeil - y) / (yCeil - yFloor) * f(x, yFloor)\n  //         + (y - yFloor) / (yCeil - yFloor) * f(x, yCeil)\n  return (yCeil - y) * valueYFloor + (y - yFloor) * valueYCeil;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from './Cast';\nimport {equal} from './Equal';\nimport {expandDims} from './ExpandDims';\nimport {multiply} from './Multiply';\nimport {pack} from './Pack';\nimport {sum} from './Sum';\n\nexport function unsortedSegmentSum(args: {\n  inputs: UnsortedSegmentSumInputs,\n  backend: MathBackendCPU,\n  attrs: UnsortedSegmentSumAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, segmentIds} = inputs;\n  const {numSegments} = attrs;\n\n  assertNotComplex(x, 'unsortedSegmentSum');\n\n  const xRank = x.shape.length;\n  const segmentIdsRank = segmentIds.shape.length;\n  const res = [];\n  const intermediates: TensorInfo[] = [];\n\n  // Reshape the segment id's so that they can be broadcast with\n  // x. The new shape should be [segmentIds.shape, 1, ..., 1]\n  const numIters = xRank - segmentIdsRank;\n  let $segmentIds = segmentIds;\n\n  for (let i = 0; i < numIters; ++i) {\n    const expanded = expandDims(\n        {inputs: {input: $segmentIds}, backend, attrs: {dim: i + 1}});\n    $segmentIds = expanded;\n    intermediates.push(expanded);\n  }\n\n  for (let i = 0; i < numSegments; ++i) {\n    const scalarValue = util.createScalarValue(i as {} as 'int32', 'int32');\n    const segmentId = backend.makeTensorInfo([], 'int32', scalarValue);\n    const mask =\n        equal({inputs: {a: segmentId, b: $segmentIds}, backend}) as TensorInfo;\n    const maskCasted =\n        cast({inputs: {x: mask}, backend, attrs: {dtype: 'float32'}});\n    const mul =\n        multiply({inputs: {a: maskCasted, b: x}, backend}) as TensorInfo;\n    const sumTensorInfo =\n        sum({inputs: {x: mul}, backend, attrs: {axis: 0, keepDims: false}});\n    res.push(sumTensorInfo);\n    intermediates.push(segmentId);\n    intermediates.push(mask);\n    intermediates.push(maskCasted);\n    intermediates.push(mul);\n    intermediates.push(sumTensorInfo);\n  }\n\n  const result = pack({inputs: res, backend, attrs: {axis: 0}});\n\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const unsortedSegmentSumConfig: KernelConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'cpu',\n  kernelFunc: unsortedSegmentSum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// We explicitly import the modular kernels so they get registered in the\n// global registry when we compile the library. A modular build would replace\n// the contents of this file and import only the kernels that are needed.\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {_fusedMatMulConfig} from './kernels/_FusedMatMul';\nimport {absConfig} from './kernels/Abs';\nimport {acosConfig} from './kernels/Acos';\nimport {acoshConfig} from './kernels/Acosh';\nimport {addConfig} from './kernels/Add';\nimport {addNConfig} from './kernels/AddN';\nimport {allConfig} from './kernels/All';\nimport {anyConfig} from './kernels/Any';\nimport {argMaxConfig} from './kernels/ArgMax';\nimport {argMinConfig} from './kernels/ArgMin';\nimport {asinConfig} from './kernels/Asin';\nimport {asinhConfig} from './kernels/Asinh';\nimport {atanConfig} from './kernels/Atan';\nimport {atan2Config} from './kernels/Atan2';\nimport {atanhConfig} from './kernels/Atanh';\nimport {avgPoolConfig} from './kernels/AvgPool';\nimport {avgPool3DConfig} from './kernels/AvgPool3D';\nimport {avgPool3DGradConfig} from './kernels/AvgPool3DGrad';\nimport {avgPoolGradConfig} from './kernels/AvgPoolGrad';\nimport {batchMatMulConfig} from './kernels/BatchMatMul';\nimport {batchNormConfig} from './kernels/BatchNorm';\nimport {batchToSpaceNDConfig} from './kernels/BatchToSpaceND';\nimport {bincountConfig} from './kernels/Bincount';\nimport {broadcastArgsConfig} from './kernels/BroadcastArgs';\nimport {castConfig} from './kernels/Cast';\nimport {ceilConfig} from './kernels/Ceil';\nimport {clipByValueConfig} from './kernels/ClipByValue';\nimport {complexConfig} from './kernels/Complex';\nimport {complexAbsConfig} from './kernels/ComplexAbs';\nimport {concatConfig} from './kernels/Concat';\nimport {conv2DConfig} from './kernels/Conv2D';\nimport {conv2DBackpropFilterConfig} from './kernels/Conv2DBackpropFilter';\nimport {conv2DBackpropInputConfig} from './kernels/Conv2DBackpropInput';\nimport {conv3DConfig} from './kernels/Conv3D';\nimport {conv3DBackpropFilterV2Config} from './kernels/Conv3DBackpropFilterV2';\nimport {conv3DBackpropInputV2Config} from './kernels/Conv3DBackpropInputV2';\nimport {cosConfig} from './kernels/Cos';\nimport {coshConfig} from './kernels/Cosh';\nimport {cropAndResizeConfig} from './kernels/CropAndResize';\nimport {cumprodConfig} from './kernels/Cumprod';\nimport {cumsumConfig} from './kernels/Cumsum';\nimport {denseBincountConfig} from './kernels/DenseBincount';\nimport {depthToSpaceConfig} from './kernels/DepthToSpace';\nimport {depthwiseConv2dNativeConfig} from './kernels/DepthwiseConv2dNative';\nimport {depthwiseConv2dNativeBackpropFilterConfig} from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport {depthwiseConv2dNativeBackpropInputConfig} from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport {diagConfig} from './kernels/Diag';\nimport {dilation2DConfig} from './kernels/Dilation2D';\nimport {dilation2DBackpropFilterConfig} from './kernels/Dilation2DBackpropFilter';\nimport {dilation2DBackpropInputConfig} from './kernels/Dilation2DBackpropInput';\nimport {einsumConfig} from './kernels/Einsum';\nimport {eluConfig} from './kernels/Elu';\nimport {eluGradConfig} from './kernels/EluGrad';\nimport {equalConfig} from './kernels/Equal';\nimport {erfConfig} from './kernels/Erf';\nimport {expConfig} from './kernels/Exp';\nimport {expandDimsConfig} from './kernels/ExpandDims';\nimport {expm1Config} from './kernels/Expm1';\nimport {fftConfig} from './kernels/FFT';\nimport {fillConfig} from './kernels/Fill';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {floorConfig} from './kernels/Floor';\nimport {floorDivConfig} from './kernels/FloorDiv';\nimport {fusedConv2DConfig} from './kernels/FusedConv2D';\nimport {fusedDepthwiseConv2DConfig} from './kernels/FusedDepthwiseConv2D';\nimport {gatherNdConfig} from './kernels/GatherNd';\nimport {gatherV2Config} from './kernels/GatherV2';\nimport {greaterConfig} from './kernels/Greater';\nimport {greaterEqualConfig} from './kernels/GreaterEqual';\nimport {identityConfig} from './kernels/Identity';\nimport {ifftConfig} from './kernels/IFFT';\nimport {imagConfig} from './kernels/Imag';\nimport {isFiniteConfig} from './kernels/IsFinite';\nimport {isInfConfig} from './kernels/IsInf';\nimport {isNaNConfig} from './kernels/IsNaN';\nimport {leakyReluConfig} from './kernels/LeakyRelu';\nimport {lessConfig} from './kernels/Less';\nimport {lessEqualConfig} from './kernels/LessEqual';\nimport {linSpaceConfig} from './kernels/LinSpace';\nimport {logConfig} from './kernels/Log';\nimport {log1pConfig} from './kernels/Log1p';\nimport {logicalAndConfig} from './kernels/LogicalAnd';\nimport {logicalNotConfig} from './kernels/LogicalNot';\nimport {logicalOrConfig} from './kernels/LogicalOr';\nimport {LRNConfig} from './kernels/LRN';\nimport {LRNGradConfig} from './kernels/LRNGrad';\nimport {maxConfig} from './kernels/Max';\nimport {maximumConfig} from './kernels/Maximum';\nimport {maxPoolConfig} from './kernels/MaxPool';\nimport {maxPool3DConfig} from './kernels/MaxPool3D';\nimport {maxPool3DGradConfig} from './kernels/MaxPool3DGrad';\nimport {maxPoolGradConfig} from './kernels/MaxPoolGrad';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {meanConfig} from './kernels/Mean';\nimport {minConfig} from './kernels/Min';\nimport {minimumConfig} from './kernels/Minimum';\nimport {mirrorPadConfig} from './kernels/MirrorPad';\nimport {modConfig} from './kernels/Mod';\nimport {multinomialConfig} from './kernels/Multinomial';\nimport {multiplyConfig} from './kernels/Multiply';\nimport {negConfig} from './kernels/Neg';\nimport {nonMaxSuppressionV3Config} from './kernels/NonMaxSuppressionV3';\nimport {nonMaxSuppressionV4Config} from './kernels/NonMaxSuppressionV4';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {notEqualConfig} from './kernels/NotEqual';\nimport {oneHotConfig} from './kernels/OneHot';\nimport {onesLikeConfig} from './kernels/OnesLike';\nimport {packConfig} from './kernels/Pack';\nimport {padV2Config} from './kernels/PadV2';\nimport {powConfig} from './kernels/Pow';\nimport {preluConfig} from './kernels/Prelu';\nimport {prodConfig} from './kernels/Prod';\nimport {raggedGatherConfig} from './kernels/RaggedGather';\nimport {raggedTensorToTensorConfig} from './kernels/RaggedTensorToTensor';\nimport {rangeConfig} from './kernels/Range';\nimport {realConfig} from './kernels/Real';\nimport {realDivConfig} from './kernels/RealDiv';\nimport {reciprocalConfig} from './kernels/Reciprocal';\nimport {reluConfig} from './kernels/Relu';\nimport {relu6Config} from './kernels/Relu6';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {resizeBilinearConfig} from './kernels/ResizeBilinear';\nimport {resizeBilinearGradConfig} from './kernels/ResizeBilinearGrad';\nimport {resizeNearestNeighborConfig} from './kernels/ResizeNearestNeighbor';\nimport {resizeNearestNeighborGradConfig} from './kernels/ResizeNearestNeighborGrad';\nimport {reverseConfig} from './kernels/Reverse';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {roundConfig} from './kernels/Round';\nimport {rsqrtConfig} from './kernels/Rsqrt';\nimport {scatterNdConfig} from './kernels/ScatterNd';\nimport {searchSortedConfig} from './kernels/SearchSorted';\nimport {selectConfig} from './kernels/Select';\nimport {seluConfig} from './kernels/Selu';\nimport {sigmoidConfig} from './kernels/Sigmoid';\nimport {signConfig} from './kernels/Sign';\nimport {sinConfig} from './kernels/Sin';\nimport {sinhConfig} from './kernels/Sinh';\nimport {sliceConfig} from './kernels/Slice';\nimport {softmaxConfig} from './kernels/Softmax';\nimport {softplusConfig} from './kernels/Softplus';\nimport {spaceToBatchNDConfig} from './kernels/SpaceToBatchND';\nimport {sparseFillEmptyRowsConfig} from './kernels/SparseFillEmptyRows';\nimport {sparseReshapeConfig} from './kernels/SparseReshape';\nimport {sparseSegmentMeanConfig} from './kernels/SparseSegmentMean';\nimport {sparseSegmentSumConfig} from './kernels/SparseSegmentSum';\nimport {sparseToDenseConfig} from './kernels/SparseToDense';\nimport {splitVConfig} from './kernels/SplitV';\nimport {sqrtConfig} from './kernels/Sqrt';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {stepConfig} from './kernels/Step';\nimport {stridedSliceConfig} from './kernels/StridedSlice';\nimport {stringNGramsConfig} from './kernels/StringNGrams';\nimport {stringSplitConfig} from './kernels/StringSplit';\nimport {stringToHashBucketFastConfig} from './kernels/StringToHashBucketFast';\nimport {subConfig} from './kernels/Sub';\nimport {sumConfig} from './kernels/Sum';\nimport {tanConfig} from './kernels/Tan';\nimport {tanhConfig} from './kernels/Tanh';\nimport {tileConfig} from './kernels/Tile';\nimport {topKConfig} from './kernels/TopK';\nimport {transformConfig} from './kernels/Transform';\nimport {transposeConfig} from './kernels/Transpose';\nimport {uniqueConfig} from './kernels/Unique';\nimport {unpackConfig} from './kernels/Unpack';\nimport {unsortedSegmentSumConfig} from './kernels/UnsortedSegmentSum';\nimport {zerosLikeConfig} from './kernels/ZerosLike';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  _fusedMatMulConfig,\n  absConfig,\n  acosConfig,\n  acoshConfig,\n  addConfig,\n  addNConfig,\n  allConfig,\n  anyConfig,\n  argMaxConfig,\n  argMinConfig,\n  asinConfig,\n  asinhConfig,\n  atanConfig,\n  atan2Config,\n  atanhConfig,\n  avgPoolConfig,\n  avgPool3DConfig,\n  avgPool3DGradConfig,\n  avgPoolGradConfig,\n  batchMatMulConfig,\n  batchNormConfig,\n  batchToSpaceNDConfig,\n  bincountConfig,\n  broadcastArgsConfig,\n  castConfig,\n  ceilConfig,\n  clipByValueConfig,\n  complexConfig,\n  complexAbsConfig,\n  concatConfig,\n  conv2DConfig,\n  conv2DBackpropFilterConfig,\n  conv2DBackpropInputConfig,\n  conv3DConfig,\n  conv3DBackpropFilterV2Config,\n  conv3DBackpropInputV2Config,\n  cosConfig,\n  coshConfig,\n  cropAndResizeConfig,\n  cumprodConfig,\n  cumsumConfig,\n  denseBincountConfig,\n  depthToSpaceConfig,\n  depthwiseConv2dNativeConfig,\n  depthwiseConv2dNativeBackpropFilterConfig,\n  depthwiseConv2dNativeBackpropInputConfig,\n  diagConfig,\n  dilation2DConfig,\n  dilation2DBackpropFilterConfig,\n  dilation2DBackpropInputConfig,\n  einsumConfig,\n  eluConfig,\n  eluGradConfig,\n  equalConfig,\n  erfConfig,\n  expConfig,\n  expandDimsConfig,\n  expm1Config,\n  fftConfig,\n  fillConfig,\n  flipLeftRightConfig,\n  floorConfig,\n  floorDivConfig,\n  fusedConv2DConfig,\n  fusedDepthwiseConv2DConfig,\n  gatherNdConfig,\n  gatherV2Config,\n  greaterConfig,\n  greaterEqualConfig,\n  identityConfig,\n  ifftConfig,\n  imagConfig,\n  isFiniteConfig,\n  isInfConfig,\n  isNaNConfig,\n  leakyReluConfig,\n  lessConfig,\n  lessEqualConfig,\n  linSpaceConfig,\n  logConfig,\n  log1pConfig,\n  logicalAndConfig,\n  logicalNotConfig,\n  logicalOrConfig,\n  LRNConfig,\n  LRNGradConfig,\n  maxConfig,\n  maximumConfig,\n  maxPoolConfig,\n  maxPool3DConfig,\n  maxPool3DGradConfig,\n  maxPoolGradConfig,\n  maxPoolWithArgmaxConfig,\n  meanConfig,\n  minConfig,\n  minimumConfig,\n  mirrorPadConfig,\n  modConfig,\n  multinomialConfig,\n  multiplyConfig,\n  negConfig,\n  nonMaxSuppressionV3Config,\n  nonMaxSuppressionV4Config,\n  nonMaxSuppressionV5Config,\n  notEqualConfig,\n  oneHotConfig,\n  onesLikeConfig,\n  packConfig,\n  padV2Config,\n  powConfig,\n  preluConfig,\n  prodConfig,\n  raggedGatherConfig,\n  raggedTensorToTensorConfig,\n  rangeConfig,\n  realConfig,\n  realDivConfig,\n  reciprocalConfig,\n  reluConfig,\n  relu6Config,\n  reshapeConfig,\n  resizeBilinearConfig,\n  resizeBilinearGradConfig,\n  resizeNearestNeighborConfig,\n  resizeNearestNeighborGradConfig,\n  reverseConfig,\n  rotateWithOffsetConfig,\n  roundConfig,\n  rsqrtConfig,\n  scatterNdConfig,\n  searchSortedConfig,\n  selectConfig,\n  seluConfig,\n  sigmoidConfig,\n  signConfig,\n  sinConfig,\n  sinhConfig,\n  sliceConfig,\n  softmaxConfig,\n  softplusConfig,\n  spaceToBatchNDConfig,\n  sparseFillEmptyRowsConfig,\n  sparseReshapeConfig,\n  sparseSegmentMeanConfig,\n  sparseSegmentSumConfig,\n  sparseToDenseConfig,\n  splitVConfig,\n  sqrtConfig,\n  squareConfig,\n  squaredDifferenceConfig,\n  stepConfig,\n  stridedSliceConfig,\n  stringNGramsConfig,\n  stringSplitConfig,\n  stringToHashBucketFastConfig,\n  subConfig,\n  sumConfig,\n  tanConfig,\n  tanhConfig,\n  tileConfig,\n  topKConfig,\n  transformConfig,\n  transposeConfig,\n  uniqueConfig,\n  unpackConfig,\n  unsortedSegmentSumConfig,\n  zerosLikeConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Tile, TileAttrs, TileInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {tileImpl} from './Tile_impl';\n\nexport function tile(\n    args: {inputs: TileInputs, backend: MathBackendCPU, attrs: TileAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reps} = attrs;\n\n  assertNotComplex(x, 'tile');\n  const outBuf = tileImpl(backend.bufferSync(x), reps);\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'cpu',\n  kernelFunc: tile as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, TopK, TopKAttrs, TopKInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {topKImpl} from './TopK_impl';\n\nexport function topK(\n    args: {inputs: TopKInputs, backend: MathBackendCPU, attrs: TopKAttrs}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {k, sorted} = attrs;\n\n  assertNotComplex(x, 'topk');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [allTopKVals, allTopKIndices] =\n      topKImpl(xVals, x.shape, x.dtype as NumericDataType, k, sorted);\n\n  return [\n    backend.makeTensorInfo(\n        allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n    backend.makeTensorInfo(\n        allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n  ];\n}\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'cpu',\n  kernelFunc: topK as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unique, UniqueAttrs, UniqueInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {uniqueImpl} from './Unique_impl';\n\nexport function unique(\n    args: {inputs: UniqueInputs, attrs: UniqueAttrs, backend: MathBackendCPU}):\n    TensorInfo[] {\n  const {inputs, attrs, backend} = args;\n  const {axis} = attrs;\n  const {x} = inputs;\n  assertNotComplex(x, 'unique');\n\n  const values = backend.data.get(x.dataId).values;\n  const {outputValues, outputShape, indices} =\n      uniqueImpl(values, axis, x.shape, x.dtype);\n  return [\n    backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n    backend.makeTensorInfo([indices.length], 'int32', indices),\n  ];\n}\n\nexport const uniqueConfig: KernelConfig = {\n  kernelName: Unique,\n  backendName: 'cpu',\n  kernelFunc: unique as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function unpack(\n    args: {inputs: UnpackInputs, backend: MathBackendCPU, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const valueRank = value.shape.length;\n\n  const num = value.shape[axis];\n  const outShape: number[] = new Array(valueRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < valueRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = value.shape[i];\n    }\n  }\n\n  const begin = new Array(valueRank).fill(0);\n  const size = value.shape.slice();\n  size[axis] = 1;\n  const res = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const tempRes = slice({inputs: {x: value}, backend, attrs: {begin, size}});\n    res[i] = reshape({inputs: {x: tempRes}, backend, attrs: {shape: outShape}});\n    backend.disposeIntermediateTensorInfo(tempRes);\n  }\n\n  return res;\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'cpu',\n  kernelFunc: unpack as {} as KernelFunc\n};\n"],"names":["assertNotComplex","tensor","opName","Array","isArray","forEach","t","util","assert","dtype","whereImpl","kernel_impls","MathBackendCPU","KernelBackend","constructor","super","this","data","DataStorage","engine","nextDataId","write","values","shape","firstUse","env","get","backend_util","warn","dataId","id","set","refCount","makeTensorInfo","outId","length","isString","encodedValues","map","d","encodeString","has","incRef","decRef","move","numDataIds","async","readSync","complexTensorInfos","realValues","real","imagValues","imag","mergeRealAndImagArrays","bufferSync","strings","decodeString","buffer","Error","makeOutput","makeTensorFromTensorInfo","disposeData","force","delete","disposeIntermediateTensorInfo","tensorInfo","f","start","now","kernelMs","memory","unreliable","reasons","where","condition","condVals","dispose","floatPrecision","epsilon","simpleAbsImpl","vals","resultValues","Float32Array","i","Math","abs","absConfig","kernelName","Abs","backendName","kernelFunc","args","x","inputs","cpuBackend","backend","sizeFromShape","createSimpleBinaryKernelImpl","op","aShape","bShape","aVals","bVals","newShape","assertAndGetBroadcastShape","resultRank","resultStrides","computeStrides","resultSize","result","getTypedArrayFromDType","aRank","bRank","aStrides","bStrides","aBroadcastDims","getBroadcastDims","bBroadcastDims","loc","indexToLoc","aLoc","slice","aIndex","locToIndex","bLoc","bIndex","complex","realVals","imagVals","complexInfo","complexConfig","Complex","zeros","makeZerosTypedArray","identity","identityConfig","Identity","input","realVal","realConfig","Real","castImpl","inputType","Int32Array","from","zero","toTypedArray","resultData","resultShape","a","b","cast","attrs","zerosTensorInfo","floatX","realPart","hasEncodingLoss","resultType","castConfig","Cast","binaryKernelFunc","name","simpleImpl","complexImpl","decodedAVals","fromUint8ToStringArray","decodedBVals","$dtype","$aComplex","$aComplexVals","aReal","aImag","aRealVals","aImagVals","$bComplex","$bComplexVals","bReal","bImag","bRealVals","bImagVals","resultRealData","resultImagData","resultReal","resultImag","createComplexBinaryKernelImpl","resultRealVals","resultImagVals","aIdx","bIdx","opResult","addImpl","add","Add","addConfig","bincountImpl","xVals","weightsVals","weightsDtype","weightsShape","size","weightsSize","outVals","value","bincountReduceImpl","xBuf","weightsBuf","binaryOutput","numRows","numCols","outBuf","j","createSimpleUnaryImpl","newValues","unaryKernelFunc","xSize","getArrayFromDType","unaryKernelFuncFromImpl","unaryImpl","ceilImpl","xi","ceil","ceilConfig","Ceil","concatImpl","outShape","simplyConcat","offset","colOffset","decodedData","tIdx","row","resIdx","col","equalImpl","equal","Equal","equalConfig","expImpl","exp","Exp","expConfig","expm1Impl","expm1","expm1Config","Expm1","floorImpl","floor","floorConfig","Floor","gatherNdImpl","indicesData","paramsBuf","numSlices","sliceRank","sliceSize","strides","paramsShape","paramsSize","index","flattenIndex","dim","push","k","gatherV2Impl","indicesBuf","flattenOutputShape","originalLoc","batchIdx","indicesIdx","indicesIndex","originalIndex","greaterImpl","greaterConfig","Greater","greaterEqualImpl","greaterEqualConfig","GreaterEqual","lessImpl","lessConfig","Less","lessEqualImpl","lessEqualConfig","LessEqual","linSpaceImpl","stop","num","step","logImpl","log","logConfig","Log","maxImpl","reduceSize","max","Number","isNaN","maximumImpl","aValue","bValue","maximumConfig","Maximum","minimumImpl","min","minimumConfig","Minimum","multiplyImpl","multiplyComplexImpl","multiply","Multiply","multiplyConfig","negImpl","xShape","xDtype","minusOne","createScalarValue","negConfig","Neg","res","notEqualImpl","notEqualConfig","NotEqual","transposeImpl","perm","xRank","xStrides","newStrides","newLoc","transpose","transposeConfig","Transpose","prodImpl","reductionAxes","reduceShape","computeOutAndReduceShapes","outDtype","upcastType","prod","prodConfig","Prod","axis","keepDims","axes","parseAxisParam","permutation","getAxesPermutation","permutedX","intermediateTensorInfos","getInnerMostAxes","expandShapeToKeepDim","makeSplits","indices","indicesShape","paramsNestedSplits","numParamsDenseValues","valueSlices","numValues","numSplits","outSplits","fill","splits","lastSplit","validateSplits","nrows","rowLength","limit","outDim","outSplitsOutDim","delta","computeFlatOuterDims","orig","numOutDims","outDims","inDim","getValues","paramsDenseValues","paramsDenseValuesShape","paramsDenseValuesDType","valuesShape","valuesOut","numElements","valueSize","denseM","valuesM","outPos","writeValueSlices","raggedGatherImpl","paramsNestedSplitsShapes","outputRaggedRank","numParams","locString","join","validateIndices","outputNestedSplits","splitsOut","getSplits","outputDenseValues","RowPartitionType","RaggedTensorToTensorOp","shapeShape","valuesDType","defaultValue","defaultValueShape","rowPartitionValues","rowPartitionValuesShapes","rowPartitionTypeStrings","rowPartitionTypes","getRowPartitionTypesHelper","raggedRank","getRaggedRank","getRowPartitionTypeByDimension","dimension","FIRST_DIM_SIZE","getRowPartitionTensor","getMaxWidth","rowPartitionTensor","VALUE_ROWIDS","getMaxWidthValueRowID","ROW_SPLITS","getMaxWidthRowSplit","static","rowSplit","tensorLength","maxWidth","currentWidth","valueRowIds","indexLength","firstEqualIndex","firstEqualIndexValue","tensorShapeFromTensor","tShape","isPartial","makeShape","calculateOutputSize","firstDim","valueShape","validateDefaultValueShape","combineRaggedTensorToTensorShapes","calculateFirstParentOutputIndex","firstDimension","outputIndexMultiplier","firstDimensionOutput","minDimension","currentOutputIndex","calculateOutputIndexRowSplit","parentOutputIndex","outputSize","rowSplitSize","realLength","parentOutputIndexCurrent","calculateOutputIndexValueRowID","indexSize","currentOutputColumn","currentValueRowId","nextValueRowId","calculateOutputIndex","partitionType","getFirstDimensionSize","firstPartitionTensor","firstPartitionType","compute","multiplier","outputShape","outputTensor","outputIndex","setOutput","valuesBase","outputBase","elementShape","valueElementSize","outputIndexSize","srcShape","tidy","defaultValueTensor","reshape","bCastDefault","broadcastTo","dataSync","srcStart","dstStart","dstEnd","srcI","dstI","src","subarray","copyArray","dst","out","raggedTensorToTensorImpl","shapesShape","rangeImpl","rsqrtImpl","sqrt","rsqrtConfig","Rsqrt","scatterImpl","updates","numUpdates","sumDupeIndices","flattenShape","updatesData","rank","sigmoidImpl","sigmoid","Sigmoid","sigmoidConfig","sliceImpl","begin","isContinous","slice_util","isSliceContinous","flatOffset","computeFlatOffset","inBuf","outLoc","inLoc","idx","fromStringArrayToUint8","$begin","$size","parseSliceParams","assertParamsValid","sliceConfig","Slice","sparseFillEmptyRowsImpl","indicesDType","denseShape","indicesCount","denseRows","emptyRowIndicator","reverseIndexMap","getSparseFillEmptyRowsIndicesDenseShapeMismatch","rowsAreOrdered","lastIndicesRow","csrOffset","getSparseFillEmptyRowsNegativeIndexErrorMessage","getSparseFillEmptyRowsOutOfRangeIndexErrorMessage","allRowsFull","rowEmpty","outputIndices","outputValues","fullIndicesCount","filledCount","outputI","startingIndex","sparseReshapeImpl","inputIndices","inputIndicesShape","inputDType","inputShape","targetShape","denseSize","nnz","outputRank","product","unknownIndex","getSparseReshapeMultipleNegativeOneOutputDimErrorMessage","getSparseReshapeNegativeOutputDimErrorMessage","getSparseReshapeEmptyTensorZeroOutputDimErrorMessage","missing","trunc","getSparseReshapeInputOutputMultipleErrorMessage","getSparseReshapeInputOutputMismatchErrorMessage","inputRank","inputStrides","outputStrides","newIndices","sparseSegmentReductionImpl","segmentIds","isMean","numIndices","inputFlat","numCol","outputRows","getSparseSegmentReductionNegativeSegmentIdsErrorMessage","outputLength","reduce","output","end","uninitializedIndex","outIndex","nextIndex","getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage","getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage","getSparseSegmentReductionIndicesOutOfRangeErrorMessage","sqrtImpl","sqrtConfig","Sqrt","squaredDifferenceImpl","diff","squaredDifferenceConfig","SquaredDifference","stridedSliceImpl","StringNGramsOp","separator","nGramWidths","leftPad","rightPad","padWidth","preserveShortSequences","preserveShort","getPadWidth","nGramWidth","getNumNGrams","createNGrams","splitIndex","outputStartIndex","numNGrams","nGramIndex","leftPadding","rightPadding","numTokens","dataStartIndex","nGramSize","n","Uint8Array","nGram","nextNGramIndex","appendToNGram","str","inputDataSize","splitsSize","prevSplit","validSplits","numBatchItems","nGramsSplits","empty","nGrams","outputStartIdx","dataLength","stringNGramsImpl","dataSplits","split","delimiters","skipEmpty","delimiter","indexOf","token","tokenStart","stringSplitImpl","batchSize","tokens","maxNumEntries","prevTokensLength","nEntries","c","stringToHashBucketFastImpl","numBuckets","fingerPrint64","modulo","getLowBitsUnsigned","subImpl","sub","Sub","subConfig","tileImpl","reps","comparePair","valueDiff","select","array","left","right","z","s","sd","sign","swap","topKImpl","sorted","lastDim","batch","allTopKVals","allTopKIndices","valAndInd","sort","outOffset","topKVals","topKIndices","uniqueImpl","$axis","uniqueElements","inputBuffer","TensorBuffer","uniqueIndices","is1DTensor","element","toString","axisValues","m","undefined","uniqueIndex","Object","keys","outputTmpShape","outputBuffer","uniqueElementIndex","version","registerBackend","elu","Elu","eluConfig","leakyRelu","alpha","leakyReluConfig","LeakyRelu","preluImpl","xValue","prelu","preluConfig","Prelu","relu","Relu","reluConfig","relu6","Relu6","relu6Config","applyActivation","activation","preluActivationWeights","leakyreluAlpha","$shape","inferFromImplicitShape","$xSize","xData","reshapeConfig","Reshape","batchMatMul","transposeA","transposeB","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","outerDimsB","batchDimA","batchDimB","broadcast_util","concat","b3dShape","a3d","b3d","sharedDim","leftDim","rightDim","batchDim","a3dValues","b3dValues","a3dStrides","b3dStrides","aBatch","aOuterStep","aInnerStep","bInnerStep","bOuterStep","bBatch","resVals","blockSize","bi","i0","j0","k0","iBlock","jBlock","kBlock","sum","batchOffsetA","batchOffsetB","batchMatMulConfig","BatchMatMul","_fusedMatMulConfig","_FusedMatMul","bias","current","addRes","activationRes","intermediates","acosConfig","Acos","acos","acoshConfig","Acosh","acosh","addNConfig","AddN","tensors","currVals","allConfig","All","origAxes","permutedAxes","$x","assertAxesAreInnerMostDims","all","reshapedResult","anyConfig","Any","anyVal","argMaxConfig","ArgMax","outSize","maxIndex","argMinConfig","ArgMin","minIndex","asinConfig","Asin","asin","asinhConfig","Asinh","asinh","atanConfig","Atan","atan","atan2Config","Atan2","atan2","atanhConfig","Atanh","atanh","pool","xValues","convInfo","poolType","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","top","padLeft","initialValue","NEGATIVE_INFINITY","POSITIVE_INFINITY","outputVals","outputBatchStrides","outputRowStrides","outputColStrides","outputBatchOffset","inputBatchOffset","inChannels","yR","outHeight","xRCorner","xRMin","xRMax","inHeight","outputRowOffset","yC","outWidth","xCCorner","xCMin","xCMax","inWidth","minMaxValue","avgValue","count","xR","xROffset","xC","pixel","maxPoolPositions","flattenPositions","includeBatchInIndex","maxPositions","maxValue","maxPosition","wR","wC","pool3d","strideDepth","dilationDepth","effectiveFilterDepth","padFront","front","outputDepthStrides","channel","yDepth","outDepth","xDepthCorner","xDepthMin","xDepthMax","inDepth","outputDepthOffset","yRow","xRowCorner","xRowMin","xRowMax","yCol","xColCorner","xColMin","xColMax","outputColOffset","xDepth","xDepthOffset","xRow","xRowOffset","xCol","avgPoolConfig","AvgPool","filterSize","pad","dimRoundingMode","eitherStridesOrDilationsAreOne","computePool2DInfo","filterWidth","filterHeight","arraysEqual","inShape","avgPool3DConfig","AvgPool3D","dataFormat","computePool3DInfo","avgPool3DGradConfig","AvgPool3DGrad","dy","filterDepth","dx","avgMultiplier","dyBuf","dxDepth","dxRow","dxCol","dyDepthCorner","dyRowCorner","dyColCorner","dotProd","wDepth","dyDepth","wRow","dyRow","wCol","dyCol","avgPoolGradConfig","AvgPoolGrad","dyData","dxR","dxC","dyRCorner","dyCCorner","dyR","dyC","batchNormConfig","FusedBatchNorm","scale","mean","variance","varianceEpsilon","mVals","varVals","sVals","offVals","offValsLength","sValsLength","varValsLength","mValsLength","offi","mi","si","vi","batchToSpaceNDConfig","BatchToSpaceND","blockShape","crops","reshaped","getReshaped","permuted","getPermuted","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","getSliceSize","xReshaped","xTransposed","xTransposedReshaped","bincountConfig","Bincount","weights","broadcastArgsConfig","BroadcastArgs","s0","s1","s0Vals","s1Vals","broadcastShape","clipByValueConfig","ClipByValue","clipAttrs","clipValueMax","clipValueMin","complexAbsConfig","ComplexAbs","complexVals","hypot","imagVal","imagConfig","Imag","shapes","assertParamsConsistent","computeOutShape","$inputs","filter","reals","imags","realConcated","imagConcated","r","inputs2D","innerSize","inputsValShapes","finalOutShape","outInfo","concatConfig","Concat","conv2D","dilations","$dataFormat","convertConv2DDataFormat","computeConv2DInfo","isChannelsLast","y","filterStrides","xBatchStride","xRowStride","xColStride","xChannelStride","yBatchStride","yRowStride","yColStride","yChannelStride","wVals","yVals","xOffset1","yOffset1","yOffset2","wOffset1","xOffset2","yOffset3","xOffset3","wOffset3","d1","xVal","d2","outChannels","conv2DConfig","Conv2D","conv2DBackpropFilterConfig","Conv2DBackpropFilter","filterShape","dW","topPad","dyVals","yRMin","yRMax","yCMin","yCMax","conv2DBackpropInputConfig","Conv2DBackpropInput","dyStrides","dxValues","dyValues","fltValues","fltS0","fltS1","fltS2","dyOffset","fltOffset","conv3DConfig","Conv3D","computeConv3DInfo","yF","xFCorner","wF","xF","wOffset2","yOffset4","xOffset4","wOffset4","conv3DBackpropFilterV2Config","Conv3DBackpropFilterV2","dw","dwValues","dwS0","dwS1","dwS2","dwS3","dyS0","dyS1","dyS2","dyS3","xS0","xS1","xS2","xS3","frontPad","yFMin","yFMax","conv3DBackpropInputV2Config","Conv3DBackpropInputV2","dxS0","dxS1","dxS2","dxS3","fltS3","xFMin","cosConfig","Cos","cos","coshConfig","Cosh","cosh","cropAndResizeConfig","CropAndResize","image","boxes","boxInd","cropSize","method","extrapolationValue","imageHeight","imageWidth","numChannels","numBoxes","cropHeight","cropWidth","boxVals","boxIndVals","imageVals","inStride","outStride","startInd","y1","x1","y2","x2","bInd","heightScale","widthScale","yInd","ind","topInd","bottomInd","yLerp","xInd","leftInd","rightInd","xLerp","topLeft","topRight","bottomLeft","bottom","closestX","round","closestY","inInd","outInd","cumprodConfig","Cumprod","exclusive","reverse","permutedAxis","resultDtype","makeOnesTypedArray","finalDim","indexAdjuster","prevIdx","reverseTransposedResult","getUndoAxesPermutation","cumsumConfig","Cumsum","denseBincountConfig","DenseBincount","depthToSpaceConfig","DepthToSpace","inputHeight","inputWidth","inputDepth","outputHeight","outputWidth","outputDepth","outputIdx","h","inH","offsetH","w","inW","offsetD","inputIdx","depthwiseConv2dNative","$dilations","chMul","q","depthwiseConv2dNativeConfig","DepthwiseConv2dNative","depthwiseConv2dNativeBackpropFilterConfig","DepthwiseConv2dNativeBackpropFilter","dm","depthwiseConv2dNativeBackpropInputConfig","DepthwiseConv2dNativeBackpropInput","diagConfig","Diag","dilation2DConfig","Dilation2D","filterVals","filterRank","computeDilation2DInfo","outRank","hOut","hBeg","wOut","wBeg","curVal","MIN_SAFE_INTEGER","hIn","wIn","xIndex","filterIndex","val","dilation2DBackpropFilterConfig","Dilation2DBackpropFilter","toNestedArray","$filter","$dy","gradients","makeZerosNestedTypedArray","hMax","wMax","dilation2DBackpropInputConfig","Dilation2DBackpropInput","hInMax","wInMax","oldResult","sumConfig","Sum","einsumConfig","Einsum","equation","allDims","summedDims","idDims","decodeEinsumEquation","checkEinsumDimSizes","path","steps","getEinsumComputePath","nSteps","numDimsRemaining","tensorsToDispose","idTerm","permutationIndices","expandDims","dimsToExpand","getEinsumPermutation","isIdentityPermutation","splice","eluGradConfig","EluGrad","v","p","ERF_P","a1","ERF_A1","a2","ERF_A2","a3","ERF_A3","a4","ERF_A4","a5","ERF_A5","erf","Erf","erfConfig","$dim","expandDimsConfig","ExpandDims","div","RealDiv","realDivConfig","fftBatch","inverse","innerDim","inputVals","real2D","imag2D","fftImpl","getComplexWithIndex","$realInfo","$imagInfo","inputSize","fftRadix2","realInfo","imagInfo","sizeInfo","sizeInfoCopy","divRealInfo","divImagInfo","divRealVals","divImagVals","rawOutput","ret","e","exponent","term","assignToTypedArray","fourierTransformByMatmul","splitRealAndImagArrays","half","evenComplex","complexWithEvenIndex","evenRealVals","evenImagVals","evenShape","evenRealInfo","evenImagInfo","evenTensorInfo","oddComplex","complexWithOddIndex","oddRealVals","oddImagVals","oddShape","oddRealInfo","oddImagInfo","oddTensorInfo","$evenComplex","$evenRealVals","$evenImagVals","$evenShape","$evenRealInfo","$evenImagInfo","$evenTensorInfo","$oddComplex","$oddRealVals","$oddImagVals","$oddShape","$oddRealInfo","$oddImagInfo","$oddTensorInfo","exponents","eShape","eRealInfo","eImagInfo","exponentInfo","addPart","subPart","addPartReal","subPartReal","addPartImag","subPartImag","$real","$imag","$realVals","$imagVals","fftConfig","FFT","innerDimensionSize","input2D","resultReshaped","inferDtype","fillValues","fillConfig","Fill","flipLeftRightConfig","FlipLeftRight","batchOffset","rowOffset","coordX","outIdx","outputValue","floorDivConfig","FloorDiv","fusedConv2DConfig","FusedConv2D","resultOld","reshapedBias","reshapedAlpha","fusedDepthwiseConv2DConfig","FusedDepthwiseConv2D","gatherNdConfig","GatherNd","params","prepareAndValidate","gatherV2Config","GatherV2","batchDims","parsedAxis","indicesVals","axisDim","$batchDims","indicesSize","shapeInfo","segment_util","collectGatherOpShapeInfo","flattenX","outerSize","dimSize","ifftConfig","IFFT","isFiniteConfig","IsFinite","isFinite","isInfConfig","IsInf","Infinity","isNaNConfig","IsNan","linSpaceConfig","LinSpace","log1pConfig","Log1p","log1p","logicalAndConfig","LogicalAnd","logicalNotConfig","LogicalNot","logicalOrConfig","LogicalOr","LRNConfig","LRN","depthRadius","beta","channels","maxD","sumAcrossChannels","currentChannel","beginSumOffset","endSumOffset","pow","LRNGradConfig","LRNGrad","dySize","yValues","depthBegin","depthEnd","norm","dyi","reductionIndices","maxOutShape","maxConfig","Max","maxPoolConfig","MaxPool","maxPool3DConfig","MaxPool3D","maxPool3DGradConfig","MaxPool3DGrad","maxPosBuf","maxPool3dPositions","mask","maxPoolGradConfig","MaxPoolGrad","maxPoolWithArgmaxConfig","MaxPoolWithArgmax","pooled","indexes","maxPools","maxPoolWithArgmaxImpl","pooledDataId","indexesDataId","meanConfig","Mean","toDispose","reduceSizeScalar","minConfig","Min","mirrorPadConfig","MirrorPad","paddings","mode","coords","inIndex","modConfig","Mod","rem","softmax","logits","logitsRank","maxLogit","expandedShape","maxLogitReshaped","sumExp","sumReshaped","softmaxConfig","Softmax","multinomialConfig","Multinomial","numSamples","seed","normalized","probabilities","numEvents","probVals","resShape","cdf","event","random","seedrandom","alea","sampleId","nonMaxSuppressionV3Impl","nonMaxSuppressionV3Config","NonMaxSuppressionV3","scores","maxOutputSize","iouThreshold","scoreThreshold","boxesVals","scoresVals","selectedIndices","nonMaxSuppressionV4Impl","nonMaxSuppressionV4Config","NonMaxSuppressionV4","padToMaxOutputSize","validOutputs","nonMaxSuppressionV5Impl","nonMaxSuppressionV5Config","NonMaxSuppressionV5","softNmsSigma","maxOutputSizeVal","iouThresholdVal","scoreThresholdVal","softNmsSigmaVal","selectedScores","oneHotConfig","OneHot","depth","onValue","offValue","indicesVal","zerosLike","imagPart","zerosLikeConfig","ZerosLike","onesLikeConfig","OnesLike","onesLike","pack","assertShapesMatch","expandedT","packConfig","Pack","padV2Config","PadV2","constantValue","outCoords","powConfig","Pow","raggedGatherConfig","RaggedGather","$paramsNestedSplits","$paramsNestedSplitsShapes","$paramsDenseValues","$indices","outputDenseValuesShape","outputNestedSplitsTensors","outputDenseValuesTensor","raggedTensorToTensorConfig","RaggedTensorToTensor","rowPartitionTensors","$values","$defaultValue","$rowPartitionValues","rangeConfig","Range","reciprocalConfig","Reciprocal","resizeBilinearConfig","ResizeBilinear","images","alignCorners","halfPixelCenters","imagesStrides","newHeight","newWidth","oldHeight","oldWidth","effectiveInputSize","effectiveOutputSize","effectiveRowSizeRatio","effectiveColSizeRatio","sourceFracRow","sourceRowFloor","rowFrac","sourceRowCeil","topRowOffset","botRowOffset","sourceFracCol","sourceColFloor","colFrac","sourceColCeil","topLeftOffest","botLeftOffset","topRightOffset","botRightOffest","newValue","resizeBilinearGradConfig","ResizeBilinearGrad","xHeight","xWidth","yHeight","yWidth","effectiveXSize","effectiveYSize","bOffset","topDxRIndex","bottomDxRIndex","topDxROffset","bottomDxROffset","dxRLerp","inverseDxRLerp","leftDxCIndex","rightDxCIndex","dxCLerp","inverseDxCLerp","topLeftRCOffset","topRightRCOffset","bottomLeftRCOffset","bottomRightRCOffset","inverseDxRLerpTimesInverseDxCLerp","inverseDxRLerpTimesDxCLerp","dxRLerpTimesInverseDxCLerp","dxRLerpTimesDxCLerp","dyVal","resizeNearestNeighborConfig","ResizeNearestNeighbor","outputOffset","sourceNearestRow","sourceNearestCol","newVal","resizeNearestNeighborGradConfig","ResizeNearestNeighborGrad","invHeightScale","invWidthScale","winHeight","winWidth","startRLerp","startDyR","startCLerp","startDyC","accum","dyRIndex","dyROffset","dyCIndex","dyCOffset","reverseConfig","Reverse","dims","$dims","rotateWithOffsetConfig","RotateWithOffset","radians","fillValue","center","centerX","centerY","getImageCenter","sinFactor","sin","cosFactor","coordY","roundConfig","Round","base","scatterNdConfig","ScatterNd","calculateShapes","lowerBound","mid","upperBound","searchSortedConfig","SearchSorted","sortedSequence","side","sortedInputs","numInputs","sortedInputsSlice","searchSortedImpl","selectConfig","Select","conditionRank","tValues","eValues","scaleAlpha","SELU_SCALEALPHA","SELU_SCALE","seluConfig","Selu","signConfig","Sign","sinConfig","Sin","sinhConfig","Sinh","sinh","threshold","softplusConfig","Softplus","tooLarge","tooSmall","expX","spaceToBatchNDConfig","SpaceToBatchND","completePaddings","paddedX","reshapedPaddedShape","permutedReshapedPaddedPermutation","paddedXReshaped","paddedXT","sparseFillEmptyRowsConfig","SparseFillEmptyRows","$denseShape","outputIndicesShape","sparseReshapeConfig","SparseReshape","$inputShape","$inputIndices","sparseSegmentMeanConfig","SparseSegmentMean","$data","$segmentIds","outputData","outputDataShape","sparseSegmentSumConfig","SparseSegmentSum","sparseToDenseConfig","SparseToDense","sparseIndices","sparseValues","Boolean","splitVConfig","SplitV","numOrSizeSplits","splitSizes","prepareSplitSize","sliceT","squareConfig","Square","stepConfig","Step","stepAttrs","NaN","stridedSliceConfig","StridedSlice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","finalShapeSparse","finalShape","isIdentity","sliceDim0","isSimpleSlice","$end","$strides","sliceInfo","sliced","stringNGramsConfig","StringNGrams","$dataSplits","stringSplitConfig","StringSplit","$input","$delimiter","stringToHashBucketFastConfig","StringToHashBucketFast","tanConfig","Tan","tan","tanh","Tanh","transformConfig","Transform","transforms","interpolation","fillMode","inStrides","batchInStride","rowInStride","colInStride","outStrides","batchOutStride","rowOutStride","colOutStride","transformVals","transform","outY","outX","projection","inX","inY","mapCoord","nearestInterpolation","bilinearInterpolation","outCoord","len","inCoord","sz2","clamp","mapCoordReflect","sz","mapCoordWrap","mapCoordNearest","mapCoordConstant","readWithFillValue","batchStride","rowStride","colStride","yFloor","xFloor","yCeil","xCeil","kernelConfigs","Tile","TopK","Unique","Unpack","valueRank","tempRes","UnsortedSegmentSum","numSegments","numIters","expanded","scalarValue","segmentId","maskCasted","mul","sumTensorInfo","kernelConfig","registerKernel"],"mappings":"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AAgC,CACpCthC,GACA5qB,GACAmrB,GACAG,GACA3kB,GACA8kB,GACAI,GACAQ,GACAG,GACAI,GACAG,GACAG,GACAG,GACAG,GACAG,GACAoF,GACAW,GACAI,GACAoB,GACAxK,GACAiL,GACAkB,GACAgB,GACAG,GACAxzB,GACA+D,GACAgwB,GACA31B,GACAg2B,GACAsB,GACAgC,GACAE,GACAU,GACAW,GACAW,GACAmB,GACAQ,GACAG,GACAG,GACA6C,GACAY,GACAE,GACAE,GACAoB,GACAE,GACAG,GACAE,GACAE,GACAiB,GACAS,GACAO,GACA1hB,GACA+iB,GACA//B,GACAghC,GACA5gC,GACA8gC,GACA3gC,GACA0lC,GACAO,GACAE,GACA/lC,GACAsmC,GACAE,GACAK,GACAE,GACAI,GACA1lC,GACAG,GACA5I,GACAivC,GACAjZ,GACAmZ,GACAG,GACAG,GACAjsB,GACAza,GACAG,GACAymC,GACAjmC,GACAmmC,GACAG,GACAE,GACAE,GACAE,GACAW,GACAU,GACAvnC,GACAynC,GACAE,GACAE,GACAK,GACAE,GACAQ,GACAI,GACA5oC,GACA8oC,GACAM,GACAa,GACA3pC,GACAM,GACAqqC,GACAU,GACAK,GACAhrC,GACAwrC,GACAU,GACAM,GACAE,GACAI,GACAz0B,GACAnX,GACA8rC,GACAS,GACAM,GACAn5C,GACAunC,GACA8R,GACAx1B,GACAG,GACAS,GACA80B,GACA6B,GACA4B,GACAM,GACAe,GACAI,GACAY,GACAppC,GACAupC,GACAM,GACAQ,GACAQ,GACAjqC,GACAmqC,GACAE,GACAE,GACAtpC,GACAq8B,GACAqN,GACAK,GACAQ,GACAI,GACAI,GACAM,GACAE,GACAK,GACA5nC,GACAkoC,GACA9nC,GACAgoC,GACAI,GACAgB,GACAG,GACAI,GACA3lC,GACAukB,GACAshB,GHrUsC,CACtCnpD,WAAYupD,GACZrpD,YAAa,MACbC,WAAYmpD,IIU0B,CACtCtpD,WAAYksD,GACZhsD,YAAa,MACbC,oBAfEC,GAEF,MAAME,OAACA,EA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"}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
import { ResizeNearestNeighbor, util, } from '@tensorflow/tfjs-core';
import { cast } from './Cast';
let wasmResizeNearestNeighbor;
function setup(backend) {
    wasmResizeNearestNeighbor = backend.wasm.cwrap(ResizeNearestNeighbor, null /*void*/, [
        'number',
        'number',
        'number',
        'number',
        'number',
        'number',
        'number',
        'number',
        'number',
        'number',
    ]);
}
function resizeNearestNeighbor(args) {
    const { backend, inputs, attrs } = args;
    const { images } = inputs;
    const { alignCorners, halfPixelCenters, size } = attrs;
    const [newHeight, newWidth] = size;
    const [batch, oldHeight, oldWidth, numChannels] = images.shape;
    const outShape = [batch, newHeight, newWidth, numChannels];
    const out = backend.makeOutput(outShape, 'float32');
    if (util.sizeFromShape(images.shape) === 0) {
        return out;
    }
    let xData = backend.dataIdMap.get(images.dataId);
    let castedData;
    if (xData.dtype !== 'float32') {
        castedData = cast({
            backend,
            inputs: { x: images },
            attrs: { dtype: 'float32' },
        });
        xData = backend.dataIdMap.get(castedData.dataId);
    }
    const xId = xData.id;
    const outId = backend.dataIdMap.get(out.dataId).id;
    wasmResizeNearestNeighbor(xId, batch, oldHeight, oldWidth, numChannels, newHeight, newWidth, alignCorners ? 1 : 0, halfPixelCenters ? 1 : 0, outId);
    if (castedData != null) {
        backend.disposeData(castedData.dataId);
    }
    return out;
}
export const resizeNearestNeighborConfig = {
    kernelName: ResizeNearestNeighbor,
    backendName: 'wasm',
    setupFunc: setup,
    kernelFunc: resizeNearestNeighbor,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVzaXplTmVhcmVzdE5laWdoYm9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1iYWNrZW5kLXdhc20vc3JjL2tlcm5lbHMvUmVzaXplTmVhcmVzdE5laWdoYm9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUVILE9BQU8sRUFHTCxxQkFBcUIsRUFJckIsSUFBSSxHQUNMLE1BQU0sdUJBQXVCLENBQUM7QUFJL0IsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUU5QixJQUFJLHlCQVdLLENBQUM7QUFFVixTQUFTLEtBQUssQ0FBQyxPQUFvQjtJQUNqQyx5QkFBeUIsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FDNUMscUJBQXFCLEVBQ3JCLElBQUksQ0FBQyxRQUFRLEVBQ2I7UUFDRSxRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO0tBQ1QsQ0FDRixDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMscUJBQXFCLENBQUMsSUFJOUI7SUFDQyxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUM7SUFDeEMsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQztJQUMxQixNQUFNLEVBQUUsWUFBWSxFQUFFLGdCQUFnQixFQUFFLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQztJQUV2RCxNQUFNLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQztJQUVuQyxNQUFNLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsV0FBVyxDQUFDLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUMvRCxNQUFNLFFBQVEsR0FBRyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBRTNELE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3BELElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQzFDLE9BQU8sR0FBRyxDQUFDO0tBQ1o7SUFFRCxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDakQsSUFBSSxVQUFVLENBQUM7SUFDZixJQUFJLEtBQUssQ0FBQyxLQUFLLEtBQUssU0FBUyxFQUFFO1FBQzdCLFVBQVUsR0FBRyxJQUFJLENBQUM7WUFDaEIsT0FBTztZQUNQLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUU7WUFDckIsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRTtTQUM1QixDQUFDLENBQUM7UUFDSCxLQUFLLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ2xEO0lBRUQsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztJQUNyQixNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDO0lBRW5ELHlCQUF5QixDQUN2QixHQUFHLEVBQ0gsS0FBSyxFQUNMLFNBQVMsRUFDVCxRQUFRLEVBQ1IsV0FBVyxFQUNYLFNBQVMsRUFDVCxRQUFRLEVBQ1IsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDcEIsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUN4QixLQUFLLENBQ04sQ0FBQztJQUVGLElBQUksVUFBVSxJQUFJLElBQUksRUFBRTtRQUN0QixPQUFPLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUN4QztJQUVELE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLDJCQUEyQixHQUFpQjtJQUN2RCxVQUFVLEVBQUUscUJBQXFCO0lBQ2pDLFdBQVcsRUFBRSxNQUFNO0lBQ25CLFNBQVMsRUFBRSxLQUFLO0lBQ2hCLFVBQVUsRUFBRSxxQkFBeUM7Q0FDdEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgJ0xpY2Vuc2UnKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICdBUyBJUycgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge1xuICBLZXJuZWxDb25maWcsXG4gIEtlcm5lbEZ1bmMsXG4gIFJlc2l6ZU5lYXJlc3ROZWlnaGJvcixcbiAgUmVzaXplTmVhcmVzdE5laWdoYm9yQXR0cnMsXG4gIFJlc2l6ZU5lYXJlc3ROZWlnaGJvcklucHV0cyxcbiAgVGVuc29ySW5mbyxcbiAgdXRpbCxcbn0gZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcblxuaW1wb3J0IHsgQmFja2VuZFdhc20gfSBmcm9tICcuLi9iYWNrZW5kX3dhc20nO1xuXG5pbXBvcnQgeyBjYXN0IH0gZnJvbSAnLi9DYXN0JztcblxubGV0IHdhc21SZXNpemVOZWFyZXN0TmVpZ2hib3I6IChcbiAgeElkOiBudW1iZXIsXG4gIGJhdGNoOiBudW1iZXIsXG4gIG9sZEhlaWdodDogbnVtYmVyLFxuICBvbGRXaWR0aDogbnVtYmVyLFxuICBudW1DaGFubmVsczogbnVtYmVyLFxuICBuZXdIZWlnaHQ6IG51bWJlcixcbiAgbmV3V2lkdGg6IG51bWJlcixcbiAgYWxpZ25Db3JuZXJzOiBudW1iZXIsXG4gIGhhbGZQaXhlbENlbnRlcnM6IG51bWJlcixcbiAgb3V0SWQ6IG51bWJlclxuKSA9PiB2b2lkO1xuXG5mdW5jdGlvbiBzZXR1cChiYWNrZW5kOiBCYWNrZW5kV2FzbSk6IHZvaWQge1xuICB3YXNtUmVzaXplTmVhcmVzdE5laWdoYm9yID0gYmFja2VuZC53YXNtLmN3cmFwKFxuICAgIFJlc2l6ZU5lYXJlc3ROZWlnaGJvcixcbiAgICBudWxsIC8qdm9pZCovLFxuICAgIFtcbiAgICAgICdudW1iZXInLCAvLyB4SWRcbiAgICAgICdudW1iZXInLCAvLyBiYXRjaFxuICAgICAgJ251bWJlcicsIC8vIG9sZEhlaWdodFxuICAgICAgJ251bWJlcicsIC8vIG9sZFdpZHRoXG4gICAgICAnbnVtYmVyJywgLy8gbnVtQ2hhbm5lbHNcbiAgICAgICdudW1iZXInLCAvLyBuZXdIZWlnaHRcbiAgICAgICdudW1iZXInLCAvLyBuZXdXaWR0aFxuICAgICAgJ251bWJlcicsIC8vIGFsaWduQ29ybmVyc1xuICAgICAgJ251bWJlcicsIC8vIGhhbGZQaXhlbENlbnRlcnNcbiAgICAgICdudW1iZXInLCAvLyBvdXRJZFxuICAgIF1cbiAgKTtcbn1cblxuZnVuY3Rpb24gcmVzaXplTmVhcmVzdE5laWdoYm9yKGFyZ3M6IHtcbiAgYmFja2VuZDogQmFja2VuZFdhc207XG4gIGlucHV0czogUmVzaXplTmVhcmVzdE5laWdoYm9ySW5wdXRzO1xuICBhdHRyczogUmVzaXplTmVhcmVzdE5laWdoYm9yQXR0cnM7XG59KTogVGVuc29ySW5mbyB7XG4gIGNvbnN0IHsgYmFja2VuZCwgaW5wdXRzLCBhdHRycyB9ID0gYXJncztcbiAgY29uc3QgeyBpbWFnZXMgfSA9IGlucHV0cztcbiAgY29uc3QgeyBhbGlnbkNvcm5lcnMsIGhhbGZQaXhlbENlbnRlcnMsIHNpemUgfSA9IGF0dHJzO1xuXG4gIGNvbnN0IFtuZXdIZWlnaHQsIG5ld1dpZHRoXSA9IHNpemU7XG5cbiAgY29uc3QgW2JhdGNoLCBvbGRIZWlnaHQsIG9sZFdpZHRoLCBudW1DaGFubmVsc10gPSBpbWFnZXMuc2hhcGU7XG4gIGNvbnN0IG91dFNoYXBlID0gW2JhdGNoLCBuZXdIZWlnaHQsIG5ld1dpZHRoLCBudW1DaGFubmVsc107XG5cbiAgY29uc3Qgb3V0ID0gYmFja2VuZC5tYWtlT3V0cHV0KG91dFNoYXBlLCAnZmxvYXQzMicpO1xuICBpZiAodXRpbC5zaXplRnJvbVNoYXBlKGltYWdlcy5zaGFwZSkgPT09IDApIHtcbiAgICByZXR1cm4gb3V0O1xuICB9XG5cbiAgbGV0IHhEYXRhID0gYmFja2VuZC5kYXRhSWRNYXAuZ2V0KGltYWdlcy5kYXRhSWQpO1xuICBsZXQgY2FzdGVkRGF0YTtcbiAgaWYgKHhEYXRhLmR0eXBlICE9PSAnZmxvYXQzMicpIHtcbiAgICBjYXN0ZWREYXRhID0gY2FzdCh7XG4gICAgICBiYWNrZW5kLFxuICAgICAgaW5wdXRzOiB7IHg6IGltYWdlcyB9LFxuICAgICAgYXR0cnM6IHsgZHR5cGU6ICdmbG9hdDMyJyB9LFxuICAgIH0pO1xuICAgIHhEYXRhID0gYmFja2VuZC5kYXRhSWRNYXAuZ2V0KGNhc3RlZERhdGEuZGF0YUlkKTtcbiAgfVxuXG4gIGNvbnN0IHhJZCA9IHhEYXRhLmlkO1xuICBjb25zdCBvdXRJZCA9IGJhY2tlbmQuZGF0YUlkTWFwLmdldChvdXQuZGF0YUlkKS5pZDtcblxuICB3YXNtUmVzaXplTmVhcmVzdE5laWdoYm9yKFxuICAgIHhJZCxcbiAgICBiYXRjaCxcbiAgICBvbGRIZWlnaHQsXG4gICAgb2xkV2lkdGgsXG4gICAgbnVtQ2hhbm5lbHMsXG4gICAgbmV3SGVpZ2h0LFxuICAgIG5ld1dpZHRoLFxuICAgIGFsaWduQ29ybmVycyA/IDEgOiAwLFxuICAgIGhhbGZQaXhlbENlbnRlcnMgPyAxIDogMCxcbiAgICBvdXRJZFxuICApO1xuXG4gIGlmIChjYXN0ZWREYXRhICE9IG51bGwpIHtcbiAgICBiYWNrZW5kLmRpc3Bvc2VEYXRhKGNhc3RlZERhdGEuZGF0YUlkKTtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59XG5cbmV4cG9ydCBjb25zdCByZXNpemVOZWFyZXN0TmVpZ2hib3JDb25maWc6IEtlcm5lbENvbmZpZyA9IHtcbiAga2VybmVsTmFtZTogUmVzaXplTmVhcmVzdE5laWdoYm9yLFxuICBiYWNrZW5kTmFtZTogJ3dhc20nLFxuICBzZXR1cEZ1bmM6IHNldHVwLFxuICBrZXJuZWxGdW5jOiByZXNpemVOZWFyZXN0TmVpZ2hib3IgYXMge30gYXMgS2VybmVsRnVuYyxcbn07XG4iXX0=